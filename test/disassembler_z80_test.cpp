/*
 * Copyright (c) 2022 Andreas Signer <asigner@gmail.com>
 *
 * This file is part of vicedebug.
 *
 * vicedebug is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * vicedebug is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with vicedebug.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <QTest>

#include <vector>
#include <algorithm>
#include <cstdint>

#include "disassembler.h"
#include "disassembler_6502.h"
#include "disassembler_z80.h"

namespace vicedebug {

class DisassemblerZ80Test: public QObject
{
    Q_OBJECT

private:
    std::vector<std::uint8_t> memory_;
    vicedebug::DisassemblerZ80 disassembler_;

    void verifyLine(const Disassembler::Line& line, std::uint16_t addr, std::vector<std::uint8_t> bytes, std::string disassembly) {
        QVERIFY2(line.addr == addr, qPrintable(QString("Expected address %1, but got %2").arg(addr).arg(line.addr)));
        QVERIFY2(line.bytes.size() == bytes.size(), qPrintable(QString("Address %1: Expected %2 bytes, but got %3").arg(addr).arg(bytes.size()).arg(line.bytes.size())));
        for (int i = 0; i < bytes.size(); i++) {
            QVERIFY2(line.bytes[i] == bytes[i], qPrintable(QString("Address %1: Byte %2: Expected %3, but got %4").arg(addr).arg(i).arg(bytes[i]).arg(line.bytes[i])));
        }
        QVERIFY2(line.disassembly == disassembly, qPrintable(QString("Address %1: Expected '%2', but got '%3'").arg(addr).arg(disassembly.c_str()).arg(line.disassembly.c_str())));
    }

    void initMem(std::uint16_t addr, const std::vector<std::uint8_t>& bytes) {
        memory_.clear();
        for (int i = 0; i < addr; i++) {
            memory_.push_back(0);
        }
        memory_.insert(memory_.end(), bytes.begin(), bytes.end());
    }

private slots:

    void testDisassembleForward_NoPrefix() {
        initMem(0x0400, { 0x00 });
        auto lines = disassembler_.disassembleForward(0x0400, memory_, 1);
        verifyLine(lines[0], 0x0400, { 0x00 }, "NOP");
        initMem(0x0401, { 0x01,0x02,0x03 });
        lines = disassembler_.disassembleForward(0x0401, memory_, 1);
        verifyLine(lines[0], 0x0401, { 0x01,0x02,0x03 }, "LD BC, #$0302");
        initMem(0x0402, { 0x02 });
        lines = disassembler_.disassembleForward(0x0402, memory_, 1);
        verifyLine(lines[0], 0x0402, { 0x02 }, "LD (BC),A");
        initMem(0x0403, { 0x03 });
        lines = disassembler_.disassembleForward(0x0403, memory_, 1);
        verifyLine(lines[0], 0x0403, { 0x03 }, "INC BC");
        initMem(0x0404, { 0x04 });
        lines = disassembler_.disassembleForward(0x0404, memory_, 1);
        verifyLine(lines[0], 0x0404, { 0x04 }, "INC B");
        initMem(0x0405, { 0x05 });
        lines = disassembler_.disassembleForward(0x0405, memory_, 1);
        verifyLine(lines[0], 0x0405, { 0x05 }, "DEC B");
        initMem(0x0406, { 0x06,0x07 });
        lines = disassembler_.disassembleForward(0x0406, memory_, 1);
        verifyLine(lines[0], 0x0406, { 0x06,0x07 }, "LD B, #$07");
        initMem(0x0407, { 0x07 });
        lines = disassembler_.disassembleForward(0x0407, memory_, 1);
        verifyLine(lines[0], 0x0407, { 0x07 }, "RLCA");
        initMem(0x0408, { 0x08 });
        lines = disassembler_.disassembleForward(0x0408, memory_, 1);
        verifyLine(lines[0], 0x0408, { 0x08 }, "EX AF,AF'");
        initMem(0x0409, { 0x09 });
        lines = disassembler_.disassembleForward(0x0409, memory_, 1);
        verifyLine(lines[0], 0x0409, { 0x09 }, "ADD HL,BC");
        initMem(0x040a, { 0x0A });
        lines = disassembler_.disassembleForward(0x040a, memory_, 1);
        verifyLine(lines[0], 0x040a, { 0x0A }, "LD A,(BC)");
        initMem(0x040b, { 0x0B });
        lines = disassembler_.disassembleForward(0x040b, memory_, 1);
        verifyLine(lines[0], 0x040b, { 0x0B }, "DEC BC");
        initMem(0x040c, { 0x0C });
        lines = disassembler_.disassembleForward(0x040c, memory_, 1);
        verifyLine(lines[0], 0x040c, { 0x0C }, "INC C");
        initMem(0x040d, { 0x0D });
        lines = disassembler_.disassembleForward(0x040d, memory_, 1);
        verifyLine(lines[0], 0x040d, { 0x0D }, "DEC C");
        initMem(0x040e, { 0x0E,0x0F });
        lines = disassembler_.disassembleForward(0x040e, memory_, 1);
        verifyLine(lines[0], 0x040e, { 0x0E,0x0F }, "LD C, #$0F");
        initMem(0x040f, { 0x0F });
        lines = disassembler_.disassembleForward(0x040f, memory_, 1);
        verifyLine(lines[0], 0x040f, { 0x0F }, "RRCA");
        initMem(0x0410, { 0x10,0x11 });
        lines = disassembler_.disassembleForward(0x0410, memory_, 1);
        verifyLine(lines[0], 0x0410, { 0x10,0x11 }, "DJNZ $0423");
        initMem(0x0411, { 0x11,0x12,0x13 });
        lines = disassembler_.disassembleForward(0x0411, memory_, 1);
        verifyLine(lines[0], 0x0411, { 0x11,0x12,0x13 }, "LD DE, #$1312");
        initMem(0x0412, { 0x12 });
        lines = disassembler_.disassembleForward(0x0412, memory_, 1);
        verifyLine(lines[0], 0x0412, { 0x12 }, "LD (DE),A");
        initMem(0x0413, { 0x13 });
        lines = disassembler_.disassembleForward(0x0413, memory_, 1);
        verifyLine(lines[0], 0x0413, { 0x13 }, "INC DE");
        initMem(0x0414, { 0x14 });
        lines = disassembler_.disassembleForward(0x0414, memory_, 1);
        verifyLine(lines[0], 0x0414, { 0x14 }, "INC D");
        initMem(0x0415, { 0x15 });
        lines = disassembler_.disassembleForward(0x0415, memory_, 1);
        verifyLine(lines[0], 0x0415, { 0x15 }, "DEC D");
        initMem(0x0416, { 0x16,0x17 });
        lines = disassembler_.disassembleForward(0x0416, memory_, 1);
        verifyLine(lines[0], 0x0416, { 0x16,0x17 }, "LD D, #$17");
        initMem(0x0417, { 0x17 });
        lines = disassembler_.disassembleForward(0x0417, memory_, 1);
        verifyLine(lines[0], 0x0417, { 0x17 }, "RLA");
        initMem(0x0418, { 0x18,0x19 });
        lines = disassembler_.disassembleForward(0x0418, memory_, 1);
        verifyLine(lines[0], 0x0418, { 0x18,0x19 }, "JR $0433");
        initMem(0x0419, { 0x19 });
        lines = disassembler_.disassembleForward(0x0419, memory_, 1);
        verifyLine(lines[0], 0x0419, { 0x19 }, "ADD HL,DE");
        initMem(0x041a, { 0x1A });
        lines = disassembler_.disassembleForward(0x041a, memory_, 1);
        verifyLine(lines[0], 0x041a, { 0x1A }, "LD A,(DE)");
        initMem(0x041b, { 0x1B });
        lines = disassembler_.disassembleForward(0x041b, memory_, 1);
        verifyLine(lines[0], 0x041b, { 0x1B }, "DEC DE");
        initMem(0x041c, { 0x1C });
        lines = disassembler_.disassembleForward(0x041c, memory_, 1);
        verifyLine(lines[0], 0x041c, { 0x1C }, "INC E");
        initMem(0x041d, { 0x1D });
        lines = disassembler_.disassembleForward(0x041d, memory_, 1);
        verifyLine(lines[0], 0x041d, { 0x1D }, "DEC E");
        initMem(0x041e, { 0x1E,0x1F });
        lines = disassembler_.disassembleForward(0x041e, memory_, 1);
        verifyLine(lines[0], 0x041e, { 0x1E,0x1F }, "LD E, #$1F");
        initMem(0x041f, { 0x1F });
        lines = disassembler_.disassembleForward(0x041f, memory_, 1);
        verifyLine(lines[0], 0x041f, { 0x1F }, "RRA");
        initMem(0x0420, { 0x20,0x21 });
        lines = disassembler_.disassembleForward(0x0420, memory_, 1);
        verifyLine(lines[0], 0x0420, { 0x20,0x21 }, "JR NZ, $0443");
        initMem(0x0421, { 0x21,0x22,0x23 });
        lines = disassembler_.disassembleForward(0x0421, memory_, 1);
        verifyLine(lines[0], 0x0421, { 0x21,0x22,0x23 }, "LD HL, #$2322");
        initMem(0x0422, { 0x22,0x23,0x24 });
        lines = disassembler_.disassembleForward(0x0422, memory_, 1);
        verifyLine(lines[0], 0x0422, { 0x22,0x23,0x24 }, "LD ($2423),HL");
        initMem(0x0423, { 0x23 });
        lines = disassembler_.disassembleForward(0x0423, memory_, 1);
        verifyLine(lines[0], 0x0423, { 0x23 }, "INC HL");
        initMem(0x0424, { 0x24 });
        lines = disassembler_.disassembleForward(0x0424, memory_, 1);
        verifyLine(lines[0], 0x0424, { 0x24 }, "INC H");
        initMem(0x0425, { 0x25 });
        lines = disassembler_.disassembleForward(0x0425, memory_, 1);
        verifyLine(lines[0], 0x0425, { 0x25 }, "DEC H");
        initMem(0x0426, { 0x26,0x27 });
        lines = disassembler_.disassembleForward(0x0426, memory_, 1);
        verifyLine(lines[0], 0x0426, { 0x26,0x27 }, "LD H, #$27");
        initMem(0x0427, { 0x27 });
        lines = disassembler_.disassembleForward(0x0427, memory_, 1);
        verifyLine(lines[0], 0x0427, { 0x27 }, "DAA");
        initMem(0x0428, { 0x28,0x29 });
        lines = disassembler_.disassembleForward(0x0428, memory_, 1);
        verifyLine(lines[0], 0x0428, { 0x28,0x29 }, "JR Z, $0453");
        initMem(0x0429, { 0x29 });
        lines = disassembler_.disassembleForward(0x0429, memory_, 1);
        verifyLine(lines[0], 0x0429, { 0x29 }, "ADD HL,HL");
        initMem(0x042a, { 0x2A,0x2B,0x2C });
        lines = disassembler_.disassembleForward(0x042a, memory_, 1);
        verifyLine(lines[0], 0x042a, { 0x2A,0x2B,0x2C }, "LD HL, ($2C2B)");
        initMem(0x042b, { 0x2B });
        lines = disassembler_.disassembleForward(0x042b, memory_, 1);
        verifyLine(lines[0], 0x042b, { 0x2B }, "DEC HL");
        initMem(0x042c, { 0x2C });
        lines = disassembler_.disassembleForward(0x042c, memory_, 1);
        verifyLine(lines[0], 0x042c, { 0x2C }, "INC L");
        initMem(0x042d, { 0x2D });
        lines = disassembler_.disassembleForward(0x042d, memory_, 1);
        verifyLine(lines[0], 0x042d, { 0x2D }, "DEC L");
        initMem(0x042e, { 0x2E,0x2F });
        lines = disassembler_.disassembleForward(0x042e, memory_, 1);
        verifyLine(lines[0], 0x042e, { 0x2E,0x2F }, "LD L, #$2F");
        initMem(0x042f, { 0x2F });
        lines = disassembler_.disassembleForward(0x042f, memory_, 1);
        verifyLine(lines[0], 0x042f, { 0x2F }, "CPL");
        initMem(0x0430, { 0x30,0x31 });
        lines = disassembler_.disassembleForward(0x0430, memory_, 1);
        verifyLine(lines[0], 0x0430, { 0x30,0x31 }, "JR NC, $0463");
        initMem(0x0431, { 0x31,0x32,0x33 });
        lines = disassembler_.disassembleForward(0x0431, memory_, 1);
        verifyLine(lines[0], 0x0431, { 0x31,0x32,0x33 }, "LD SP, #$3332");
        initMem(0x0432, { 0x32,0x33,0x34 });
        lines = disassembler_.disassembleForward(0x0432, memory_, 1);
        verifyLine(lines[0], 0x0432, { 0x32,0x33,0x34 }, "LD ($3433),A");
        initMem(0x0433, { 0x33 });
        lines = disassembler_.disassembleForward(0x0433, memory_, 1);
        verifyLine(lines[0], 0x0433, { 0x33 }, "INC SP");
        initMem(0x0434, { 0x34 });
        lines = disassembler_.disassembleForward(0x0434, memory_, 1);
        verifyLine(lines[0], 0x0434, { 0x34 }, "INC (HL)");
        initMem(0x0435, { 0x35 });
        lines = disassembler_.disassembleForward(0x0435, memory_, 1);
        verifyLine(lines[0], 0x0435, { 0x35 }, "DEC (HL)");
        initMem(0x0436, { 0x36,0x37 });
        lines = disassembler_.disassembleForward(0x0436, memory_, 1);
        verifyLine(lines[0], 0x0436, { 0x36,0x37 }, "LD (HL), #$37");
        initMem(0x0437, { 0x37 });
        lines = disassembler_.disassembleForward(0x0437, memory_, 1);
        verifyLine(lines[0], 0x0437, { 0x37 }, "SCF");
        initMem(0x0438, { 0x38,0x39 });
        lines = disassembler_.disassembleForward(0x0438, memory_, 1);
        verifyLine(lines[0], 0x0438, { 0x38,0x39 }, "JR C, $0473");
        initMem(0x0439, { 0x39 });
        lines = disassembler_.disassembleForward(0x0439, memory_, 1);
        verifyLine(lines[0], 0x0439, { 0x39 }, "ADD HL,SP");
        initMem(0x043a, { 0x3A,0x3B,0x3C });
        lines = disassembler_.disassembleForward(0x043a, memory_, 1);
        verifyLine(lines[0], 0x043a, { 0x3A,0x3B,0x3C }, "LD A, ($3C3B)");
        initMem(0x043b, { 0x3B });
        lines = disassembler_.disassembleForward(0x043b, memory_, 1);
        verifyLine(lines[0], 0x043b, { 0x3B }, "DEC SP");
        initMem(0x043c, { 0x3C });
        lines = disassembler_.disassembleForward(0x043c, memory_, 1);
        verifyLine(lines[0], 0x043c, { 0x3C }, "INC A");
        initMem(0x043d, { 0x3D });
        lines = disassembler_.disassembleForward(0x043d, memory_, 1);
        verifyLine(lines[0], 0x043d, { 0x3D }, "DEC A");
        initMem(0x043e, { 0x3E,0x3F });
        lines = disassembler_.disassembleForward(0x043e, memory_, 1);
        verifyLine(lines[0], 0x043e, { 0x3E,0x3F }, "LD A, #$3F");
        initMem(0x043f, { 0x3F });
        lines = disassembler_.disassembleForward(0x043f, memory_, 1);
        verifyLine(lines[0], 0x043f, { 0x3F }, "CCF");
        initMem(0x0440, { 0x40 });
        lines = disassembler_.disassembleForward(0x0440, memory_, 1);
        verifyLine(lines[0], 0x0440, { 0x40 }, "LD B,B");
        initMem(0x0441, { 0x41 });
        lines = disassembler_.disassembleForward(0x0441, memory_, 1);
        verifyLine(lines[0], 0x0441, { 0x41 }, "LD B,C");
        initMem(0x0442, { 0x42 });
        lines = disassembler_.disassembleForward(0x0442, memory_, 1);
        verifyLine(lines[0], 0x0442, { 0x42 }, "LD B,D");
        initMem(0x0443, { 0x43 });
        lines = disassembler_.disassembleForward(0x0443, memory_, 1);
        verifyLine(lines[0], 0x0443, { 0x43 }, "LD B,E");
        initMem(0x0444, { 0x44 });
        lines = disassembler_.disassembleForward(0x0444, memory_, 1);
        verifyLine(lines[0], 0x0444, { 0x44 }, "LD B,H");
        initMem(0x0445, { 0x45 });
        lines = disassembler_.disassembleForward(0x0445, memory_, 1);
        verifyLine(lines[0], 0x0445, { 0x45 }, "LD B,L");
        initMem(0x0446, { 0x46 });
        lines = disassembler_.disassembleForward(0x0446, memory_, 1);
        verifyLine(lines[0], 0x0446, { 0x46 }, "LD B,(HL)");
        initMem(0x0447, { 0x47 });
        lines = disassembler_.disassembleForward(0x0447, memory_, 1);
        verifyLine(lines[0], 0x0447, { 0x47 }, "LD B,A");
        initMem(0x0448, { 0x48 });
        lines = disassembler_.disassembleForward(0x0448, memory_, 1);
        verifyLine(lines[0], 0x0448, { 0x48 }, "LD C,B");
        initMem(0x0449, { 0x49 });
        lines = disassembler_.disassembleForward(0x0449, memory_, 1);
        verifyLine(lines[0], 0x0449, { 0x49 }, "LD C,C");
        initMem(0x044a, { 0x4A });
        lines = disassembler_.disassembleForward(0x044a, memory_, 1);
        verifyLine(lines[0], 0x044a, { 0x4A }, "LD C,D");
        initMem(0x044b, { 0x4B });
        lines = disassembler_.disassembleForward(0x044b, memory_, 1);
        verifyLine(lines[0], 0x044b, { 0x4B }, "LD C,E");
        initMem(0x044c, { 0x4C });
        lines = disassembler_.disassembleForward(0x044c, memory_, 1);
        verifyLine(lines[0], 0x044c, { 0x4C }, "LD C,H");
        initMem(0x044d, { 0x4D });
        lines = disassembler_.disassembleForward(0x044d, memory_, 1);
        verifyLine(lines[0], 0x044d, { 0x4D }, "LD C,L");
        initMem(0x044e, { 0x4E });
        lines = disassembler_.disassembleForward(0x044e, memory_, 1);
        verifyLine(lines[0], 0x044e, { 0x4E }, "LD C,(HL)");
        initMem(0x044f, { 0x4F });
        lines = disassembler_.disassembleForward(0x044f, memory_, 1);
        verifyLine(lines[0], 0x044f, { 0x4F }, "LD C,A");
        initMem(0x0450, { 0x50 });
        lines = disassembler_.disassembleForward(0x0450, memory_, 1);
        verifyLine(lines[0], 0x0450, { 0x50 }, "LD D,B");
        initMem(0x0451, { 0x51 });
        lines = disassembler_.disassembleForward(0x0451, memory_, 1);
        verifyLine(lines[0], 0x0451, { 0x51 }, "LD D,C");
        initMem(0x0452, { 0x52 });
        lines = disassembler_.disassembleForward(0x0452, memory_, 1);
        verifyLine(lines[0], 0x0452, { 0x52 }, "LD D,D");
        initMem(0x0453, { 0x53 });
        lines = disassembler_.disassembleForward(0x0453, memory_, 1);
        verifyLine(lines[0], 0x0453, { 0x53 }, "LD D,E");
        initMem(0x0454, { 0x54 });
        lines = disassembler_.disassembleForward(0x0454, memory_, 1);
        verifyLine(lines[0], 0x0454, { 0x54 }, "LD D,H");
        initMem(0x0455, { 0x55 });
        lines = disassembler_.disassembleForward(0x0455, memory_, 1);
        verifyLine(lines[0], 0x0455, { 0x55 }, "LD D,L");
        initMem(0x0456, { 0x56 });
        lines = disassembler_.disassembleForward(0x0456, memory_, 1);
        verifyLine(lines[0], 0x0456, { 0x56 }, "LD D,(HL)");
        initMem(0x0457, { 0x57 });
        lines = disassembler_.disassembleForward(0x0457, memory_, 1);
        verifyLine(lines[0], 0x0457, { 0x57 }, "LD D,A");
        initMem(0x0458, { 0x58 });
        lines = disassembler_.disassembleForward(0x0458, memory_, 1);
        verifyLine(lines[0], 0x0458, { 0x58 }, "LD E,B");
        initMem(0x0459, { 0x59 });
        lines = disassembler_.disassembleForward(0x0459, memory_, 1);
        verifyLine(lines[0], 0x0459, { 0x59 }, "LD E,C");
        initMem(0x045a, { 0x5A });
        lines = disassembler_.disassembleForward(0x045a, memory_, 1);
        verifyLine(lines[0], 0x045a, { 0x5A }, "LD E,D");
        initMem(0x045b, { 0x5B });
        lines = disassembler_.disassembleForward(0x045b, memory_, 1);
        verifyLine(lines[0], 0x045b, { 0x5B }, "LD E,E");
        initMem(0x045c, { 0x5C });
        lines = disassembler_.disassembleForward(0x045c, memory_, 1);
        verifyLine(lines[0], 0x045c, { 0x5C }, "LD E,H");
        initMem(0x045d, { 0x5D });
        lines = disassembler_.disassembleForward(0x045d, memory_, 1);
        verifyLine(lines[0], 0x045d, { 0x5D }, "LD E,L");
        initMem(0x045e, { 0x5E });
        lines = disassembler_.disassembleForward(0x045e, memory_, 1);
        verifyLine(lines[0], 0x045e, { 0x5E }, "LD E,(HL)");
        initMem(0x045f, { 0x5F });
        lines = disassembler_.disassembleForward(0x045f, memory_, 1);
        verifyLine(lines[0], 0x045f, { 0x5F }, "LD E,A");
        initMem(0x0460, { 0x60 });
        lines = disassembler_.disassembleForward(0x0460, memory_, 1);
        verifyLine(lines[0], 0x0460, { 0x60 }, "LD H,B");
        initMem(0x0461, { 0x61 });
        lines = disassembler_.disassembleForward(0x0461, memory_, 1);
        verifyLine(lines[0], 0x0461, { 0x61 }, "LD H,C");
        initMem(0x0462, { 0x62 });
        lines = disassembler_.disassembleForward(0x0462, memory_, 1);
        verifyLine(lines[0], 0x0462, { 0x62 }, "LD H,D");
        initMem(0x0463, { 0x63 });
        lines = disassembler_.disassembleForward(0x0463, memory_, 1);
        verifyLine(lines[0], 0x0463, { 0x63 }, "LD H,E");
        initMem(0x0464, { 0x64 });
        lines = disassembler_.disassembleForward(0x0464, memory_, 1);
        verifyLine(lines[0], 0x0464, { 0x64 }, "LD H,H");
        initMem(0x0465, { 0x65 });
        lines = disassembler_.disassembleForward(0x0465, memory_, 1);
        verifyLine(lines[0], 0x0465, { 0x65 }, "LD H,L");
        initMem(0x0466, { 0x66 });
        lines = disassembler_.disassembleForward(0x0466, memory_, 1);
        verifyLine(lines[0], 0x0466, { 0x66 }, "LD H,(HL)");
        initMem(0x0467, { 0x67 });
        lines = disassembler_.disassembleForward(0x0467, memory_, 1);
        verifyLine(lines[0], 0x0467, { 0x67 }, "LD H,A");
        initMem(0x0468, { 0x68 });
        lines = disassembler_.disassembleForward(0x0468, memory_, 1);
        verifyLine(lines[0], 0x0468, { 0x68 }, "LD L,B");
        initMem(0x0469, { 0x69 });
        lines = disassembler_.disassembleForward(0x0469, memory_, 1);
        verifyLine(lines[0], 0x0469, { 0x69 }, "LD L,C");
        initMem(0x046a, { 0x6A });
        lines = disassembler_.disassembleForward(0x046a, memory_, 1);
        verifyLine(lines[0], 0x046a, { 0x6A }, "LD L,D");
        initMem(0x046b, { 0x6B });
        lines = disassembler_.disassembleForward(0x046b, memory_, 1);
        verifyLine(lines[0], 0x046b, { 0x6B }, "LD L,E");
        initMem(0x046c, { 0x6C });
        lines = disassembler_.disassembleForward(0x046c, memory_, 1);
        verifyLine(lines[0], 0x046c, { 0x6C }, "LD L,H");
        initMem(0x046d, { 0x6D });
        lines = disassembler_.disassembleForward(0x046d, memory_, 1);
        verifyLine(lines[0], 0x046d, { 0x6D }, "LD L,L");
        initMem(0x046e, { 0x6E });
        lines = disassembler_.disassembleForward(0x046e, memory_, 1);
        verifyLine(lines[0], 0x046e, { 0x6E }, "LD L,(HL)");
        initMem(0x046f, { 0x6F });
        lines = disassembler_.disassembleForward(0x046f, memory_, 1);
        verifyLine(lines[0], 0x046f, { 0x6F }, "LD L,A");
        initMem(0x0470, { 0x70 });
        lines = disassembler_.disassembleForward(0x0470, memory_, 1);
        verifyLine(lines[0], 0x0470, { 0x70 }, "LD (HL),B");
        initMem(0x0471, { 0x71 });
        lines = disassembler_.disassembleForward(0x0471, memory_, 1);
        verifyLine(lines[0], 0x0471, { 0x71 }, "LD (HL),C");
        initMem(0x0472, { 0x72 });
        lines = disassembler_.disassembleForward(0x0472, memory_, 1);
        verifyLine(lines[0], 0x0472, { 0x72 }, "LD (HL),D");
        initMem(0x0473, { 0x73 });
        lines = disassembler_.disassembleForward(0x0473, memory_, 1);
        verifyLine(lines[0], 0x0473, { 0x73 }, "LD (HL),E");
        initMem(0x0474, { 0x74 });
        lines = disassembler_.disassembleForward(0x0474, memory_, 1);
        verifyLine(lines[0], 0x0474, { 0x74 }, "LD (HL),H");
        initMem(0x0475, { 0x75 });
        lines = disassembler_.disassembleForward(0x0475, memory_, 1);
        verifyLine(lines[0], 0x0475, { 0x75 }, "LD (HL),L");
        initMem(0x0476, { 0x76 });
        lines = disassembler_.disassembleForward(0x0476, memory_, 1);
        verifyLine(lines[0], 0x0476, { 0x76 }, "HALT");
        initMem(0x0477, { 0x77 });
        lines = disassembler_.disassembleForward(0x0477, memory_, 1);
        verifyLine(lines[0], 0x0477, { 0x77 }, "LD (HL),A");
        initMem(0x0478, { 0x78 });
        lines = disassembler_.disassembleForward(0x0478, memory_, 1);
        verifyLine(lines[0], 0x0478, { 0x78 }, "LD A,B");
        initMem(0x0479, { 0x79 });
        lines = disassembler_.disassembleForward(0x0479, memory_, 1);
        verifyLine(lines[0], 0x0479, { 0x79 }, "LD A,C");
        initMem(0x047a, { 0x7A });
        lines = disassembler_.disassembleForward(0x047a, memory_, 1);
        verifyLine(lines[0], 0x047a, { 0x7A }, "LD A,D");
        initMem(0x047b, { 0x7B });
        lines = disassembler_.disassembleForward(0x047b, memory_, 1);
        verifyLine(lines[0], 0x047b, { 0x7B }, "LD A,E");
        initMem(0x047c, { 0x7C });
        lines = disassembler_.disassembleForward(0x047c, memory_, 1);
        verifyLine(lines[0], 0x047c, { 0x7C }, "LD A,H");
        initMem(0x047d, { 0x7D });
        lines = disassembler_.disassembleForward(0x047d, memory_, 1);
        verifyLine(lines[0], 0x047d, { 0x7D }, "LD A,L");
        initMem(0x047e, { 0x7E });
        lines = disassembler_.disassembleForward(0x047e, memory_, 1);
        verifyLine(lines[0], 0x047e, { 0x7E }, "LD A,(HL)");
        initMem(0x047f, { 0x7F });
        lines = disassembler_.disassembleForward(0x047f, memory_, 1);
        verifyLine(lines[0], 0x047f, { 0x7F }, "LD A,A");
        initMem(0x0480, { 0x80 });
        lines = disassembler_.disassembleForward(0x0480, memory_, 1);
        verifyLine(lines[0], 0x0480, { 0x80 }, "ADD B");
        initMem(0x0481, { 0x81 });
        lines = disassembler_.disassembleForward(0x0481, memory_, 1);
        verifyLine(lines[0], 0x0481, { 0x81 }, "ADD C");
        initMem(0x0482, { 0x82 });
        lines = disassembler_.disassembleForward(0x0482, memory_, 1);
        verifyLine(lines[0], 0x0482, { 0x82 }, "ADD D");
        initMem(0x0483, { 0x83 });
        lines = disassembler_.disassembleForward(0x0483, memory_, 1);
        verifyLine(lines[0], 0x0483, { 0x83 }, "ADD E");
        initMem(0x0484, { 0x84 });
        lines = disassembler_.disassembleForward(0x0484, memory_, 1);
        verifyLine(lines[0], 0x0484, { 0x84 }, "ADD H");
        initMem(0x0485, { 0x85 });
        lines = disassembler_.disassembleForward(0x0485, memory_, 1);
        verifyLine(lines[0], 0x0485, { 0x85 }, "ADD L");
        initMem(0x0486, { 0x86 });
        lines = disassembler_.disassembleForward(0x0486, memory_, 1);
        verifyLine(lines[0], 0x0486, { 0x86 }, "ADD (HL)");
        initMem(0x0487, { 0x87 });
        lines = disassembler_.disassembleForward(0x0487, memory_, 1);
        verifyLine(lines[0], 0x0487, { 0x87 }, "ADD A");
        initMem(0x0488, { 0x88 });
        lines = disassembler_.disassembleForward(0x0488, memory_, 1);
        verifyLine(lines[0], 0x0488, { 0x88 }, "ADC B");
        initMem(0x0489, { 0x89 });
        lines = disassembler_.disassembleForward(0x0489, memory_, 1);
        verifyLine(lines[0], 0x0489, { 0x89 }, "ADC C");
        initMem(0x048a, { 0x8A });
        lines = disassembler_.disassembleForward(0x048a, memory_, 1);
        verifyLine(lines[0], 0x048a, { 0x8A }, "ADC D");
        initMem(0x048b, { 0x8B });
        lines = disassembler_.disassembleForward(0x048b, memory_, 1);
        verifyLine(lines[0], 0x048b, { 0x8B }, "ADC E");
        initMem(0x048c, { 0x8C });
        lines = disassembler_.disassembleForward(0x048c, memory_, 1);
        verifyLine(lines[0], 0x048c, { 0x8C }, "ADC H");
        initMem(0x048d, { 0x8D });
        lines = disassembler_.disassembleForward(0x048d, memory_, 1);
        verifyLine(lines[0], 0x048d, { 0x8D }, "ADC L");
        initMem(0x048e, { 0x8E });
        lines = disassembler_.disassembleForward(0x048e, memory_, 1);
        verifyLine(lines[0], 0x048e, { 0x8E }, "ADC (HL)");
        initMem(0x048f, { 0x8F });
        lines = disassembler_.disassembleForward(0x048f, memory_, 1);
        verifyLine(lines[0], 0x048f, { 0x8F }, "ADC A");
        initMem(0x0490, { 0x90 });
        lines = disassembler_.disassembleForward(0x0490, memory_, 1);
        verifyLine(lines[0], 0x0490, { 0x90 }, "SUB B");
        initMem(0x0491, { 0x91 });
        lines = disassembler_.disassembleForward(0x0491, memory_, 1);
        verifyLine(lines[0], 0x0491, { 0x91 }, "SUB C");
        initMem(0x0492, { 0x92 });
        lines = disassembler_.disassembleForward(0x0492, memory_, 1);
        verifyLine(lines[0], 0x0492, { 0x92 }, "SUB D");
        initMem(0x0493, { 0x93 });
        lines = disassembler_.disassembleForward(0x0493, memory_, 1);
        verifyLine(lines[0], 0x0493, { 0x93 }, "SUB E");
        initMem(0x0494, { 0x94 });
        lines = disassembler_.disassembleForward(0x0494, memory_, 1);
        verifyLine(lines[0], 0x0494, { 0x94 }, "SUB H");
        initMem(0x0495, { 0x95 });
        lines = disassembler_.disassembleForward(0x0495, memory_, 1);
        verifyLine(lines[0], 0x0495, { 0x95 }, "SUB L");
        initMem(0x0496, { 0x96 });
        lines = disassembler_.disassembleForward(0x0496, memory_, 1);
        verifyLine(lines[0], 0x0496, { 0x96 }, "SUB (HL)");
        initMem(0x0497, { 0x97 });
        lines = disassembler_.disassembleForward(0x0497, memory_, 1);
        verifyLine(lines[0], 0x0497, { 0x97 }, "SUB A");
        initMem(0x0498, { 0x98 });
        lines = disassembler_.disassembleForward(0x0498, memory_, 1);
        verifyLine(lines[0], 0x0498, { 0x98 }, "SBC B");
        initMem(0x0499, { 0x99 });
        lines = disassembler_.disassembleForward(0x0499, memory_, 1);
        verifyLine(lines[0], 0x0499, { 0x99 }, "SBC C");
        initMem(0x049a, { 0x9A });
        lines = disassembler_.disassembleForward(0x049a, memory_, 1);
        verifyLine(lines[0], 0x049a, { 0x9A }, "SBC D");
        initMem(0x049b, { 0x9B });
        lines = disassembler_.disassembleForward(0x049b, memory_, 1);
        verifyLine(lines[0], 0x049b, { 0x9B }, "SBC E");
        initMem(0x049c, { 0x9C });
        lines = disassembler_.disassembleForward(0x049c, memory_, 1);
        verifyLine(lines[0], 0x049c, { 0x9C }, "SBC H");
        initMem(0x049d, { 0x9D });
        lines = disassembler_.disassembleForward(0x049d, memory_, 1);
        verifyLine(lines[0], 0x049d, { 0x9D }, "SBC L");
        initMem(0x049e, { 0x9E });
        lines = disassembler_.disassembleForward(0x049e, memory_, 1);
        verifyLine(lines[0], 0x049e, { 0x9E }, "SBC (HL)");
        initMem(0x049f, { 0x9F });
        lines = disassembler_.disassembleForward(0x049f, memory_, 1);
        verifyLine(lines[0], 0x049f, { 0x9F }, "SBC A");
        initMem(0x04a0, { 0xA0 });
        lines = disassembler_.disassembleForward(0x04a0, memory_, 1);
        verifyLine(lines[0], 0x04a0, { 0xA0 }, "AND B");
        initMem(0x04a1, { 0xA1 });
        lines = disassembler_.disassembleForward(0x04a1, memory_, 1);
        verifyLine(lines[0], 0x04a1, { 0xA1 }, "AND C");
        initMem(0x04a2, { 0xA2 });
        lines = disassembler_.disassembleForward(0x04a2, memory_, 1);
        verifyLine(lines[0], 0x04a2, { 0xA2 }, "AND D");
        initMem(0x04a3, { 0xA3 });
        lines = disassembler_.disassembleForward(0x04a3, memory_, 1);
        verifyLine(lines[0], 0x04a3, { 0xA3 }, "AND E");
        initMem(0x04a4, { 0xA4 });
        lines = disassembler_.disassembleForward(0x04a4, memory_, 1);
        verifyLine(lines[0], 0x04a4, { 0xA4 }, "AND H");
        initMem(0x04a5, { 0xA5 });
        lines = disassembler_.disassembleForward(0x04a5, memory_, 1);
        verifyLine(lines[0], 0x04a5, { 0xA5 }, "AND L");
        initMem(0x04a6, { 0xA6 });
        lines = disassembler_.disassembleForward(0x04a6, memory_, 1);
        verifyLine(lines[0], 0x04a6, { 0xA6 }, "AND (HL)");
        initMem(0x04a7, { 0xA7 });
        lines = disassembler_.disassembleForward(0x04a7, memory_, 1);
        verifyLine(lines[0], 0x04a7, { 0xA7 }, "AND A");
        initMem(0x04a8, { 0xA8 });
        lines = disassembler_.disassembleForward(0x04a8, memory_, 1);
        verifyLine(lines[0], 0x04a8, { 0xA8 }, "XOR B");
        initMem(0x04a9, { 0xA9 });
        lines = disassembler_.disassembleForward(0x04a9, memory_, 1);
        verifyLine(lines[0], 0x04a9, { 0xA9 }, "XOR C");
        initMem(0x04aa, { 0xAA });
        lines = disassembler_.disassembleForward(0x04aa, memory_, 1);
        verifyLine(lines[0], 0x04aa, { 0xAA }, "XOR D");
        initMem(0x04ab, { 0xAB });
        lines = disassembler_.disassembleForward(0x04ab, memory_, 1);
        verifyLine(lines[0], 0x04ab, { 0xAB }, "XOR E");
        initMem(0x04ac, { 0xAC });
        lines = disassembler_.disassembleForward(0x04ac, memory_, 1);
        verifyLine(lines[0], 0x04ac, { 0xAC }, "XOR H");
        initMem(0x04ad, { 0xAD });
        lines = disassembler_.disassembleForward(0x04ad, memory_, 1);
        verifyLine(lines[0], 0x04ad, { 0xAD }, "XOR L");
        initMem(0x04ae, { 0xAE });
        lines = disassembler_.disassembleForward(0x04ae, memory_, 1);
        verifyLine(lines[0], 0x04ae, { 0xAE }, "XOR (HL)");
        initMem(0x04af, { 0xAF });
        lines = disassembler_.disassembleForward(0x04af, memory_, 1);
        verifyLine(lines[0], 0x04af, { 0xAF }, "XOR A");
        initMem(0x04b0, { 0xB0 });
        lines = disassembler_.disassembleForward(0x04b0, memory_, 1);
        verifyLine(lines[0], 0x04b0, { 0xB0 }, "OR B");
        initMem(0x04b1, { 0xB1 });
        lines = disassembler_.disassembleForward(0x04b1, memory_, 1);
        verifyLine(lines[0], 0x04b1, { 0xB1 }, "OR C");
        initMem(0x04b2, { 0xB2 });
        lines = disassembler_.disassembleForward(0x04b2, memory_, 1);
        verifyLine(lines[0], 0x04b2, { 0xB2 }, "OR D");
        initMem(0x04b3, { 0xB3 });
        lines = disassembler_.disassembleForward(0x04b3, memory_, 1);
        verifyLine(lines[0], 0x04b3, { 0xB3 }, "OR E");
        initMem(0x04b4, { 0xB4 });
        lines = disassembler_.disassembleForward(0x04b4, memory_, 1);
        verifyLine(lines[0], 0x04b4, { 0xB4 }, "OR H");
        initMem(0x04b5, { 0xB5 });
        lines = disassembler_.disassembleForward(0x04b5, memory_, 1);
        verifyLine(lines[0], 0x04b5, { 0xB5 }, "OR L");
        initMem(0x04b6, { 0xB6 });
        lines = disassembler_.disassembleForward(0x04b6, memory_, 1);
        verifyLine(lines[0], 0x04b6, { 0xB6 }, "OR (HL)");
        initMem(0x04b7, { 0xB7 });
        lines = disassembler_.disassembleForward(0x04b7, memory_, 1);
        verifyLine(lines[0], 0x04b7, { 0xB7 }, "OR A");
        initMem(0x04b8, { 0xB8 });
        lines = disassembler_.disassembleForward(0x04b8, memory_, 1);
        verifyLine(lines[0], 0x04b8, { 0xB8 }, "CP B");
        initMem(0x04b9, { 0xB9 });
        lines = disassembler_.disassembleForward(0x04b9, memory_, 1);
        verifyLine(lines[0], 0x04b9, { 0xB9 }, "CP C");
        initMem(0x04ba, { 0xBA });
        lines = disassembler_.disassembleForward(0x04ba, memory_, 1);
        verifyLine(lines[0], 0x04ba, { 0xBA }, "CP D");
        initMem(0x04bb, { 0xBB });
        lines = disassembler_.disassembleForward(0x04bb, memory_, 1);
        verifyLine(lines[0], 0x04bb, { 0xBB }, "CP E");
        initMem(0x04bc, { 0xBC });
        lines = disassembler_.disassembleForward(0x04bc, memory_, 1);
        verifyLine(lines[0], 0x04bc, { 0xBC }, "CP H");
        initMem(0x04bd, { 0xBD });
        lines = disassembler_.disassembleForward(0x04bd, memory_, 1);
        verifyLine(lines[0], 0x04bd, { 0xBD }, "CP L");
        initMem(0x04be, { 0xBE });
        lines = disassembler_.disassembleForward(0x04be, memory_, 1);
        verifyLine(lines[0], 0x04be, { 0xBE }, "CP (HL)");
        initMem(0x04bf, { 0xBF });
        lines = disassembler_.disassembleForward(0x04bf, memory_, 1);
        verifyLine(lines[0], 0x04bf, { 0xBF }, "CP A");
        initMem(0x04c0, { 0xC0 });
        lines = disassembler_.disassembleForward(0x04c0, memory_, 1);
        verifyLine(lines[0], 0x04c0, { 0xC0 }, "RET NZ");
        initMem(0x04c1, { 0xC1 });
        lines = disassembler_.disassembleForward(0x04c1, memory_, 1);
        verifyLine(lines[0], 0x04c1, { 0xC1 }, "POP BC");
        initMem(0x04c2, { 0xC2,0xC3,0xC4 });
        lines = disassembler_.disassembleForward(0x04c2, memory_, 1);
        verifyLine(lines[0], 0x04c2, { 0xC2,0xC3,0xC4 }, "JP NZ, $C4C3");
        initMem(0x04c3, { 0xC3,0xC4,0xC5 });
        lines = disassembler_.disassembleForward(0x04c3, memory_, 1);
        verifyLine(lines[0], 0x04c3, { 0xC3,0xC4,0xC5 }, "JP $C5C4");
        initMem(0x04c4, { 0xC4,0xC5,0xC6 });
        lines = disassembler_.disassembleForward(0x04c4, memory_, 1);
        verifyLine(lines[0], 0x04c4, { 0xC4,0xC5,0xC6 }, "CALL NZ, $C6C5");
        initMem(0x04c5, { 0xC5 });
        lines = disassembler_.disassembleForward(0x04c5, memory_, 1);
        verifyLine(lines[0], 0x04c5, { 0xC5 }, "PUSH BC");
        initMem(0x04c6, { 0xC6,0xC7 });
        lines = disassembler_.disassembleForward(0x04c6, memory_, 1);
        verifyLine(lines[0], 0x04c6, { 0xC6,0xC7 }, "ADD #$C7");
        initMem(0x04c7, { 0xC7 });
        lines = disassembler_.disassembleForward(0x04c7, memory_, 1);
        verifyLine(lines[0], 0x04c7, { 0xC7 }, "RST 00");
        initMem(0x04c8, { 0xC8 });
        lines = disassembler_.disassembleForward(0x04c8, memory_, 1);
        verifyLine(lines[0], 0x04c8, { 0xC8 }, "RET Z");
        initMem(0x04c9, { 0xC9 });
        lines = disassembler_.disassembleForward(0x04c9, memory_, 1);
        verifyLine(lines[0], 0x04c9, { 0xC9 }, "RET");
        initMem(0x04ca, { 0xCA,0xCB,0xCC });
        lines = disassembler_.disassembleForward(0x04ca, memory_, 1);
        verifyLine(lines[0], 0x04ca, { 0xCA,0xCB,0xCC }, "JP Z, $CCCB");
        initMem(0x04cc, { 0xCC,0xCD,0xCE });
        lines = disassembler_.disassembleForward(0x04cc, memory_, 1);
        verifyLine(lines[0], 0x04cc, { 0xCC,0xCD,0xCE }, "CALL Z, $CECD");
        initMem(0x04cd, { 0xCD,0xCE,0xCF });
        lines = disassembler_.disassembleForward(0x04cd, memory_, 1);
        verifyLine(lines[0], 0x04cd, { 0xCD,0xCE,0xCF }, "CALL $CFCE");
        initMem(0x04ce, { 0xCE,0xCF });
        lines = disassembler_.disassembleForward(0x04ce, memory_, 1);
        verifyLine(lines[0], 0x04ce, { 0xCE,0xCF }, "ADC #$CF");
        initMem(0x04cf, { 0xCF });
        lines = disassembler_.disassembleForward(0x04cf, memory_, 1);
        verifyLine(lines[0], 0x04cf, { 0xCF }, "RST 08");
        initMem(0x04d0, { 0xD0 });
        lines = disassembler_.disassembleForward(0x04d0, memory_, 1);
        verifyLine(lines[0], 0x04d0, { 0xD0 }, "RET NC");
        initMem(0x04d1, { 0xD1 });
        lines = disassembler_.disassembleForward(0x04d1, memory_, 1);
        verifyLine(lines[0], 0x04d1, { 0xD1 }, "POP DE");
        initMem(0x04d2, { 0xD2,0xD3,0xD4 });
        lines = disassembler_.disassembleForward(0x04d2, memory_, 1);
        verifyLine(lines[0], 0x04d2, { 0xD2,0xD3,0xD4 }, "JP NC, $D4D3");
        initMem(0x04d3, { 0xD3,0xD4 });
        lines = disassembler_.disassembleForward(0x04d3, memory_, 1);
        verifyLine(lines[0], 0x04d3, { 0xD3,0xD4 }, "OUTA $D4");
        initMem(0x04d4, { 0xD4,0xD5,0xD6 });
        lines = disassembler_.disassembleForward(0x04d4, memory_, 1);
        verifyLine(lines[0], 0x04d4, { 0xD4,0xD5,0xD6 }, "CALL NC, $D6D5");
        initMem(0x04d5, { 0xD5 });
        lines = disassembler_.disassembleForward(0x04d5, memory_, 1);
        verifyLine(lines[0], 0x04d5, { 0xD5 }, "PUSH DE");
        initMem(0x04d6, { 0xD6,0xD7 });
        lines = disassembler_.disassembleForward(0x04d6, memory_, 1);
        verifyLine(lines[0], 0x04d6, { 0xD6,0xD7 }, "SUB #$D7");
        initMem(0x04d7, { 0xD7 });
        lines = disassembler_.disassembleForward(0x04d7, memory_, 1);
        verifyLine(lines[0], 0x04d7, { 0xD7 }, "RST 10");
        initMem(0x04d8, { 0xD8 });
        lines = disassembler_.disassembleForward(0x04d8, memory_, 1);
        verifyLine(lines[0], 0x04d8, { 0xD8 }, "RET C");
        initMem(0x04d9, { 0xD9 });
        lines = disassembler_.disassembleForward(0x04d9, memory_, 1);
        verifyLine(lines[0], 0x04d9, { 0xD9 }, "EXX");
        initMem(0x04da, { 0xDA,0xDB,0xDC });
        lines = disassembler_.disassembleForward(0x04da, memory_, 1);
        verifyLine(lines[0], 0x04da, { 0xDA,0xDB,0xDC }, "JP C, $DCDB");
        initMem(0x04db, { 0xDB,0xDC });
        lines = disassembler_.disassembleForward(0x04db, memory_, 1);
        verifyLine(lines[0], 0x04db, { 0xDB,0xDC }, "INA $DC");
        initMem(0x04dc, { 0xDC,0xDD,0xDE });
        lines = disassembler_.disassembleForward(0x04dc, memory_, 1);
        verifyLine(lines[0], 0x04dc, { 0xDC,0xDD,0xDE }, "CALL C, $DEDD");
        initMem(0x04de, { 0xDE,0xDF });
        lines = disassembler_.disassembleForward(0x04de, memory_, 1);
        verifyLine(lines[0], 0x04de, { 0xDE,0xDF }, "SBC #$DF");
        initMem(0x04df, { 0xDF });
        lines = disassembler_.disassembleForward(0x04df, memory_, 1);
        verifyLine(lines[0], 0x04df, { 0xDF }, "RST 18");
        initMem(0x04e0, { 0xE0 });
        lines = disassembler_.disassembleForward(0x04e0, memory_, 1);
        verifyLine(lines[0], 0x04e0, { 0xE0 }, "RET PO");
        initMem(0x04e1, { 0xE1 });
        lines = disassembler_.disassembleForward(0x04e1, memory_, 1);
        verifyLine(lines[0], 0x04e1, { 0xE1 }, "POP HL");
        initMem(0x04e2, { 0xE2,0xE3,0xE4 });
        lines = disassembler_.disassembleForward(0x04e2, memory_, 1);
        verifyLine(lines[0], 0x04e2, { 0xE2,0xE3,0xE4 }, "JP PO, $E4E3");
        initMem(0x04e3, { 0xE3 });
        lines = disassembler_.disassembleForward(0x04e3, memory_, 1);
        verifyLine(lines[0], 0x04e3, { 0xE3 }, "EX (SP),HL");
        initMem(0x04e4, { 0xE4,0xE5,0xE6 });
        lines = disassembler_.disassembleForward(0x04e4, memory_, 1);
        verifyLine(lines[0], 0x04e4, { 0xE4,0xE5,0xE6 }, "CALL PO, $E6E5");
        initMem(0x04e5, { 0xE5 });
        lines = disassembler_.disassembleForward(0x04e5, memory_, 1);
        verifyLine(lines[0], 0x04e5, { 0xE5 }, "PUSH HL");
        initMem(0x04e6, { 0xE6,0xE7 });
        lines = disassembler_.disassembleForward(0x04e6, memory_, 1);
        verifyLine(lines[0], 0x04e6, { 0xE6,0xE7 }, "AND #$E7");
        initMem(0x04e7, { 0xE7 });
        lines = disassembler_.disassembleForward(0x04e7, memory_, 1);
        verifyLine(lines[0], 0x04e7, { 0xE7 }, "RST 20");
        initMem(0x04e8, { 0xE8 });
        lines = disassembler_.disassembleForward(0x04e8, memory_, 1);
        verifyLine(lines[0], 0x04e8, { 0xE8 }, "RET PE");
        initMem(0x04e9, { 0xE9 });
        lines = disassembler_.disassembleForward(0x04e9, memory_, 1);
        verifyLine(lines[0], 0x04e9, { 0xE9 }, "JP (HL)");
        initMem(0x04ea, { 0xEA,0xEB,0xEC });
        lines = disassembler_.disassembleForward(0x04ea, memory_, 1);
        verifyLine(lines[0], 0x04ea, { 0xEA,0xEB,0xEC }, "JP PE, $ECEB");
        initMem(0x04eb, { 0xEB });
        lines = disassembler_.disassembleForward(0x04eb, memory_, 1);
        verifyLine(lines[0], 0x04eb, { 0xEB }, "EX DE,HL");
        initMem(0x04ec, { 0xEC,0xED,0xEE });
        lines = disassembler_.disassembleForward(0x04ec, memory_, 1);
        verifyLine(lines[0], 0x04ec, { 0xEC,0xED,0xEE }, "CALL PE, $EEED");
        initMem(0x04ee, { 0xEE,0xEF });
        lines = disassembler_.disassembleForward(0x04ee, memory_, 1);
        verifyLine(lines[0], 0x04ee, { 0xEE,0xEF }, "XOR #$EF");
        initMem(0x04ef, { 0xEF });
        lines = disassembler_.disassembleForward(0x04ef, memory_, 1);
        verifyLine(lines[0], 0x04ef, { 0xEF }, "RST 28");
        initMem(0x04f0, { 0xF0 });
        lines = disassembler_.disassembleForward(0x04f0, memory_, 1);
        verifyLine(lines[0], 0x04f0, { 0xF0 }, "RET P");
        initMem(0x04f1, { 0xF1 });
        lines = disassembler_.disassembleForward(0x04f1, memory_, 1);
        verifyLine(lines[0], 0x04f1, { 0xF1 }, "POP AF");
        initMem(0x04f2, { 0xF2,0xF3,0xF4 });
        lines = disassembler_.disassembleForward(0x04f2, memory_, 1);
        verifyLine(lines[0], 0x04f2, { 0xF2,0xF3,0xF4 }, "JP P, $F4F3");
        initMem(0x04f3, { 0xF3 });
        lines = disassembler_.disassembleForward(0x04f3, memory_, 1);
        verifyLine(lines[0], 0x04f3, { 0xF3 }, "DI");
        initMem(0x04f4, { 0xF4,0xF5,0xF6 });
        lines = disassembler_.disassembleForward(0x04f4, memory_, 1);
        verifyLine(lines[0], 0x04f4, { 0xF4,0xF5,0xF6 }, "CALL P, $F6F5");
        initMem(0x04f5, { 0xF5 });
        lines = disassembler_.disassembleForward(0x04f5, memory_, 1);
        verifyLine(lines[0], 0x04f5, { 0xF5 }, "PUSH AF");
        initMem(0x04f6, { 0xF6,0xF7 });
        lines = disassembler_.disassembleForward(0x04f6, memory_, 1);
        verifyLine(lines[0], 0x04f6, { 0xF6,0xF7 }, "OR #$F7");
        initMem(0x04f7, { 0xF7 });
        lines = disassembler_.disassembleForward(0x04f7, memory_, 1);
        verifyLine(lines[0], 0x04f7, { 0xF7 }, "RST 30");
        initMem(0x04f8, { 0xF8 });
        lines = disassembler_.disassembleForward(0x04f8, memory_, 1);
        verifyLine(lines[0], 0x04f8, { 0xF8 }, "RET M");
        initMem(0x04f9, { 0xF9 });
        lines = disassembler_.disassembleForward(0x04f9, memory_, 1);
        verifyLine(lines[0], 0x04f9, { 0xF9 }, "LD SP,HL");
        initMem(0x04fa, { 0xFA,0xFB,0xFC });
        lines = disassembler_.disassembleForward(0x04fa, memory_, 1);
        verifyLine(lines[0], 0x04fa, { 0xFA,0xFB,0xFC }, "JP M, $FCFB");
        initMem(0x04fb, { 0xFB });
        lines = disassembler_.disassembleForward(0x04fb, memory_, 1);
        verifyLine(lines[0], 0x04fb, { 0xFB }, "EI");
        initMem(0x04fc, { 0xFC,0xFD,0xFE });
        lines = disassembler_.disassembleForward(0x04fc, memory_, 1);
        verifyLine(lines[0], 0x04fc, { 0xFC,0xFD,0xFE }, "CALL M, $FEFD");
        initMem(0x04fe, { 0xFE,0xFF });
        lines = disassembler_.disassembleForward(0x04fe, memory_, 1);
        verifyLine(lines[0], 0x04fe, { 0xFE,0xFF }, "CP #$FF");
        initMem(0x04ff, { 0xFF });
        lines = disassembler_.disassembleForward(0x04ff, memory_, 1);
        verifyLine(lines[0], 0x04ff, { 0xFF }, "RST 38");
    }

    void testDisassembleForward_PrefixCB() {
        initMem(0x0400, { 0xCB,0x00 });
        auto lines = disassembler_.disassembleForward(0x0400, memory_, 1);
        verifyLine(lines[0], 0x0400, { 0xCB,0x00 }, "RLC B");
        initMem(0x0402, { 0xCB,0x01 });
        lines = disassembler_.disassembleForward(0x0402, memory_, 1);
        verifyLine(lines[0], 0x0402, { 0xCB,0x01 }, "RLC C");
        initMem(0x0404, { 0xCB,0x02 });
        lines = disassembler_.disassembleForward(0x0404, memory_, 1);
        verifyLine(lines[0], 0x0404, { 0xCB,0x02 }, "RLC D");
        initMem(0x0406, { 0xCB,0x03 });
        lines = disassembler_.disassembleForward(0x0406, memory_, 1);
        verifyLine(lines[0], 0x0406, { 0xCB,0x03 }, "RLC E");
        initMem(0x0408, { 0xCB,0x04 });
        lines = disassembler_.disassembleForward(0x0408, memory_, 1);
        verifyLine(lines[0], 0x0408, { 0xCB,0x04 }, "RLC H");
        initMem(0x040a, { 0xCB,0x05 });
        lines = disassembler_.disassembleForward(0x040a, memory_, 1);
        verifyLine(lines[0], 0x040a, { 0xCB,0x05 }, "RLC L");
        initMem(0x040c, { 0xCB,0x06 });
        lines = disassembler_.disassembleForward(0x040c, memory_, 1);
        verifyLine(lines[0], 0x040c, { 0xCB,0x06 }, "RLC (HL)");
        initMem(0x040e, { 0xCB,0x07 });
        lines = disassembler_.disassembleForward(0x040e, memory_, 1);
        verifyLine(lines[0], 0x040e, { 0xCB,0x07 }, "RLC A");
        initMem(0x0410, { 0xCB,0x08 });
        lines = disassembler_.disassembleForward(0x0410, memory_, 1);
        verifyLine(lines[0], 0x0410, { 0xCB,0x08 }, "RRC B");
        initMem(0x0412, { 0xCB,0x09 });
        lines = disassembler_.disassembleForward(0x0412, memory_, 1);
        verifyLine(lines[0], 0x0412, { 0xCB,0x09 }, "RRC C");
        initMem(0x0414, { 0xCB,0x0A });
        lines = disassembler_.disassembleForward(0x0414, memory_, 1);
        verifyLine(lines[0], 0x0414, { 0xCB,0x0A }, "RRC D");
        initMem(0x0416, { 0xCB,0x0B });
        lines = disassembler_.disassembleForward(0x0416, memory_, 1);
        verifyLine(lines[0], 0x0416, { 0xCB,0x0B }, "RRC E");
        initMem(0x0418, { 0xCB,0x0C });
        lines = disassembler_.disassembleForward(0x0418, memory_, 1);
        verifyLine(lines[0], 0x0418, { 0xCB,0x0C }, "RRC H");
        initMem(0x041a, { 0xCB,0x0D });
        lines = disassembler_.disassembleForward(0x041a, memory_, 1);
        verifyLine(lines[0], 0x041a, { 0xCB,0x0D }, "RRC L");
        initMem(0x041c, { 0xCB,0x0E });
        lines = disassembler_.disassembleForward(0x041c, memory_, 1);
        verifyLine(lines[0], 0x041c, { 0xCB,0x0E }, "RRC (HL)");
        initMem(0x041e, { 0xCB,0x0F });
        lines = disassembler_.disassembleForward(0x041e, memory_, 1);
        verifyLine(lines[0], 0x041e, { 0xCB,0x0F }, "RRC A");
        initMem(0x0420, { 0xCB,0x10 });
        lines = disassembler_.disassembleForward(0x0420, memory_, 1);
        verifyLine(lines[0], 0x0420, { 0xCB,0x10 }, "RL B");
        initMem(0x0422, { 0xCB,0x11 });
        lines = disassembler_.disassembleForward(0x0422, memory_, 1);
        verifyLine(lines[0], 0x0422, { 0xCB,0x11 }, "RL C");
        initMem(0x0424, { 0xCB,0x12 });
        lines = disassembler_.disassembleForward(0x0424, memory_, 1);
        verifyLine(lines[0], 0x0424, { 0xCB,0x12 }, "RL D");
        initMem(0x0426, { 0xCB,0x13 });
        lines = disassembler_.disassembleForward(0x0426, memory_, 1);
        verifyLine(lines[0], 0x0426, { 0xCB,0x13 }, "RL E");
        initMem(0x0428, { 0xCB,0x14 });
        lines = disassembler_.disassembleForward(0x0428, memory_, 1);
        verifyLine(lines[0], 0x0428, { 0xCB,0x14 }, "RL H");
        initMem(0x042a, { 0xCB,0x15 });
        lines = disassembler_.disassembleForward(0x042a, memory_, 1);
        verifyLine(lines[0], 0x042a, { 0xCB,0x15 }, "RL L");
        initMem(0x042c, { 0xCB,0x16 });
        lines = disassembler_.disassembleForward(0x042c, memory_, 1);
        verifyLine(lines[0], 0x042c, { 0xCB,0x16 }, "RL (HL)");
        initMem(0x042e, { 0xCB,0x17 });
        lines = disassembler_.disassembleForward(0x042e, memory_, 1);
        verifyLine(lines[0], 0x042e, { 0xCB,0x17 }, "RL A");
        initMem(0x0430, { 0xCB,0x18 });
        lines = disassembler_.disassembleForward(0x0430, memory_, 1);
        verifyLine(lines[0], 0x0430, { 0xCB,0x18 }, "RR B");
        initMem(0x0432, { 0xCB,0x19 });
        lines = disassembler_.disassembleForward(0x0432, memory_, 1);
        verifyLine(lines[0], 0x0432, { 0xCB,0x19 }, "RR C");
        initMem(0x0434, { 0xCB,0x1A });
        lines = disassembler_.disassembleForward(0x0434, memory_, 1);
        verifyLine(lines[0], 0x0434, { 0xCB,0x1A }, "RR D");
        initMem(0x0436, { 0xCB,0x1B });
        lines = disassembler_.disassembleForward(0x0436, memory_, 1);
        verifyLine(lines[0], 0x0436, { 0xCB,0x1B }, "RR E");
        initMem(0x0438, { 0xCB,0x1C });
        lines = disassembler_.disassembleForward(0x0438, memory_, 1);
        verifyLine(lines[0], 0x0438, { 0xCB,0x1C }, "RR H");
        initMem(0x043a, { 0xCB,0x1D });
        lines = disassembler_.disassembleForward(0x043a, memory_, 1);
        verifyLine(lines[0], 0x043a, { 0xCB,0x1D }, "RR L");
        initMem(0x043c, { 0xCB,0x1E });
        lines = disassembler_.disassembleForward(0x043c, memory_, 1);
        verifyLine(lines[0], 0x043c, { 0xCB,0x1E }, "RR (HL)");
        initMem(0x043e, { 0xCB,0x1F });
        lines = disassembler_.disassembleForward(0x043e, memory_, 1);
        verifyLine(lines[0], 0x043e, { 0xCB,0x1F }, "RR A");
        initMem(0x0440, { 0xCB,0x20 });
        lines = disassembler_.disassembleForward(0x0440, memory_, 1);
        verifyLine(lines[0], 0x0440, { 0xCB,0x20 }, "SLA B");
        initMem(0x0442, { 0xCB,0x21 });
        lines = disassembler_.disassembleForward(0x0442, memory_, 1);
        verifyLine(lines[0], 0x0442, { 0xCB,0x21 }, "SLA C");
        initMem(0x0444, { 0xCB,0x22 });
        lines = disassembler_.disassembleForward(0x0444, memory_, 1);
        verifyLine(lines[0], 0x0444, { 0xCB,0x22 }, "SLA D");
        initMem(0x0446, { 0xCB,0x23 });
        lines = disassembler_.disassembleForward(0x0446, memory_, 1);
        verifyLine(lines[0], 0x0446, { 0xCB,0x23 }, "SLA E");
        initMem(0x0448, { 0xCB,0x24 });
        lines = disassembler_.disassembleForward(0x0448, memory_, 1);
        verifyLine(lines[0], 0x0448, { 0xCB,0x24 }, "SLA H");
        initMem(0x044a, { 0xCB,0x25 });
        lines = disassembler_.disassembleForward(0x044a, memory_, 1);
        verifyLine(lines[0], 0x044a, { 0xCB,0x25 }, "SLA L");
        initMem(0x044c, { 0xCB,0x26 });
        lines = disassembler_.disassembleForward(0x044c, memory_, 1);
        verifyLine(lines[0], 0x044c, { 0xCB,0x26 }, "SLA (HL)");
        initMem(0x044e, { 0xCB,0x27 });
        lines = disassembler_.disassembleForward(0x044e, memory_, 1);
        verifyLine(lines[0], 0x044e, { 0xCB,0x27 }, "SLA A");
        initMem(0x0450, { 0xCB,0x28 });
        lines = disassembler_.disassembleForward(0x0450, memory_, 1);
        verifyLine(lines[0], 0x0450, { 0xCB,0x28 }, "SRA B");
        initMem(0x0452, { 0xCB,0x29 });
        lines = disassembler_.disassembleForward(0x0452, memory_, 1);
        verifyLine(lines[0], 0x0452, { 0xCB,0x29 }, "SRA C");
        initMem(0x0454, { 0xCB,0x2A });
        lines = disassembler_.disassembleForward(0x0454, memory_, 1);
        verifyLine(lines[0], 0x0454, { 0xCB,0x2A }, "SRA D");
        initMem(0x0456, { 0xCB,0x2B });
        lines = disassembler_.disassembleForward(0x0456, memory_, 1);
        verifyLine(lines[0], 0x0456, { 0xCB,0x2B }, "SRA E");
        initMem(0x0458, { 0xCB,0x2C });
        lines = disassembler_.disassembleForward(0x0458, memory_, 1);
        verifyLine(lines[0], 0x0458, { 0xCB,0x2C }, "SRA H");
        initMem(0x045a, { 0xCB,0x2D });
        lines = disassembler_.disassembleForward(0x045a, memory_, 1);
        verifyLine(lines[0], 0x045a, { 0xCB,0x2D }, "SRA L");
        initMem(0x045c, { 0xCB,0x2E });
        lines = disassembler_.disassembleForward(0x045c, memory_, 1);
        verifyLine(lines[0], 0x045c, { 0xCB,0x2E }, "SRA (HL)");
        initMem(0x045e, { 0xCB,0x2F });
        lines = disassembler_.disassembleForward(0x045e, memory_, 1);
        verifyLine(lines[0], 0x045e, { 0xCB,0x2F }, "SRA A");
        initMem(0x0460, { 0xCB,0x30 });
        lines = disassembler_.disassembleForward(0x0460, memory_, 1);
        verifyLine(lines[0], 0x0460, { 0xCB,0x30 }, "*SLL B");
        initMem(0x0462, { 0xCB,0x31 });
        lines = disassembler_.disassembleForward(0x0462, memory_, 1);
        verifyLine(lines[0], 0x0462, { 0xCB,0x31 }, "*SLL C");
        initMem(0x0464, { 0xCB,0x32 });
        lines = disassembler_.disassembleForward(0x0464, memory_, 1);
        verifyLine(lines[0], 0x0464, { 0xCB,0x32 }, "*SLL D");
        initMem(0x0466, { 0xCB,0x33 });
        lines = disassembler_.disassembleForward(0x0466, memory_, 1);
        verifyLine(lines[0], 0x0466, { 0xCB,0x33 }, "*SLL E");
        initMem(0x0468, { 0xCB,0x34 });
        lines = disassembler_.disassembleForward(0x0468, memory_, 1);
        verifyLine(lines[0], 0x0468, { 0xCB,0x34 }, "*SLL H");
        initMem(0x046a, { 0xCB,0x35 });
        lines = disassembler_.disassembleForward(0x046a, memory_, 1);
        verifyLine(lines[0], 0x046a, { 0xCB,0x35 }, "*SLL L");
        initMem(0x046c, { 0xCB,0x36 });
        lines = disassembler_.disassembleForward(0x046c, memory_, 1);
        verifyLine(lines[0], 0x046c, { 0xCB,0x36 }, "*SLL (HL)");
        initMem(0x046e, { 0xCB,0x37 });
        lines = disassembler_.disassembleForward(0x046e, memory_, 1);
        verifyLine(lines[0], 0x046e, { 0xCB,0x37 }, "*SLL A");
        initMem(0x0470, { 0xCB,0x38 });
        lines = disassembler_.disassembleForward(0x0470, memory_, 1);
        verifyLine(lines[0], 0x0470, { 0xCB,0x38 }, "SRL B");
        initMem(0x0472, { 0xCB,0x39 });
        lines = disassembler_.disassembleForward(0x0472, memory_, 1);
        verifyLine(lines[0], 0x0472, { 0xCB,0x39 }, "SRL C");
        initMem(0x0474, { 0xCB,0x3A });
        lines = disassembler_.disassembleForward(0x0474, memory_, 1);
        verifyLine(lines[0], 0x0474, { 0xCB,0x3A }, "SRL D");
        initMem(0x0476, { 0xCB,0x3B });
        lines = disassembler_.disassembleForward(0x0476, memory_, 1);
        verifyLine(lines[0], 0x0476, { 0xCB,0x3B }, "SRL E");
        initMem(0x0478, { 0xCB,0x3C });
        lines = disassembler_.disassembleForward(0x0478, memory_, 1);
        verifyLine(lines[0], 0x0478, { 0xCB,0x3C }, "SRL H");
        initMem(0x047a, { 0xCB,0x3D });
        lines = disassembler_.disassembleForward(0x047a, memory_, 1);
        verifyLine(lines[0], 0x047a, { 0xCB,0x3D }, "SRL L");
        initMem(0x047c, { 0xCB,0x3E });
        lines = disassembler_.disassembleForward(0x047c, memory_, 1);
        verifyLine(lines[0], 0x047c, { 0xCB,0x3E }, "SRL (HL)");
        initMem(0x047e, { 0xCB,0x3F });
        lines = disassembler_.disassembleForward(0x047e, memory_, 1);
        verifyLine(lines[0], 0x047e, { 0xCB,0x3F }, "SRL A");
        initMem(0x0480, { 0xCB,0x40 });
        lines = disassembler_.disassembleForward(0x0480, memory_, 1);
        verifyLine(lines[0], 0x0480, { 0xCB,0x40 }, "BIT 0, B");
        initMem(0x0482, { 0xCB,0x41 });
        lines = disassembler_.disassembleForward(0x0482, memory_, 1);
        verifyLine(lines[0], 0x0482, { 0xCB,0x41 }, "BIT 0, C");
        initMem(0x0484, { 0xCB,0x42 });
        lines = disassembler_.disassembleForward(0x0484, memory_, 1);
        verifyLine(lines[0], 0x0484, { 0xCB,0x42 }, "BIT 0, D");
        initMem(0x0486, { 0xCB,0x43 });
        lines = disassembler_.disassembleForward(0x0486, memory_, 1);
        verifyLine(lines[0], 0x0486, { 0xCB,0x43 }, "BIT 0, E");
        initMem(0x0488, { 0xCB,0x44 });
        lines = disassembler_.disassembleForward(0x0488, memory_, 1);
        verifyLine(lines[0], 0x0488, { 0xCB,0x44 }, "BIT 0, H");
        initMem(0x048a, { 0xCB,0x45 });
        lines = disassembler_.disassembleForward(0x048a, memory_, 1);
        verifyLine(lines[0], 0x048a, { 0xCB,0x45 }, "BIT 0, L");
        initMem(0x048c, { 0xCB,0x46 });
        lines = disassembler_.disassembleForward(0x048c, memory_, 1);
        verifyLine(lines[0], 0x048c, { 0xCB,0x46 }, "BIT 0, (HL)");
        initMem(0x048e, { 0xCB,0x47 });
        lines = disassembler_.disassembleForward(0x048e, memory_, 1);
        verifyLine(lines[0], 0x048e, { 0xCB,0x47 }, "BIT 0, A");
        initMem(0x0490, { 0xCB,0x48 });
        lines = disassembler_.disassembleForward(0x0490, memory_, 1);
        verifyLine(lines[0], 0x0490, { 0xCB,0x48 }, "BIT 1, B");
        initMem(0x0492, { 0xCB,0x49 });
        lines = disassembler_.disassembleForward(0x0492, memory_, 1);
        verifyLine(lines[0], 0x0492, { 0xCB,0x49 }, "BIT 1, C");
        initMem(0x0494, { 0xCB,0x4A });
        lines = disassembler_.disassembleForward(0x0494, memory_, 1);
        verifyLine(lines[0], 0x0494, { 0xCB,0x4A }, "BIT 1, D");
        initMem(0x0496, { 0xCB,0x4B });
        lines = disassembler_.disassembleForward(0x0496, memory_, 1);
        verifyLine(lines[0], 0x0496, { 0xCB,0x4B }, "BIT 1, E");
        initMem(0x0498, { 0xCB,0x4C });
        lines = disassembler_.disassembleForward(0x0498, memory_, 1);
        verifyLine(lines[0], 0x0498, { 0xCB,0x4C }, "BIT 1, H");
        initMem(0x049a, { 0xCB,0x4D });
        lines = disassembler_.disassembleForward(0x049a, memory_, 1);
        verifyLine(lines[0], 0x049a, { 0xCB,0x4D }, "BIT 1, L");
        initMem(0x049c, { 0xCB,0x4E });
        lines = disassembler_.disassembleForward(0x049c, memory_, 1);
        verifyLine(lines[0], 0x049c, { 0xCB,0x4E }, "BIT 1, (HL)");
        initMem(0x049e, { 0xCB,0x4F });
        lines = disassembler_.disassembleForward(0x049e, memory_, 1);
        verifyLine(lines[0], 0x049e, { 0xCB,0x4F }, "BIT 1, A");
        initMem(0x04a0, { 0xCB,0x50 });
        lines = disassembler_.disassembleForward(0x04a0, memory_, 1);
        verifyLine(lines[0], 0x04a0, { 0xCB,0x50 }, "BIT 2, B");
        initMem(0x04a2, { 0xCB,0x51 });
        lines = disassembler_.disassembleForward(0x04a2, memory_, 1);
        verifyLine(lines[0], 0x04a2, { 0xCB,0x51 }, "BIT 2, C");
        initMem(0x04a4, { 0xCB,0x52 });
        lines = disassembler_.disassembleForward(0x04a4, memory_, 1);
        verifyLine(lines[0], 0x04a4, { 0xCB,0x52 }, "BIT 2, D");
        initMem(0x04a6, { 0xCB,0x53 });
        lines = disassembler_.disassembleForward(0x04a6, memory_, 1);
        verifyLine(lines[0], 0x04a6, { 0xCB,0x53 }, "BIT 2, E");
        initMem(0x04a8, { 0xCB,0x54 });
        lines = disassembler_.disassembleForward(0x04a8, memory_, 1);
        verifyLine(lines[0], 0x04a8, { 0xCB,0x54 }, "BIT 2, H");
        initMem(0x04aa, { 0xCB,0x55 });
        lines = disassembler_.disassembleForward(0x04aa, memory_, 1);
        verifyLine(lines[0], 0x04aa, { 0xCB,0x55 }, "BIT 2, L");
        initMem(0x04ac, { 0xCB,0x56 });
        lines = disassembler_.disassembleForward(0x04ac, memory_, 1);
        verifyLine(lines[0], 0x04ac, { 0xCB,0x56 }, "BIT 2, (HL)");
        initMem(0x04ae, { 0xCB,0x57 });
        lines = disassembler_.disassembleForward(0x04ae, memory_, 1);
        verifyLine(lines[0], 0x04ae, { 0xCB,0x57 }, "BIT 2, A");
        initMem(0x04b0, { 0xCB,0x58 });
        lines = disassembler_.disassembleForward(0x04b0, memory_, 1);
        verifyLine(lines[0], 0x04b0, { 0xCB,0x58 }, "BIT 3, B");
        initMem(0x04b2, { 0xCB,0x59 });
        lines = disassembler_.disassembleForward(0x04b2, memory_, 1);
        verifyLine(lines[0], 0x04b2, { 0xCB,0x59 }, "BIT 3, C");
        initMem(0x04b4, { 0xCB,0x5A });
        lines = disassembler_.disassembleForward(0x04b4, memory_, 1);
        verifyLine(lines[0], 0x04b4, { 0xCB,0x5A }, "BIT 3, D");
        initMem(0x04b6, { 0xCB,0x5B });
        lines = disassembler_.disassembleForward(0x04b6, memory_, 1);
        verifyLine(lines[0], 0x04b6, { 0xCB,0x5B }, "BIT 3, E");
        initMem(0x04b8, { 0xCB,0x5C });
        lines = disassembler_.disassembleForward(0x04b8, memory_, 1);
        verifyLine(lines[0], 0x04b8, { 0xCB,0x5C }, "BIT 3, H");
        initMem(0x04ba, { 0xCB,0x5D });
        lines = disassembler_.disassembleForward(0x04ba, memory_, 1);
        verifyLine(lines[0], 0x04ba, { 0xCB,0x5D }, "BIT 3, L");
        initMem(0x04bc, { 0xCB,0x5E });
        lines = disassembler_.disassembleForward(0x04bc, memory_, 1);
        verifyLine(lines[0], 0x04bc, { 0xCB,0x5E }, "BIT 3, (HL)");
        initMem(0x04be, { 0xCB,0x5F });
        lines = disassembler_.disassembleForward(0x04be, memory_, 1);
        verifyLine(lines[0], 0x04be, { 0xCB,0x5F }, "BIT 3, A");
        initMem(0x04c0, { 0xCB,0x60 });
        lines = disassembler_.disassembleForward(0x04c0, memory_, 1);
        verifyLine(lines[0], 0x04c0, { 0xCB,0x60 }, "BIT 4, B");
        initMem(0x04c2, { 0xCB,0x61 });
        lines = disassembler_.disassembleForward(0x04c2, memory_, 1);
        verifyLine(lines[0], 0x04c2, { 0xCB,0x61 }, "BIT 4, C");
        initMem(0x04c4, { 0xCB,0x62 });
        lines = disassembler_.disassembleForward(0x04c4, memory_, 1);
        verifyLine(lines[0], 0x04c4, { 0xCB,0x62 }, "BIT 4, D");
        initMem(0x04c6, { 0xCB,0x63 });
        lines = disassembler_.disassembleForward(0x04c6, memory_, 1);
        verifyLine(lines[0], 0x04c6, { 0xCB,0x63 }, "BIT 4, E");
        initMem(0x04c8, { 0xCB,0x64 });
        lines = disassembler_.disassembleForward(0x04c8, memory_, 1);
        verifyLine(lines[0], 0x04c8, { 0xCB,0x64 }, "BIT 4, H");
        initMem(0x04ca, { 0xCB,0x65 });
        lines = disassembler_.disassembleForward(0x04ca, memory_, 1);
        verifyLine(lines[0], 0x04ca, { 0xCB,0x65 }, "BIT 4, L");
        initMem(0x04cc, { 0xCB,0x66 });
        lines = disassembler_.disassembleForward(0x04cc, memory_, 1);
        verifyLine(lines[0], 0x04cc, { 0xCB,0x66 }, "BIT 4, (HL)");
        initMem(0x04ce, { 0xCB,0x67 });
        lines = disassembler_.disassembleForward(0x04ce, memory_, 1);
        verifyLine(lines[0], 0x04ce, { 0xCB,0x67 }, "BIT 4, A");
        initMem(0x04d0, { 0xCB,0x68 });
        lines = disassembler_.disassembleForward(0x04d0, memory_, 1);
        verifyLine(lines[0], 0x04d0, { 0xCB,0x68 }, "BIT 5, B");
        initMem(0x04d2, { 0xCB,0x69 });
        lines = disassembler_.disassembleForward(0x04d2, memory_, 1);
        verifyLine(lines[0], 0x04d2, { 0xCB,0x69 }, "BIT 5, C");
        initMem(0x04d4, { 0xCB,0x6A });
        lines = disassembler_.disassembleForward(0x04d4, memory_, 1);
        verifyLine(lines[0], 0x04d4, { 0xCB,0x6A }, "BIT 5, D");
        initMem(0x04d6, { 0xCB,0x6B });
        lines = disassembler_.disassembleForward(0x04d6, memory_, 1);
        verifyLine(lines[0], 0x04d6, { 0xCB,0x6B }, "BIT 5, E");
        initMem(0x04d8, { 0xCB,0x6C });
        lines = disassembler_.disassembleForward(0x04d8, memory_, 1);
        verifyLine(lines[0], 0x04d8, { 0xCB,0x6C }, "BIT 5, H");
        initMem(0x04da, { 0xCB,0x6D });
        lines = disassembler_.disassembleForward(0x04da, memory_, 1);
        verifyLine(lines[0], 0x04da, { 0xCB,0x6D }, "BIT 5, L");
        initMem(0x04dc, { 0xCB,0x6E });
        lines = disassembler_.disassembleForward(0x04dc, memory_, 1);
        verifyLine(lines[0], 0x04dc, { 0xCB,0x6E }, "BIT 5, (HL)");
        initMem(0x04de, { 0xCB,0x6F });
        lines = disassembler_.disassembleForward(0x04de, memory_, 1);
        verifyLine(lines[0], 0x04de, { 0xCB,0x6F }, "BIT 5, A");
        initMem(0x04e0, { 0xCB,0x70 });
        lines = disassembler_.disassembleForward(0x04e0, memory_, 1);
        verifyLine(lines[0], 0x04e0, { 0xCB,0x70 }, "BIT 6, B");
        initMem(0x04e2, { 0xCB,0x71 });
        lines = disassembler_.disassembleForward(0x04e2, memory_, 1);
        verifyLine(lines[0], 0x04e2, { 0xCB,0x71 }, "BIT 6, C");
        initMem(0x04e4, { 0xCB,0x72 });
        lines = disassembler_.disassembleForward(0x04e4, memory_, 1);
        verifyLine(lines[0], 0x04e4, { 0xCB,0x72 }, "BIT 6, D");
        initMem(0x04e6, { 0xCB,0x73 });
        lines = disassembler_.disassembleForward(0x04e6, memory_, 1);
        verifyLine(lines[0], 0x04e6, { 0xCB,0x73 }, "BIT 6, E");
        initMem(0x04e8, { 0xCB,0x74 });
        lines = disassembler_.disassembleForward(0x04e8, memory_, 1);
        verifyLine(lines[0], 0x04e8, { 0xCB,0x74 }, "BIT 6, H");
        initMem(0x04ea, { 0xCB,0x75 });
        lines = disassembler_.disassembleForward(0x04ea, memory_, 1);
        verifyLine(lines[0], 0x04ea, { 0xCB,0x75 }, "BIT 6, L");
        initMem(0x04ec, { 0xCB,0x76 });
        lines = disassembler_.disassembleForward(0x04ec, memory_, 1);
        verifyLine(lines[0], 0x04ec, { 0xCB,0x76 }, "BIT 6, (HL)");
        initMem(0x04ee, { 0xCB,0x77 });
        lines = disassembler_.disassembleForward(0x04ee, memory_, 1);
        verifyLine(lines[0], 0x04ee, { 0xCB,0x77 }, "BIT 6, A");
        initMem(0x04f0, { 0xCB,0x78 });
        lines = disassembler_.disassembleForward(0x04f0, memory_, 1);
        verifyLine(lines[0], 0x04f0, { 0xCB,0x78 }, "BIT 7, B");
        initMem(0x04f2, { 0xCB,0x79 });
        lines = disassembler_.disassembleForward(0x04f2, memory_, 1);
        verifyLine(lines[0], 0x04f2, { 0xCB,0x79 }, "BIT 7, C");
        initMem(0x04f4, { 0xCB,0x7A });
        lines = disassembler_.disassembleForward(0x04f4, memory_, 1);
        verifyLine(lines[0], 0x04f4, { 0xCB,0x7A }, "BIT 7, D");
        initMem(0x04f6, { 0xCB,0x7B });
        lines = disassembler_.disassembleForward(0x04f6, memory_, 1);
        verifyLine(lines[0], 0x04f6, { 0xCB,0x7B }, "BIT 7, E");
        initMem(0x04f8, { 0xCB,0x7C });
        lines = disassembler_.disassembleForward(0x04f8, memory_, 1);
        verifyLine(lines[0], 0x04f8, { 0xCB,0x7C }, "BIT 7, H");
        initMem(0x04fa, { 0xCB,0x7D });
        lines = disassembler_.disassembleForward(0x04fa, memory_, 1);
        verifyLine(lines[0], 0x04fa, { 0xCB,0x7D }, "BIT 7, L");
        initMem(0x04fc, { 0xCB,0x7E });
        lines = disassembler_.disassembleForward(0x04fc, memory_, 1);
        verifyLine(lines[0], 0x04fc, { 0xCB,0x7E }, "BIT 7, (HL)");
        initMem(0x04fe, { 0xCB,0x7F });
        lines = disassembler_.disassembleForward(0x04fe, memory_, 1);
        verifyLine(lines[0], 0x04fe, { 0xCB,0x7F }, "BIT 7, A");
        initMem(0x0500, { 0xCB,0x80 });
        lines = disassembler_.disassembleForward(0x0500, memory_, 1);
        verifyLine(lines[0], 0x0500, { 0xCB,0x80 }, "RES 0, B");
        initMem(0x0502, { 0xCB,0x81 });
        lines = disassembler_.disassembleForward(0x0502, memory_, 1);
        verifyLine(lines[0], 0x0502, { 0xCB,0x81 }, "RES 0, C");
        initMem(0x0504, { 0xCB,0x82 });
        lines = disassembler_.disassembleForward(0x0504, memory_, 1);
        verifyLine(lines[0], 0x0504, { 0xCB,0x82 }, "RES 0, D");
        initMem(0x0506, { 0xCB,0x83 });
        lines = disassembler_.disassembleForward(0x0506, memory_, 1);
        verifyLine(lines[0], 0x0506, { 0xCB,0x83 }, "RES 0, E");
        initMem(0x0508, { 0xCB,0x84 });
        lines = disassembler_.disassembleForward(0x0508, memory_, 1);
        verifyLine(lines[0], 0x0508, { 0xCB,0x84 }, "RES 0, H");
        initMem(0x050a, { 0xCB,0x85 });
        lines = disassembler_.disassembleForward(0x050a, memory_, 1);
        verifyLine(lines[0], 0x050a, { 0xCB,0x85 }, "RES 0, L");
        initMem(0x050c, { 0xCB,0x86 });
        lines = disassembler_.disassembleForward(0x050c, memory_, 1);
        verifyLine(lines[0], 0x050c, { 0xCB,0x86 }, "RES 0, (HL)");
        initMem(0x050e, { 0xCB,0x87 });
        lines = disassembler_.disassembleForward(0x050e, memory_, 1);
        verifyLine(lines[0], 0x050e, { 0xCB,0x87 }, "RES 0, A");
        initMem(0x0510, { 0xCB,0x88 });
        lines = disassembler_.disassembleForward(0x0510, memory_, 1);
        verifyLine(lines[0], 0x0510, { 0xCB,0x88 }, "RES 1, B");
        initMem(0x0512, { 0xCB,0x89 });
        lines = disassembler_.disassembleForward(0x0512, memory_, 1);
        verifyLine(lines[0], 0x0512, { 0xCB,0x89 }, "RES 1, C");
        initMem(0x0514, { 0xCB,0x8A });
        lines = disassembler_.disassembleForward(0x0514, memory_, 1);
        verifyLine(lines[0], 0x0514, { 0xCB,0x8A }, "RES 1, D");
        initMem(0x0516, { 0xCB,0x8B });
        lines = disassembler_.disassembleForward(0x0516, memory_, 1);
        verifyLine(lines[0], 0x0516, { 0xCB,0x8B }, "RES 1, E");
        initMem(0x0518, { 0xCB,0x8C });
        lines = disassembler_.disassembleForward(0x0518, memory_, 1);
        verifyLine(lines[0], 0x0518, { 0xCB,0x8C }, "RES 1, H");
        initMem(0x051a, { 0xCB,0x8D });
        lines = disassembler_.disassembleForward(0x051a, memory_, 1);
        verifyLine(lines[0], 0x051a, { 0xCB,0x8D }, "RES 1, L");
        initMem(0x051c, { 0xCB,0x8E });
        lines = disassembler_.disassembleForward(0x051c, memory_, 1);
        verifyLine(lines[0], 0x051c, { 0xCB,0x8E }, "RES 1, (HL)");
        initMem(0x051e, { 0xCB,0x8F });
        lines = disassembler_.disassembleForward(0x051e, memory_, 1);
        verifyLine(lines[0], 0x051e, { 0xCB,0x8F }, "RES 1, A");
        initMem(0x0520, { 0xCB,0x90 });
        lines = disassembler_.disassembleForward(0x0520, memory_, 1);
        verifyLine(lines[0], 0x0520, { 0xCB,0x90 }, "RES 2, B");
        initMem(0x0522, { 0xCB,0x91 });
        lines = disassembler_.disassembleForward(0x0522, memory_, 1);
        verifyLine(lines[0], 0x0522, { 0xCB,0x91 }, "RES 2, C");
        initMem(0x0524, { 0xCB,0x92 });
        lines = disassembler_.disassembleForward(0x0524, memory_, 1);
        verifyLine(lines[0], 0x0524, { 0xCB,0x92 }, "RES 2, D");
        initMem(0x0526, { 0xCB,0x93 });
        lines = disassembler_.disassembleForward(0x0526, memory_, 1);
        verifyLine(lines[0], 0x0526, { 0xCB,0x93 }, "RES 2, E");
        initMem(0x0528, { 0xCB,0x94 });
        lines = disassembler_.disassembleForward(0x0528, memory_, 1);
        verifyLine(lines[0], 0x0528, { 0xCB,0x94 }, "RES 2, H");
        initMem(0x052a, { 0xCB,0x95 });
        lines = disassembler_.disassembleForward(0x052a, memory_, 1);
        verifyLine(lines[0], 0x052a, { 0xCB,0x95 }, "RES 2, L");
        initMem(0x052c, { 0xCB,0x96 });
        lines = disassembler_.disassembleForward(0x052c, memory_, 1);
        verifyLine(lines[0], 0x052c, { 0xCB,0x96 }, "RES 2, (HL)");
        initMem(0x052e, { 0xCB,0x97 });
        lines = disassembler_.disassembleForward(0x052e, memory_, 1);
        verifyLine(lines[0], 0x052e, { 0xCB,0x97 }, "RES 2, A");
        initMem(0x0530, { 0xCB,0x98 });
        lines = disassembler_.disassembleForward(0x0530, memory_, 1);
        verifyLine(lines[0], 0x0530, { 0xCB,0x98 }, "RES 3, B");
        initMem(0x0532, { 0xCB,0x99 });
        lines = disassembler_.disassembleForward(0x0532, memory_, 1);
        verifyLine(lines[0], 0x0532, { 0xCB,0x99 }, "RES 3, C");
        initMem(0x0534, { 0xCB,0x9A });
        lines = disassembler_.disassembleForward(0x0534, memory_, 1);
        verifyLine(lines[0], 0x0534, { 0xCB,0x9A }, "RES 3, D");
        initMem(0x0536, { 0xCB,0x9B });
        lines = disassembler_.disassembleForward(0x0536, memory_, 1);
        verifyLine(lines[0], 0x0536, { 0xCB,0x9B }, "RES 3, E");
        initMem(0x0538, { 0xCB,0x9C });
        lines = disassembler_.disassembleForward(0x0538, memory_, 1);
        verifyLine(lines[0], 0x0538, { 0xCB,0x9C }, "RES 3, H");
        initMem(0x053a, { 0xCB,0x9D });
        lines = disassembler_.disassembleForward(0x053a, memory_, 1);
        verifyLine(lines[0], 0x053a, { 0xCB,0x9D }, "RES 3, L");
        initMem(0x053c, { 0xCB,0x9E });
        lines = disassembler_.disassembleForward(0x053c, memory_, 1);
        verifyLine(lines[0], 0x053c, { 0xCB,0x9E }, "RES 3, (HL)");
        initMem(0x053e, { 0xCB,0x9F });
        lines = disassembler_.disassembleForward(0x053e, memory_, 1);
        verifyLine(lines[0], 0x053e, { 0xCB,0x9F }, "RES 3, A");
        initMem(0x0540, { 0xCB,0xA0 });
        lines = disassembler_.disassembleForward(0x0540, memory_, 1);
        verifyLine(lines[0], 0x0540, { 0xCB,0xA0 }, "RES 4, B");
        initMem(0x0542, { 0xCB,0xA1 });
        lines = disassembler_.disassembleForward(0x0542, memory_, 1);
        verifyLine(lines[0], 0x0542, { 0xCB,0xA1 }, "RES 4, C");
        initMem(0x0544, { 0xCB,0xA2 });
        lines = disassembler_.disassembleForward(0x0544, memory_, 1);
        verifyLine(lines[0], 0x0544, { 0xCB,0xA2 }, "RES 4, D");
        initMem(0x0546, { 0xCB,0xA3 });
        lines = disassembler_.disassembleForward(0x0546, memory_, 1);
        verifyLine(lines[0], 0x0546, { 0xCB,0xA3 }, "RES 4, E");
        initMem(0x0548, { 0xCB,0xA4 });
        lines = disassembler_.disassembleForward(0x0548, memory_, 1);
        verifyLine(lines[0], 0x0548, { 0xCB,0xA4 }, "RES 4, H");
        initMem(0x054a, { 0xCB,0xA5 });
        lines = disassembler_.disassembleForward(0x054a, memory_, 1);
        verifyLine(lines[0], 0x054a, { 0xCB,0xA5 }, "RES 4, L");
        initMem(0x054c, { 0xCB,0xA6 });
        lines = disassembler_.disassembleForward(0x054c, memory_, 1);
        verifyLine(lines[0], 0x054c, { 0xCB,0xA6 }, "RES 4, (HL)");
        initMem(0x054e, { 0xCB,0xA7 });
        lines = disassembler_.disassembleForward(0x054e, memory_, 1);
        verifyLine(lines[0], 0x054e, { 0xCB,0xA7 }, "RES 4, A");
        initMem(0x0550, { 0xCB,0xA8 });
        lines = disassembler_.disassembleForward(0x0550, memory_, 1);
        verifyLine(lines[0], 0x0550, { 0xCB,0xA8 }, "RES 5, B");
        initMem(0x0552, { 0xCB,0xA9 });
        lines = disassembler_.disassembleForward(0x0552, memory_, 1);
        verifyLine(lines[0], 0x0552, { 0xCB,0xA9 }, "RES 5, C");
        initMem(0x0554, { 0xCB,0xAA });
        lines = disassembler_.disassembleForward(0x0554, memory_, 1);
        verifyLine(lines[0], 0x0554, { 0xCB,0xAA }, "RES 5, D");
        initMem(0x0556, { 0xCB,0xAB });
        lines = disassembler_.disassembleForward(0x0556, memory_, 1);
        verifyLine(lines[0], 0x0556, { 0xCB,0xAB }, "RES 5, E");
        initMem(0x0558, { 0xCB,0xAC });
        lines = disassembler_.disassembleForward(0x0558, memory_, 1);
        verifyLine(lines[0], 0x0558, { 0xCB,0xAC }, "RES 5, H");
        initMem(0x055a, { 0xCB,0xAD });
        lines = disassembler_.disassembleForward(0x055a, memory_, 1);
        verifyLine(lines[0], 0x055a, { 0xCB,0xAD }, "RES 5, L");
        initMem(0x055c, { 0xCB,0xAE });
        lines = disassembler_.disassembleForward(0x055c, memory_, 1);
        verifyLine(lines[0], 0x055c, { 0xCB,0xAE }, "RES 5, (HL)");
        initMem(0x055e, { 0xCB,0xAF });
        lines = disassembler_.disassembleForward(0x055e, memory_, 1);
        verifyLine(lines[0], 0x055e, { 0xCB,0xAF }, "RES 5, A");
        initMem(0x0560, { 0xCB,0xB0 });
        lines = disassembler_.disassembleForward(0x0560, memory_, 1);
        verifyLine(lines[0], 0x0560, { 0xCB,0xB0 }, "RES 6, B");
        initMem(0x0562, { 0xCB,0xB1 });
        lines = disassembler_.disassembleForward(0x0562, memory_, 1);
        verifyLine(lines[0], 0x0562, { 0xCB,0xB1 }, "RES 6, C");
        initMem(0x0564, { 0xCB,0xB2 });
        lines = disassembler_.disassembleForward(0x0564, memory_, 1);
        verifyLine(lines[0], 0x0564, { 0xCB,0xB2 }, "RES 6, D");
        initMem(0x0566, { 0xCB,0xB3 });
        lines = disassembler_.disassembleForward(0x0566, memory_, 1);
        verifyLine(lines[0], 0x0566, { 0xCB,0xB3 }, "RES 6, E");
        initMem(0x0568, { 0xCB,0xB4 });
        lines = disassembler_.disassembleForward(0x0568, memory_, 1);
        verifyLine(lines[0], 0x0568, { 0xCB,0xB4 }, "RES 6, H");
        initMem(0x056a, { 0xCB,0xB5 });
        lines = disassembler_.disassembleForward(0x056a, memory_, 1);
        verifyLine(lines[0], 0x056a, { 0xCB,0xB5 }, "RES 6, L");
        initMem(0x056c, { 0xCB,0xB6 });
        lines = disassembler_.disassembleForward(0x056c, memory_, 1);
        verifyLine(lines[0], 0x056c, { 0xCB,0xB6 }, "RES 6, (HL)");
        initMem(0x056e, { 0xCB,0xB7 });
        lines = disassembler_.disassembleForward(0x056e, memory_, 1);
        verifyLine(lines[0], 0x056e, { 0xCB,0xB7 }, "RES 6, A");
        initMem(0x0570, { 0xCB,0xB8 });
        lines = disassembler_.disassembleForward(0x0570, memory_, 1);
        verifyLine(lines[0], 0x0570, { 0xCB,0xB8 }, "RES 7, B");
        initMem(0x0572, { 0xCB,0xB9 });
        lines = disassembler_.disassembleForward(0x0572, memory_, 1);
        verifyLine(lines[0], 0x0572, { 0xCB,0xB9 }, "RES 7, C");
        initMem(0x0574, { 0xCB,0xBA });
        lines = disassembler_.disassembleForward(0x0574, memory_, 1);
        verifyLine(lines[0], 0x0574, { 0xCB,0xBA }, "RES 7, D");
        initMem(0x0576, { 0xCB,0xBB });
        lines = disassembler_.disassembleForward(0x0576, memory_, 1);
        verifyLine(lines[0], 0x0576, { 0xCB,0xBB }, "RES 7, E");
        initMem(0x0578, { 0xCB,0xBC });
        lines = disassembler_.disassembleForward(0x0578, memory_, 1);
        verifyLine(lines[0], 0x0578, { 0xCB,0xBC }, "RES 7, H");
        initMem(0x057a, { 0xCB,0xBD });
        lines = disassembler_.disassembleForward(0x057a, memory_, 1);
        verifyLine(lines[0], 0x057a, { 0xCB,0xBD }, "RES 7, L");
        initMem(0x057c, { 0xCB,0xBE });
        lines = disassembler_.disassembleForward(0x057c, memory_, 1);
        verifyLine(lines[0], 0x057c, { 0xCB,0xBE }, "RES 7, (HL)");
        initMem(0x057e, { 0xCB,0xBF });
        lines = disassembler_.disassembleForward(0x057e, memory_, 1);
        verifyLine(lines[0], 0x057e, { 0xCB,0xBF }, "RES 7, A");
        initMem(0x0580, { 0xCB,0xC0 });
        lines = disassembler_.disassembleForward(0x0580, memory_, 1);
        verifyLine(lines[0], 0x0580, { 0xCB,0xC0 }, "SET 0, B");
        initMem(0x0582, { 0xCB,0xC1 });
        lines = disassembler_.disassembleForward(0x0582, memory_, 1);
        verifyLine(lines[0], 0x0582, { 0xCB,0xC1 }, "SET 0, C");
        initMem(0x0584, { 0xCB,0xC2 });
        lines = disassembler_.disassembleForward(0x0584, memory_, 1);
        verifyLine(lines[0], 0x0584, { 0xCB,0xC2 }, "SET 0, D");
        initMem(0x0586, { 0xCB,0xC3 });
        lines = disassembler_.disassembleForward(0x0586, memory_, 1);
        verifyLine(lines[0], 0x0586, { 0xCB,0xC3 }, "SET 0, E");
        initMem(0x0588, { 0xCB,0xC4 });
        lines = disassembler_.disassembleForward(0x0588, memory_, 1);
        verifyLine(lines[0], 0x0588, { 0xCB,0xC4 }, "SET 0, H");
        initMem(0x058a, { 0xCB,0xC5 });
        lines = disassembler_.disassembleForward(0x058a, memory_, 1);
        verifyLine(lines[0], 0x058a, { 0xCB,0xC5 }, "SET 0, L");
        initMem(0x058c, { 0xCB,0xC6 });
        lines = disassembler_.disassembleForward(0x058c, memory_, 1);
        verifyLine(lines[0], 0x058c, { 0xCB,0xC6 }, "SET 0, (HL)");
        initMem(0x058e, { 0xCB,0xC7 });
        lines = disassembler_.disassembleForward(0x058e, memory_, 1);
        verifyLine(lines[0], 0x058e, { 0xCB,0xC7 }, "SET 0, A");
        initMem(0x0590, { 0xCB,0xC8 });
        lines = disassembler_.disassembleForward(0x0590, memory_, 1);
        verifyLine(lines[0], 0x0590, { 0xCB,0xC8 }, "SET 1, B");
        initMem(0x0592, { 0xCB,0xC9 });
        lines = disassembler_.disassembleForward(0x0592, memory_, 1);
        verifyLine(lines[0], 0x0592, { 0xCB,0xC9 }, "SET 1, C");
        initMem(0x0594, { 0xCB,0xCA });
        lines = disassembler_.disassembleForward(0x0594, memory_, 1);
        verifyLine(lines[0], 0x0594, { 0xCB,0xCA }, "SET 1, D");
        initMem(0x0596, { 0xCB,0xCB });
        lines = disassembler_.disassembleForward(0x0596, memory_, 1);
        verifyLine(lines[0], 0x0596, { 0xCB,0xCB }, "SET 1, E");
        initMem(0x0598, { 0xCB,0xCC });
        lines = disassembler_.disassembleForward(0x0598, memory_, 1);
        verifyLine(lines[0], 0x0598, { 0xCB,0xCC }, "SET 1, H");
        initMem(0x059a, { 0xCB,0xCD });
        lines = disassembler_.disassembleForward(0x059a, memory_, 1);
        verifyLine(lines[0], 0x059a, { 0xCB,0xCD }, "SET 1, L");
        initMem(0x059c, { 0xCB,0xCE });
        lines = disassembler_.disassembleForward(0x059c, memory_, 1);
        verifyLine(lines[0], 0x059c, { 0xCB,0xCE }, "SET 1, (HL)");
        initMem(0x059e, { 0xCB,0xCF });
        lines = disassembler_.disassembleForward(0x059e, memory_, 1);
        verifyLine(lines[0], 0x059e, { 0xCB,0xCF }, "SET 1, A");
        initMem(0x05a0, { 0xCB,0xD0 });
        lines = disassembler_.disassembleForward(0x05a0, memory_, 1);
        verifyLine(lines[0], 0x05a0, { 0xCB,0xD0 }, "SET 2, B");
        initMem(0x05a2, { 0xCB,0xD1 });
        lines = disassembler_.disassembleForward(0x05a2, memory_, 1);
        verifyLine(lines[0], 0x05a2, { 0xCB,0xD1 }, "SET 2, C");
        initMem(0x05a4, { 0xCB,0xD2 });
        lines = disassembler_.disassembleForward(0x05a4, memory_, 1);
        verifyLine(lines[0], 0x05a4, { 0xCB,0xD2 }, "SET 2, D");
        initMem(0x05a6, { 0xCB,0xD3 });
        lines = disassembler_.disassembleForward(0x05a6, memory_, 1);
        verifyLine(lines[0], 0x05a6, { 0xCB,0xD3 }, "SET 2, E");
        initMem(0x05a8, { 0xCB,0xD4 });
        lines = disassembler_.disassembleForward(0x05a8, memory_, 1);
        verifyLine(lines[0], 0x05a8, { 0xCB,0xD4 }, "SET 2, H");
        initMem(0x05aa, { 0xCB,0xD5 });
        lines = disassembler_.disassembleForward(0x05aa, memory_, 1);
        verifyLine(lines[0], 0x05aa, { 0xCB,0xD5 }, "SET 2, L");
        initMem(0x05ac, { 0xCB,0xD6 });
        lines = disassembler_.disassembleForward(0x05ac, memory_, 1);
        verifyLine(lines[0], 0x05ac, { 0xCB,0xD6 }, "SET 2, (HL)");
        initMem(0x05ae, { 0xCB,0xD7 });
        lines = disassembler_.disassembleForward(0x05ae, memory_, 1);
        verifyLine(lines[0], 0x05ae, { 0xCB,0xD7 }, "SET 2, A");
        initMem(0x05b0, { 0xCB,0xD8 });
        lines = disassembler_.disassembleForward(0x05b0, memory_, 1);
        verifyLine(lines[0], 0x05b0, { 0xCB,0xD8 }, "SET 3, B");
        initMem(0x05b2, { 0xCB,0xD9 });
        lines = disassembler_.disassembleForward(0x05b2, memory_, 1);
        verifyLine(lines[0], 0x05b2, { 0xCB,0xD9 }, "SET 3, C");
        initMem(0x05b4, { 0xCB,0xDA });
        lines = disassembler_.disassembleForward(0x05b4, memory_, 1);
        verifyLine(lines[0], 0x05b4, { 0xCB,0xDA }, "SET 3, D");
        initMem(0x05b6, { 0xCB,0xDB });
        lines = disassembler_.disassembleForward(0x05b6, memory_, 1);
        verifyLine(lines[0], 0x05b6, { 0xCB,0xDB }, "SET 3, E");
        initMem(0x05b8, { 0xCB,0xDC });
        lines = disassembler_.disassembleForward(0x05b8, memory_, 1);
        verifyLine(lines[0], 0x05b8, { 0xCB,0xDC }, "SET 3, H");
        initMem(0x05ba, { 0xCB,0xDD });
        lines = disassembler_.disassembleForward(0x05ba, memory_, 1);
        verifyLine(lines[0], 0x05ba, { 0xCB,0xDD }, "SET 3, L");
        initMem(0x05bc, { 0xCB,0xDE });
        lines = disassembler_.disassembleForward(0x05bc, memory_, 1);
        verifyLine(lines[0], 0x05bc, { 0xCB,0xDE }, "SET 3, (HL)");
        initMem(0x05be, { 0xCB,0xDF });
        lines = disassembler_.disassembleForward(0x05be, memory_, 1);
        verifyLine(lines[0], 0x05be, { 0xCB,0xDF }, "SET 3, A");
        initMem(0x05c0, { 0xCB,0xE0 });
        lines = disassembler_.disassembleForward(0x05c0, memory_, 1);
        verifyLine(lines[0], 0x05c0, { 0xCB,0xE0 }, "SET 4, B");
        initMem(0x05c2, { 0xCB,0xE1 });
        lines = disassembler_.disassembleForward(0x05c2, memory_, 1);
        verifyLine(lines[0], 0x05c2, { 0xCB,0xE1 }, "SET 4, C");
        initMem(0x05c4, { 0xCB,0xE2 });
        lines = disassembler_.disassembleForward(0x05c4, memory_, 1);
        verifyLine(lines[0], 0x05c4, { 0xCB,0xE2 }, "SET 4, D");
        initMem(0x05c6, { 0xCB,0xE3 });
        lines = disassembler_.disassembleForward(0x05c6, memory_, 1);
        verifyLine(lines[0], 0x05c6, { 0xCB,0xE3 }, "SET 4, E");
        initMem(0x05c8, { 0xCB,0xE4 });
        lines = disassembler_.disassembleForward(0x05c8, memory_, 1);
        verifyLine(lines[0], 0x05c8, { 0xCB,0xE4 }, "SET 4, H");
        initMem(0x05ca, { 0xCB,0xE5 });
        lines = disassembler_.disassembleForward(0x05ca, memory_, 1);
        verifyLine(lines[0], 0x05ca, { 0xCB,0xE5 }, "SET 4, L");
        initMem(0x05cc, { 0xCB,0xE6 });
        lines = disassembler_.disassembleForward(0x05cc, memory_, 1);
        verifyLine(lines[0], 0x05cc, { 0xCB,0xE6 }, "SET 4, (HL)");
        initMem(0x05ce, { 0xCB,0xE7 });
        lines = disassembler_.disassembleForward(0x05ce, memory_, 1);
        verifyLine(lines[0], 0x05ce, { 0xCB,0xE7 }, "SET 4, A");
        initMem(0x05d0, { 0xCB,0xE8 });
        lines = disassembler_.disassembleForward(0x05d0, memory_, 1);
        verifyLine(lines[0], 0x05d0, { 0xCB,0xE8 }, "SET 5, B");
        initMem(0x05d2, { 0xCB,0xE9 });
        lines = disassembler_.disassembleForward(0x05d2, memory_, 1);
        verifyLine(lines[0], 0x05d2, { 0xCB,0xE9 }, "SET 5, C");
        initMem(0x05d4, { 0xCB,0xEA });
        lines = disassembler_.disassembleForward(0x05d4, memory_, 1);
        verifyLine(lines[0], 0x05d4, { 0xCB,0xEA }, "SET 5, D");
        initMem(0x05d6, { 0xCB,0xEB });
        lines = disassembler_.disassembleForward(0x05d6, memory_, 1);
        verifyLine(lines[0], 0x05d6, { 0xCB,0xEB }, "SET 5, E");
        initMem(0x05d8, { 0xCB,0xEC });
        lines = disassembler_.disassembleForward(0x05d8, memory_, 1);
        verifyLine(lines[0], 0x05d8, { 0xCB,0xEC }, "SET 5, H");
        initMem(0x05da, { 0xCB,0xED });
        lines = disassembler_.disassembleForward(0x05da, memory_, 1);
        verifyLine(lines[0], 0x05da, { 0xCB,0xED }, "SET 5, L");
        initMem(0x05dc, { 0xCB,0xEE });
        lines = disassembler_.disassembleForward(0x05dc, memory_, 1);
        verifyLine(lines[0], 0x05dc, { 0xCB,0xEE }, "SET 5, (HL)");
        initMem(0x05de, { 0xCB,0xEF });
        lines = disassembler_.disassembleForward(0x05de, memory_, 1);
        verifyLine(lines[0], 0x05de, { 0xCB,0xEF }, "SET 5, A");
        initMem(0x05e0, { 0xCB,0xF0 });
        lines = disassembler_.disassembleForward(0x05e0, memory_, 1);
        verifyLine(lines[0], 0x05e0, { 0xCB,0xF0 }, "SET 6, B");
        initMem(0x05e2, { 0xCB,0xF1 });
        lines = disassembler_.disassembleForward(0x05e2, memory_, 1);
        verifyLine(lines[0], 0x05e2, { 0xCB,0xF1 }, "SET 6, C");
        initMem(0x05e4, { 0xCB,0xF2 });
        lines = disassembler_.disassembleForward(0x05e4, memory_, 1);
        verifyLine(lines[0], 0x05e4, { 0xCB,0xF2 }, "SET 6, D");
        initMem(0x05e6, { 0xCB,0xF3 });
        lines = disassembler_.disassembleForward(0x05e6, memory_, 1);
        verifyLine(lines[0], 0x05e6, { 0xCB,0xF3 }, "SET 6, E");
        initMem(0x05e8, { 0xCB,0xF4 });
        lines = disassembler_.disassembleForward(0x05e8, memory_, 1);
        verifyLine(lines[0], 0x05e8, { 0xCB,0xF4 }, "SET 6, H");
        initMem(0x05ea, { 0xCB,0xF5 });
        lines = disassembler_.disassembleForward(0x05ea, memory_, 1);
        verifyLine(lines[0], 0x05ea, { 0xCB,0xF5 }, "SET 6, L");
        initMem(0x05ec, { 0xCB,0xF6 });
        lines = disassembler_.disassembleForward(0x05ec, memory_, 1);
        verifyLine(lines[0], 0x05ec, { 0xCB,0xF6 }, "SET 6, (HL)");
        initMem(0x05ee, { 0xCB,0xF7 });
        lines = disassembler_.disassembleForward(0x05ee, memory_, 1);
        verifyLine(lines[0], 0x05ee, { 0xCB,0xF7 }, "SET 6, A");
        initMem(0x05f0, { 0xCB,0xF8 });
        lines = disassembler_.disassembleForward(0x05f0, memory_, 1);
        verifyLine(lines[0], 0x05f0, { 0xCB,0xF8 }, "SET 7, B");
        initMem(0x05f2, { 0xCB,0xF9 });
        lines = disassembler_.disassembleForward(0x05f2, memory_, 1);
        verifyLine(lines[0], 0x05f2, { 0xCB,0xF9 }, "SET 7, C");
        initMem(0x05f4, { 0xCB,0xFA });
        lines = disassembler_.disassembleForward(0x05f4, memory_, 1);
        verifyLine(lines[0], 0x05f4, { 0xCB,0xFA }, "SET 7, D");
        initMem(0x05f6, { 0xCB,0xFB });
        lines = disassembler_.disassembleForward(0x05f6, memory_, 1);
        verifyLine(lines[0], 0x05f6, { 0xCB,0xFB }, "SET 7, E");
        initMem(0x05f8, { 0xCB,0xFC });
        lines = disassembler_.disassembleForward(0x05f8, memory_, 1);
        verifyLine(lines[0], 0x05f8, { 0xCB,0xFC }, "SET 7, H");
        initMem(0x05fa, { 0xCB,0xFD });
        lines = disassembler_.disassembleForward(0x05fa, memory_, 1);
        verifyLine(lines[0], 0x05fa, { 0xCB,0xFD }, "SET 7, L");
        initMem(0x05fc, { 0xCB,0xFE });
        lines = disassembler_.disassembleForward(0x05fc, memory_, 1);
        verifyLine(lines[0], 0x05fc, { 0xCB,0xFE }, "SET 7, (HL)");
        initMem(0x05fe, { 0xCB,0xFF });
        lines = disassembler_.disassembleForward(0x05fe, memory_, 1);
        verifyLine(lines[0], 0x05fe, { 0xCB,0xFF }, "SET 7, A");
    }

    void TestDisassembleForward_PrefixDD() {
        initMem(0x0400, { 0xDD,0x00 });
        auto lines = disassembler_.disassembleForward(0x0400, memory_, 1);
        verifyLine(lines[0], 0x0400, { 0xDD,0x00 }, "*NOP");
        initMem(0x0402, { 0xDD,0x01,0xDD,0x02 });
        lines = disassembler_.disassembleForward(0x0402, memory_, 1);
        verifyLine(lines[0], 0x0402, { 0xDD,0x01,0xDD,0x02 }, "*LD BC, #$02DD");
        initMem(0x0404, { 0xDD,0x02 });
        lines = disassembler_.disassembleForward(0x0404, memory_, 1);
        verifyLine(lines[0], 0x0404, { 0xDD,0x02 }, "*LD (BC),A");
        initMem(0x0406, { 0xDD,0x03 });
        lines = disassembler_.disassembleForward(0x0406, memory_, 1);
        verifyLine(lines[0], 0x0406, { 0xDD,0x03 }, "*INC BC");
        initMem(0x0408, { 0xDD,0x04 });
        lines = disassembler_.disassembleForward(0x0408, memory_, 1);
        verifyLine(lines[0], 0x0408, { 0xDD,0x04 }, "*INC B");
        initMem(0x040a, { 0xDD,0x05 });
        lines = disassembler_.disassembleForward(0x040a, memory_, 1);
        verifyLine(lines[0], 0x040a, { 0xDD,0x05 }, "*DEC B");
        initMem(0x040c, { 0xDD,0x06,0xDD });
        lines = disassembler_.disassembleForward(0x040c, memory_, 1);
        verifyLine(lines[0], 0x040c, { 0xDD,0x06,0xDD }, "*LD B, #$DD");
        initMem(0x040e, { 0xDD,0x07 });
        lines = disassembler_.disassembleForward(0x040e, memory_, 1);
        verifyLine(lines[0], 0x040e, { 0xDD,0x07 }, "*RLCA");
        initMem(0x0410, { 0xDD,0x08 });
        lines = disassembler_.disassembleForward(0x0410, memory_, 1);
        verifyLine(lines[0], 0x0410, { 0xDD,0x08 }, "*EX AF,AF'");
        initMem(0x0412, { 0xDD,0x09 });
        lines = disassembler_.disassembleForward(0x0412, memory_, 1);
        verifyLine(lines[0], 0x0412, { 0xDD,0x09 }, "ADD IX,BC");
        initMem(0x0414, { 0xDD,0x0A });
        lines = disassembler_.disassembleForward(0x0414, memory_, 1);
        verifyLine(lines[0], 0x0414, { 0xDD,0x0A }, "*LD A,(BC)");
        initMem(0x0416, { 0xDD,0x0B });
        lines = disassembler_.disassembleForward(0x0416, memory_, 1);
        verifyLine(lines[0], 0x0416, { 0xDD,0x0B }, "*DEC BC");
        initMem(0x0418, { 0xDD,0x0C });
        lines = disassembler_.disassembleForward(0x0418, memory_, 1);
        verifyLine(lines[0], 0x0418, { 0xDD,0x0C }, "*INC C");
        initMem(0x041a, { 0xDD,0x0D });
        lines = disassembler_.disassembleForward(0x041a, memory_, 1);
        verifyLine(lines[0], 0x041a, { 0xDD,0x0D }, "*DEC C");
        initMem(0x041c, { 0xDD,0x0E,0xDD });
        lines = disassembler_.disassembleForward(0x041c, memory_, 1);
        verifyLine(lines[0], 0x041c, { 0xDD,0x0E,0xDD }, "*LD C, #$DD");
        initMem(0x041e, { 0xDD,0x0F });
        lines = disassembler_.disassembleForward(0x041e, memory_, 1);
        verifyLine(lines[0], 0x041e, { 0xDD,0x0F }, "*RRCA");
        initMem(0x0420, { 0xDD,0x10,0xDD });
        lines = disassembler_.disassembleForward(0x0420, memory_, 1);
        verifyLine(lines[0], 0x0420, { 0xDD,0x10,0xDD }, "*DJNZ $03FF");
        initMem(0x0422, { 0xDD,0x11,0xDD,0x12 });
        lines = disassembler_.disassembleForward(0x0422, memory_, 1);
        verifyLine(lines[0], 0x0422, { 0xDD,0x11,0xDD,0x12 }, "*LD DE, #$12DD");
        initMem(0x0424, { 0xDD,0x12 });
        lines = disassembler_.disassembleForward(0x0424, memory_, 1);
        verifyLine(lines[0], 0x0424, { 0xDD,0x12 }, "*LD (DE),A");
        initMem(0x0426, { 0xDD,0x13 });
        lines = disassembler_.disassembleForward(0x0426, memory_, 1);
        verifyLine(lines[0], 0x0426, { 0xDD,0x13 }, "*INC DE");
        initMem(0x0428, { 0xDD,0x14 });
        lines = disassembler_.disassembleForward(0x0428, memory_, 1);
        verifyLine(lines[0], 0x0428, { 0xDD,0x14 }, "*INC D");
        initMem(0x042a, { 0xDD,0x15 });
        lines = disassembler_.disassembleForward(0x042a, memory_, 1);
        verifyLine(lines[0], 0x042a, { 0xDD,0x15 }, "*DEC D");
        initMem(0x042c, { 0xDD,0x16,0xDD });
        lines = disassembler_.disassembleForward(0x042c, memory_, 1);
        verifyLine(lines[0], 0x042c, { 0xDD,0x16,0xDD }, "*LD D, #$DD");
        initMem(0x042e, { 0xDD,0x17 });
        lines = disassembler_.disassembleForward(0x042e, memory_, 1);
        verifyLine(lines[0], 0x042e, { 0xDD,0x17 }, "*RLA");
        initMem(0x0430, { 0xDD,0x18,0xDD });
        lines = disassembler_.disassembleForward(0x0430, memory_, 1);
        verifyLine(lines[0], 0x0430, { 0xDD,0x18,0xDD }, "*JR $040F");
        initMem(0x0432, { 0xDD,0x19 });
        lines = disassembler_.disassembleForward(0x0432, memory_, 1);
        verifyLine(lines[0], 0x0432, { 0xDD,0x19 }, "ADD IX,DE");
        initMem(0x0434, { 0xDD,0x1A });
        lines = disassembler_.disassembleForward(0x0434, memory_, 1);
        verifyLine(lines[0], 0x0434, { 0xDD,0x1A }, "*LD A,(DE)");
        initMem(0x0436, { 0xDD,0x1B });
        lines = disassembler_.disassembleForward(0x0436, memory_, 1);
        verifyLine(lines[0], 0x0436, { 0xDD,0x1B }, "*DEC DE");
        initMem(0x0438, { 0xDD,0x1C });
        lines = disassembler_.disassembleForward(0x0438, memory_, 1);
        verifyLine(lines[0], 0x0438, { 0xDD,0x1C }, "*INC E");
        initMem(0x043a, { 0xDD,0x1D });
        lines = disassembler_.disassembleForward(0x043a, memory_, 1);
        verifyLine(lines[0], 0x043a, { 0xDD,0x1D }, "*DEC E");
        initMem(0x043c, { 0xDD,0x1E,0xDD });
        lines = disassembler_.disassembleForward(0x043c, memory_, 1);
        verifyLine(lines[0], 0x043c, { 0xDD,0x1E,0xDD }, "*LD E, #$DD");
        initMem(0x043e, { 0xDD,0x1F });
        lines = disassembler_.disassembleForward(0x043e, memory_, 1);
        verifyLine(lines[0], 0x043e, { 0xDD,0x1F }, "*RRA");
        initMem(0x0440, { 0xDD,0x20,0xDD });
        lines = disassembler_.disassembleForward(0x0440, memory_, 1);
        verifyLine(lines[0], 0x0440, { 0xDD,0x20,0xDD }, "*JR NZ, $041F");
        initMem(0x0442, { 0xDD,0x21,0xDD,0x22 });
        lines = disassembler_.disassembleForward(0x0442, memory_, 1);
        verifyLine(lines[0], 0x0442, { 0xDD,0x21,0xDD,0x22 }, "LD IX, #$22DD");
        initMem(0x0444, { 0xDD,0x22,0xDD,0x23 });
        lines = disassembler_.disassembleForward(0x0444, memory_, 1);
        verifyLine(lines[0], 0x0444, { 0xDD,0x22,0xDD,0x23 }, "LD ($23DD),IX");
        initMem(0x0446, { 0xDD,0x23 });
        lines = disassembler_.disassembleForward(0x0446, memory_, 1);
        verifyLine(lines[0], 0x0446, { 0xDD,0x23 }, "INC IX");
        initMem(0x0448, { 0xDD,0x24 });
        lines = disassembler_.disassembleForward(0x0448, memory_, 1);
        verifyLine(lines[0], 0x0448, { 0xDD,0x24 }, "*INC IXH");
        initMem(0x044a, { 0xDD,0x25 });
        lines = disassembler_.disassembleForward(0x044a, memory_, 1);
        verifyLine(lines[0], 0x044a, { 0xDD,0x25 }, "*DEC IXH");
        initMem(0x044c, { 0xDD,0x26,0xDD });
        lines = disassembler_.disassembleForward(0x044c, memory_, 1);
        verifyLine(lines[0], 0x044c, { 0xDD,0x26,0xDD }, "*LD IXH, #$DD");
        initMem(0x044e, { 0xDD,0x27 });
        lines = disassembler_.disassembleForward(0x044e, memory_, 1);
        verifyLine(lines[0], 0x044e, { 0xDD,0x27 }, "*DAA");
        initMem(0x0450, { 0xDD,0x28,0xDD });
        lines = disassembler_.disassembleForward(0x0450, memory_, 1);
        verifyLine(lines[0], 0x0450, { 0xDD,0x28,0xDD }, "*JR Z, $042F");
        initMem(0x0452, { 0xDD,0x29 });
        lines = disassembler_.disassembleForward(0x0452, memory_, 1);
        verifyLine(lines[0], 0x0452, { 0xDD,0x29 }, "ADD IX,IX");
        initMem(0x0454, { 0xDD,0x2A,0xDD,0x2B });
        lines = disassembler_.disassembleForward(0x0454, memory_, 1);
        verifyLine(lines[0], 0x0454, { 0xDD,0x2A,0xDD,0x2B }, "LD IX, ($2BDD)");
        initMem(0x0456, { 0xDD,0x2B });
        lines = disassembler_.disassembleForward(0x0456, memory_, 1);
        verifyLine(lines[0], 0x0456, { 0xDD,0x2B }, "DEC IX");
        initMem(0x0458, { 0xDD,0x2C });
        lines = disassembler_.disassembleForward(0x0458, memory_, 1);
        verifyLine(lines[0], 0x0458, { 0xDD,0x2C }, "*INC IXL");
        initMem(0x045a, { 0xDD,0x2D });
        lines = disassembler_.disassembleForward(0x045a, memory_, 1);
        verifyLine(lines[0], 0x045a, { 0xDD,0x2D }, "*DEC IXL");
        initMem(0x045c, { 0xDD,0x2E,0xDD });
        lines = disassembler_.disassembleForward(0x045c, memory_, 1);
        verifyLine(lines[0], 0x045c, { 0xDD,0x2E,0xDD }, "*LD IXL, #$DD");
        initMem(0x045e, { 0xDD,0x2F });
        lines = disassembler_.disassembleForward(0x045e, memory_, 1);
        verifyLine(lines[0], 0x045e, { 0xDD,0x2F }, "*CPL");
        initMem(0x0460, { 0xDD,0x30,0xDD });
        lines = disassembler_.disassembleForward(0x0460, memory_, 1);
        verifyLine(lines[0], 0x0460, { 0xDD,0x30,0xDD }, "*JR NC, $043F");
        initMem(0x0462, { 0xDD,0x31,0xDD,0x32 });
        lines = disassembler_.disassembleForward(0x0462, memory_, 1);
        verifyLine(lines[0], 0x0462, { 0xDD,0x31,0xDD,0x32 }, "*LD SP, #$32DD");
        initMem(0x0464, { 0xDD,0x32,0xDD,0x33 });
        lines = disassembler_.disassembleForward(0x0464, memory_, 1);
        verifyLine(lines[0], 0x0464, { 0xDD,0x32,0xDD,0x33 }, "*LD ($33DD),A");
        initMem(0x0466, { 0xDD,0x33 });
        lines = disassembler_.disassembleForward(0x0466, memory_, 1);
        verifyLine(lines[0], 0x0466, { 0xDD,0x33 }, "*INC SP");
        initMem(0x0468, { 0xDD,0x34,0xDD });
        lines = disassembler_.disassembleForward(0x0468, memory_, 1);
        verifyLine(lines[0], 0x0468, { 0xDD,0x34,0xDD }, "INC (IX-$23)");
        initMem(0x046a, { 0xDD,0x35,0xDD });
        lines = disassembler_.disassembleForward(0x046a, memory_, 1);
        verifyLine(lines[0], 0x046a, { 0xDD,0x35,0xDD }, "DEC (IX-$23)");
        initMem(0x046c, { 0xDD,0x36,0xDD,0x37 });
        lines = disassembler_.disassembleForward(0x046c, memory_, 1);
        verifyLine(lines[0], 0x046c, { 0xDD,0x36,0xDD,0x37 }, "LD (IX+$DD), #$37");
        initMem(0x046e, { 0xDD,0x37 });
        lines = disassembler_.disassembleForward(0x046e, memory_, 1);
        verifyLine(lines[0], 0x046e, { 0xDD,0x37 }, "*SCF");
        initMem(0x0470, { 0xDD,0x38,0xDD });
        lines = disassembler_.disassembleForward(0x0470, memory_, 1);
        verifyLine(lines[0], 0x0470, { 0xDD,0x38,0xDD }, "*JR C, $044F");
        initMem(0x0472, { 0xDD,0x39 });
        lines = disassembler_.disassembleForward(0x0472, memory_, 1);
        verifyLine(lines[0], 0x0472, { 0xDD,0x39 }, "ADD IX,SP");
        initMem(0x0474, { 0xDD,0x3A,0xDD,0x3B });
        lines = disassembler_.disassembleForward(0x0474, memory_, 1);
        verifyLine(lines[0], 0x0474, { 0xDD,0x3A,0xDD,0x3B }, "*LD A, ($3BDD)");
        initMem(0x0476, { 0xDD,0x3B });
        lines = disassembler_.disassembleForward(0x0476, memory_, 1);
        verifyLine(lines[0], 0x0476, { 0xDD,0x3B }, "*DEC SP");
        initMem(0x0478, { 0xDD,0x3C });
        lines = disassembler_.disassembleForward(0x0478, memory_, 1);
        verifyLine(lines[0], 0x0478, { 0xDD,0x3C }, "*INC A");
        initMem(0x047a, { 0xDD,0x3D });
        lines = disassembler_.disassembleForward(0x047a, memory_, 1);
        verifyLine(lines[0], 0x047a, { 0xDD,0x3D }, "*DEC A");
        initMem(0x047c, { 0xDD,0x3E,0xDD });
        lines = disassembler_.disassembleForward(0x047c, memory_, 1);
        verifyLine(lines[0], 0x047c, { 0xDD,0x3E,0xDD }, "*LD A, #$DD");
        initMem(0x047e, { 0xDD,0x3F });
        lines = disassembler_.disassembleForward(0x047e, memory_, 1);
        verifyLine(lines[0], 0x047e, { 0xDD,0x3F }, "*CCF");
        initMem(0x0480, { 0xDD,0x40 });
        lines = disassembler_.disassembleForward(0x0480, memory_, 1);
        verifyLine(lines[0], 0x0480, { 0xDD,0x40 }, "*LD B,B");
        initMem(0x0482, { 0xDD,0x41 });
        lines = disassembler_.disassembleForward(0x0482, memory_, 1);
        verifyLine(lines[0], 0x0482, { 0xDD,0x41 }, "*LD B,C");
        initMem(0x0484, { 0xDD,0x42 });
        lines = disassembler_.disassembleForward(0x0484, memory_, 1);
        verifyLine(lines[0], 0x0484, { 0xDD,0x42 }, "*LD B,D");
        initMem(0x0486, { 0xDD,0x43 });
        lines = disassembler_.disassembleForward(0x0486, memory_, 1);
        verifyLine(lines[0], 0x0486, { 0xDD,0x43 }, "*LD B,E");
        initMem(0x0488, { 0xDD,0x44 });
        lines = disassembler_.disassembleForward(0x0488, memory_, 1);
        verifyLine(lines[0], 0x0488, { 0xDD,0x44 }, "*LD B,IXH");
        initMem(0x048a, { 0xDD,0x45 });
        lines = disassembler_.disassembleForward(0x048a, memory_, 1);
        verifyLine(lines[0], 0x048a, { 0xDD,0x45 }, "*LD B,IXL");
        initMem(0x048c, { 0xDD,0x46,0xDD });
        lines = disassembler_.disassembleForward(0x048c, memory_, 1);
        verifyLine(lines[0], 0x048c, { 0xDD,0x46,0xDD }, "LD B, (IX-$23)");
        initMem(0x048e, { 0xDD,0x47 });
        lines = disassembler_.disassembleForward(0x048e, memory_, 1);
        verifyLine(lines[0], 0x048e, { 0xDD,0x47 }, "*LD B,A");
        initMem(0x0490, { 0xDD,0x48 });
        lines = disassembler_.disassembleForward(0x0490, memory_, 1);
        verifyLine(lines[0], 0x0490, { 0xDD,0x48 }, "*LD C,B");
        initMem(0x0492, { 0xDD,0x49 });
        lines = disassembler_.disassembleForward(0x0492, memory_, 1);
        verifyLine(lines[0], 0x0492, { 0xDD,0x49 }, "*LD C,C");
        initMem(0x0494, { 0xDD,0x4A });
        lines = disassembler_.disassembleForward(0x0494, memory_, 1);
        verifyLine(lines[0], 0x0494, { 0xDD,0x4A }, "*LD C,D");
        initMem(0x0496, { 0xDD,0x4B });
        lines = disassembler_.disassembleForward(0x0496, memory_, 1);
        verifyLine(lines[0], 0x0496, { 0xDD,0x4B }, "*LD C,E");
        initMem(0x0498, { 0xDD,0x4C });
        lines = disassembler_.disassembleForward(0x0498, memory_, 1);
        verifyLine(lines[0], 0x0498, { 0xDD,0x4C }, "*LD C,IXH");
        initMem(0x049a, { 0xDD,0x4D });
        lines = disassembler_.disassembleForward(0x049a, memory_, 1);
        verifyLine(lines[0], 0x049a, { 0xDD,0x4D }, "*LD C,IXL");
        initMem(0x049c, { 0xDD,0x4E,0xDD });
        lines = disassembler_.disassembleForward(0x049c, memory_, 1);
        verifyLine(lines[0], 0x049c, { 0xDD,0x4E,0xDD }, "LD C, (IX-$23)");
        initMem(0x049e, { 0xDD,0x4F });
        lines = disassembler_.disassembleForward(0x049e, memory_, 1);
        verifyLine(lines[0], 0x049e, { 0xDD,0x4F }, "*LD C,A");
        initMem(0x04a0, { 0xDD,0x50 });
        lines = disassembler_.disassembleForward(0x04a0, memory_, 1);
        verifyLine(lines[0], 0x04a0, { 0xDD,0x50 }, "*LD D,B");
        initMem(0x04a2, { 0xDD,0x51 });
        lines = disassembler_.disassembleForward(0x04a2, memory_, 1);
        verifyLine(lines[0], 0x04a2, { 0xDD,0x51 }, "*LD D,C");
        initMem(0x04a4, { 0xDD,0x52 });
        lines = disassembler_.disassembleForward(0x04a4, memory_, 1);
        verifyLine(lines[0], 0x04a4, { 0xDD,0x52 }, "*LD D,D");
        initMem(0x04a6, { 0xDD,0x53 });
        lines = disassembler_.disassembleForward(0x04a6, memory_, 1);
        verifyLine(lines[0], 0x04a6, { 0xDD,0x53 }, "*LD D,E");
        initMem(0x04a8, { 0xDD,0x54 });
        lines = disassembler_.disassembleForward(0x04a8, memory_, 1);
        verifyLine(lines[0], 0x04a8, { 0xDD,0x54 }, "*LD D,IXH");
        initMem(0x04aa, { 0xDD,0x55 });
        lines = disassembler_.disassembleForward(0x04aa, memory_, 1);
        verifyLine(lines[0], 0x04aa, { 0xDD,0x55 }, "*LD D,IXL");
        initMem(0x04ac, { 0xDD,0x56,0xDD });
        lines = disassembler_.disassembleForward(0x04ac, memory_, 1);
        verifyLine(lines[0], 0x04ac, { 0xDD,0x56,0xDD }, "LD D, (IX-$23)");
        initMem(0x04ae, { 0xDD,0x57 });
        lines = disassembler_.disassembleForward(0x04ae, memory_, 1);
        verifyLine(lines[0], 0x04ae, { 0xDD,0x57 }, "*LD D,A");
        initMem(0x04b0, { 0xDD,0x58 });
        lines = disassembler_.disassembleForward(0x04b0, memory_, 1);
        verifyLine(lines[0], 0x04b0, { 0xDD,0x58 }, "*LD E,B");
        initMem(0x04b2, { 0xDD,0x59 });
        lines = disassembler_.disassembleForward(0x04b2, memory_, 1);
        verifyLine(lines[0], 0x04b2, { 0xDD,0x59 }, "*LD E,C");
        initMem(0x04b4, { 0xDD,0x5A });
        lines = disassembler_.disassembleForward(0x04b4, memory_, 1);
        verifyLine(lines[0], 0x04b4, { 0xDD,0x5A }, "*LD E,D");
        initMem(0x04b6, { 0xDD,0x5B });
        lines = disassembler_.disassembleForward(0x04b6, memory_, 1);
        verifyLine(lines[0], 0x04b6, { 0xDD,0x5B }, "*LD E,E");
        initMem(0x04b8, { 0xDD,0x5C });
        lines = disassembler_.disassembleForward(0x04b8, memory_, 1);
        verifyLine(lines[0], 0x04b8, { 0xDD,0x5C }, "*LD E,IXH");
        initMem(0x04ba, { 0xDD,0x5D });
        lines = disassembler_.disassembleForward(0x04ba, memory_, 1);
        verifyLine(lines[0], 0x04ba, { 0xDD,0x5D }, "*LD E,IXL");
        initMem(0x04bc, { 0xDD,0x5E,0xDD });
        lines = disassembler_.disassembleForward(0x04bc, memory_, 1);
        verifyLine(lines[0], 0x04bc, { 0xDD,0x5E,0xDD }, "LD E, (IX-$23)");
        initMem(0x04be, { 0xDD,0x5F });
        lines = disassembler_.disassembleForward(0x04be, memory_, 1);
        verifyLine(lines[0], 0x04be, { 0xDD,0x5F }, "*LD E,A");
        initMem(0x04c0, { 0xDD,0x60 });
        lines = disassembler_.disassembleForward(0x04c0, memory_, 1);
        verifyLine(lines[0], 0x04c0, { 0xDD,0x60 }, "*LD IXH,B");
        initMem(0x04c2, { 0xDD,0x61 });
        lines = disassembler_.disassembleForward(0x04c2, memory_, 1);
        verifyLine(lines[0], 0x04c2, { 0xDD,0x61 }, "*LD IXH,C");
        initMem(0x04c4, { 0xDD,0x62 });
        lines = disassembler_.disassembleForward(0x04c4, memory_, 1);
        verifyLine(lines[0], 0x04c4, { 0xDD,0x62 }, "*LD IXH,D");
        initMem(0x04c6, { 0xDD,0x63 });
        lines = disassembler_.disassembleForward(0x04c6, memory_, 1);
        verifyLine(lines[0], 0x04c6, { 0xDD,0x63 }, "*LD IXH,E");
        initMem(0x04c8, { 0xDD,0x64 });
        lines = disassembler_.disassembleForward(0x04c8, memory_, 1);
        verifyLine(lines[0], 0x04c8, { 0xDD,0x64 }, "*LD IXH,IXH");
        initMem(0x04ca, { 0xDD,0x65 });
        lines = disassembler_.disassembleForward(0x04ca, memory_, 1);
        verifyLine(lines[0], 0x04ca, { 0xDD,0x65 }, "*LD IXH,IXL");
        initMem(0x04cc, { 0xDD,0x66,0xDD });
        lines = disassembler_.disassembleForward(0x04cc, memory_, 1);
        verifyLine(lines[0], 0x04cc, { 0xDD,0x66,0xDD }, "LD H, (IX-$23)");
        initMem(0x04ce, { 0xDD,0x67 });
        lines = disassembler_.disassembleForward(0x04ce, memory_, 1);
        verifyLine(lines[0], 0x04ce, { 0xDD,0x67 }, "*LD IXH,A");
        initMem(0x04d0, { 0xDD,0x68 });
        lines = disassembler_.disassembleForward(0x04d0, memory_, 1);
        verifyLine(lines[0], 0x04d0, { 0xDD,0x68 }, "*LD IXL,B");
        initMem(0x04d2, { 0xDD,0x69 });
        lines = disassembler_.disassembleForward(0x04d2, memory_, 1);
        verifyLine(lines[0], 0x04d2, { 0xDD,0x69 }, "*LD IXL,C");
        initMem(0x04d4, { 0xDD,0x6A });
        lines = disassembler_.disassembleForward(0x04d4, memory_, 1);
        verifyLine(lines[0], 0x04d4, { 0xDD,0x6A }, "*LD IXL,D");
        initMem(0x04d6, { 0xDD,0x6B });
        lines = disassembler_.disassembleForward(0x04d6, memory_, 1);
        verifyLine(lines[0], 0x04d6, { 0xDD,0x6B }, "*LD IXL,E");
        initMem(0x04d8, { 0xDD,0x6C });
        lines = disassembler_.disassembleForward(0x04d8, memory_, 1);
        verifyLine(lines[0], 0x04d8, { 0xDD,0x6C }, "*LD IXL,IXH");
        initMem(0x04da, { 0xDD,0x6D });
        lines = disassembler_.disassembleForward(0x04da, memory_, 1);
        verifyLine(lines[0], 0x04da, { 0xDD,0x6D }, "*LD IXL,IXL");
        initMem(0x04dc, { 0xDD,0x6E,0xDD });
        lines = disassembler_.disassembleForward(0x04dc, memory_, 1);
        verifyLine(lines[0], 0x04dc, { 0xDD,0x6E,0xDD }, "LD L, (IX-$23)");
        initMem(0x04de, { 0xDD,0x6F });
        lines = disassembler_.disassembleForward(0x04de, memory_, 1);
        verifyLine(lines[0], 0x04de, { 0xDD,0x6F }, "*LD IXL,A");
        initMem(0x04e0, { 0xDD,0x70,0xDD });
        lines = disassembler_.disassembleForward(0x04e0, memory_, 1);
        verifyLine(lines[0], 0x04e0, { 0xDD,0x70,0xDD }, "LD (IX-$23), B");
        initMem(0x04e2, { 0xDD,0x71,0xDD });
        lines = disassembler_.disassembleForward(0x04e2, memory_, 1);
        verifyLine(lines[0], 0x04e2, { 0xDD,0x71,0xDD }, "LD (IX-$23), C");
        initMem(0x04e4, { 0xDD,0x72,0xDD });
        lines = disassembler_.disassembleForward(0x04e4, memory_, 1);
        verifyLine(lines[0], 0x04e4, { 0xDD,0x72,0xDD }, "LD (IX-$23), D");
        initMem(0x04e6, { 0xDD,0x73,0xDD });
        lines = disassembler_.disassembleForward(0x04e6, memory_, 1);
        verifyLine(lines[0], 0x04e6, { 0xDD,0x73,0xDD }, "LD (IX-$23), E");
        initMem(0x04e8, { 0xDD,0x74,0xDD });
        lines = disassembler_.disassembleForward(0x04e8, memory_, 1);
        verifyLine(lines[0], 0x04e8, { 0xDD,0x74,0xDD }, "LD (IX-$23), H");
        initMem(0x04ea, { 0xDD,0x75,0xDD });
        lines = disassembler_.disassembleForward(0x04ea, memory_, 1);
        verifyLine(lines[0], 0x04ea, { 0xDD,0x75,0xDD }, "LD (IX-$23), L");
        initMem(0x04ec, { 0xDD,0x76 });
        lines = disassembler_.disassembleForward(0x04ec, memory_, 1);
        verifyLine(lines[0], 0x04ec, { 0xDD,0x76 }, "*HALT");
        initMem(0x04ee, { 0xDD,0x77,0xDD });
        lines = disassembler_.disassembleForward(0x04ee, memory_, 1);
        verifyLine(lines[0], 0x04ee, { 0xDD,0x77,0xDD }, "LD (IX-$23), A");
        initMem(0x04f0, { 0xDD,0x78 });
        lines = disassembler_.disassembleForward(0x04f0, memory_, 1);
        verifyLine(lines[0], 0x04f0, { 0xDD,0x78 }, "*LD A,B");
        initMem(0x04f2, { 0xDD,0x79 });
        lines = disassembler_.disassembleForward(0x04f2, memory_, 1);
        verifyLine(lines[0], 0x04f2, { 0xDD,0x79 }, "*LD A,C");
        initMem(0x04f4, { 0xDD,0x7A });
        lines = disassembler_.disassembleForward(0x04f4, memory_, 1);
        verifyLine(lines[0], 0x04f4, { 0xDD,0x7A }, "*LD A,D");
        initMem(0x04f6, { 0xDD,0x7B });
        lines = disassembler_.disassembleForward(0x04f6, memory_, 1);
        verifyLine(lines[0], 0x04f6, { 0xDD,0x7B }, "*LD A,E");
        initMem(0x04f8, { 0xDD,0x7C });
        lines = disassembler_.disassembleForward(0x04f8, memory_, 1);
        verifyLine(lines[0], 0x04f8, { 0xDD,0x7C }, "*LD A,IXH");
        initMem(0x04fa, { 0xDD,0x7D });
        lines = disassembler_.disassembleForward(0x04fa, memory_, 1);
        verifyLine(lines[0], 0x04fa, { 0xDD,0x7D }, "*LD A,IXL");
        initMem(0x04fc, { 0xDD,0x7E,0xDD });
        lines = disassembler_.disassembleForward(0x04fc, memory_, 1);
        verifyLine(lines[0], 0x04fc, { 0xDD,0x7E,0xDD }, "LD A, (IX-$23)");
        initMem(0x04fe, { 0xDD,0x7F });
        lines = disassembler_.disassembleForward(0x04fe, memory_, 1);
        verifyLine(lines[0], 0x04fe, { 0xDD,0x7F }, "*LD A,A");
        initMem(0x0500, { 0xDD,0x80 });
        lines = disassembler_.disassembleForward(0x0500, memory_, 1);
        verifyLine(lines[0], 0x0500, { 0xDD,0x80 }, "*ADD B");
        initMem(0x0502, { 0xDD,0x81 });
        lines = disassembler_.disassembleForward(0x0502, memory_, 1);
        verifyLine(lines[0], 0x0502, { 0xDD,0x81 }, "*ADD C");
        initMem(0x0504, { 0xDD,0x82 });
        lines = disassembler_.disassembleForward(0x0504, memory_, 1);
        verifyLine(lines[0], 0x0504, { 0xDD,0x82 }, "*ADD D");
        initMem(0x0506, { 0xDD,0x83 });
        lines = disassembler_.disassembleForward(0x0506, memory_, 1);
        verifyLine(lines[0], 0x0506, { 0xDD,0x83 }, "*ADD E");
        initMem(0x0508, { 0xDD,0x84 });
        lines = disassembler_.disassembleForward(0x0508, memory_, 1);
        verifyLine(lines[0], 0x0508, { 0xDD,0x84 }, "*ADD IXH");
        initMem(0x050a, { 0xDD,0x85 });
        lines = disassembler_.disassembleForward(0x050a, memory_, 1);
        verifyLine(lines[0], 0x050a, { 0xDD,0x85 }, "*ADD IXL");
        initMem(0x050c, { 0xDD,0x86,0xDD });
        lines = disassembler_.disassembleForward(0x050c, memory_, 1);
        verifyLine(lines[0], 0x050c, { 0xDD,0x86,0xDD }, "ADD (IX-$23)");
        initMem(0x050e, { 0xDD,0x87 });
        lines = disassembler_.disassembleForward(0x050e, memory_, 1);
        verifyLine(lines[0], 0x050e, { 0xDD,0x87 }, "*ADD A");
        initMem(0x0510, { 0xDD,0x88 });
        lines = disassembler_.disassembleForward(0x0510, memory_, 1);
        verifyLine(lines[0], 0x0510, { 0xDD,0x88 }, "*ADC B");
        initMem(0x0512, { 0xDD,0x89 });
        lines = disassembler_.disassembleForward(0x0512, memory_, 1);
        verifyLine(lines[0], 0x0512, { 0xDD,0x89 }, "*ADC C");
        initMem(0x0514, { 0xDD,0x8A });
        lines = disassembler_.disassembleForward(0x0514, memory_, 1);
        verifyLine(lines[0], 0x0514, { 0xDD,0x8A }, "*ADC D");
        initMem(0x0516, { 0xDD,0x8B });
        lines = disassembler_.disassembleForward(0x0516, memory_, 1);
        verifyLine(lines[0], 0x0516, { 0xDD,0x8B }, "*ADC E");
        initMem(0x0518, { 0xDD,0x8C });
        lines = disassembler_.disassembleForward(0x0518, memory_, 1);
        verifyLine(lines[0], 0x0518, { 0xDD,0x8C }, "*ADC IXH");
        initMem(0x051a, { 0xDD,0x8D });
        lines = disassembler_.disassembleForward(0x051a, memory_, 1);
        verifyLine(lines[0], 0x051a, { 0xDD,0x8D }, "*ADC IXL");
        initMem(0x051c, { 0xDD,0x8E,0xDD });
        lines = disassembler_.disassembleForward(0x051c, memory_, 1);
        verifyLine(lines[0], 0x051c, { 0xDD,0x8E,0xDD }, "ADC (IX-$23)");
        initMem(0x051e, { 0xDD,0x8F });
        lines = disassembler_.disassembleForward(0x051e, memory_, 1);
        verifyLine(lines[0], 0x051e, { 0xDD,0x8F }, "*ADC A");
        initMem(0x0520, { 0xDD,0x90 });
        lines = disassembler_.disassembleForward(0x0520, memory_, 1);
        verifyLine(lines[0], 0x0520, { 0xDD,0x90 }, "*SUB B");
        initMem(0x0522, { 0xDD,0x91 });
        lines = disassembler_.disassembleForward(0x0522, memory_, 1);
        verifyLine(lines[0], 0x0522, { 0xDD,0x91 }, "*SUB C");
        initMem(0x0524, { 0xDD,0x92 });
        lines = disassembler_.disassembleForward(0x0524, memory_, 1);
        verifyLine(lines[0], 0x0524, { 0xDD,0x92 }, "*SUB D");
        initMem(0x0526, { 0xDD,0x93 });
        lines = disassembler_.disassembleForward(0x0526, memory_, 1);
        verifyLine(lines[0], 0x0526, { 0xDD,0x93 }, "*SUB E");
        initMem(0x0528, { 0xDD,0x94 });
        lines = disassembler_.disassembleForward(0x0528, memory_, 1);
        verifyLine(lines[0], 0x0528, { 0xDD,0x94 }, "*SUB IXH");
        initMem(0x052a, { 0xDD,0x95 });
        lines = disassembler_.disassembleForward(0x052a, memory_, 1);
        verifyLine(lines[0], 0x052a, { 0xDD,0x95 }, "*SUB IXL");
        initMem(0x052c, { 0xDD,0x96,0xDD });
        lines = disassembler_.disassembleForward(0x052c, memory_, 1);
        verifyLine(lines[0], 0x052c, { 0xDD,0x96,0xDD }, "SUB (IX-$23)");
        initMem(0x052e, { 0xDD,0x97 });
        lines = disassembler_.disassembleForward(0x052e, memory_, 1);
        verifyLine(lines[0], 0x052e, { 0xDD,0x97 }, "*SUB A");
        initMem(0x0530, { 0xDD,0x98 });
        lines = disassembler_.disassembleForward(0x0530, memory_, 1);
        verifyLine(lines[0], 0x0530, { 0xDD,0x98 }, "*SBC B");
        initMem(0x0532, { 0xDD,0x99 });
        lines = disassembler_.disassembleForward(0x0532, memory_, 1);
        verifyLine(lines[0], 0x0532, { 0xDD,0x99 }, "*SBC C");
        initMem(0x0534, { 0xDD,0x9A });
        lines = disassembler_.disassembleForward(0x0534, memory_, 1);
        verifyLine(lines[0], 0x0534, { 0xDD,0x9A }, "*SBC D");
        initMem(0x0536, { 0xDD,0x9B });
        lines = disassembler_.disassembleForward(0x0536, memory_, 1);
        verifyLine(lines[0], 0x0536, { 0xDD,0x9B }, "*SBC E");
        initMem(0x0538, { 0xDD,0x9C });
        lines = disassembler_.disassembleForward(0x0538, memory_, 1);
        verifyLine(lines[0], 0x0538, { 0xDD,0x9C }, "*SBC IXH");
        initMem(0x053a, { 0xDD,0x9D });
        lines = disassembler_.disassembleForward(0x053a, memory_, 1);
        verifyLine(lines[0], 0x053a, { 0xDD,0x9D }, "*SBC IXL");
        initMem(0x053c, { 0xDD,0x9E,0xDD });
        lines = disassembler_.disassembleForward(0x053c, memory_, 1);
        verifyLine(lines[0], 0x053c, { 0xDD,0x9E,0xDD }, "SBC (IX-$23)");
        initMem(0x053e, { 0xDD,0x9F });
        lines = disassembler_.disassembleForward(0x053e, memory_, 1);
        verifyLine(lines[0], 0x053e, { 0xDD,0x9F }, "*SBC A");
        initMem(0x0540, { 0xDD,0xA0 });
        lines = disassembler_.disassembleForward(0x0540, memory_, 1);
        verifyLine(lines[0], 0x0540, { 0xDD,0xA0 }, "*AND B");
        initMem(0x0542, { 0xDD,0xA1 });
        lines = disassembler_.disassembleForward(0x0542, memory_, 1);
        verifyLine(lines[0], 0x0542, { 0xDD,0xA1 }, "*AND C");
        initMem(0x0544, { 0xDD,0xA2 });
        lines = disassembler_.disassembleForward(0x0544, memory_, 1);
        verifyLine(lines[0], 0x0544, { 0xDD,0xA2 }, "*AND D");
        initMem(0x0546, { 0xDD,0xA3 });
        lines = disassembler_.disassembleForward(0x0546, memory_, 1);
        verifyLine(lines[0], 0x0546, { 0xDD,0xA3 }, "*AND E");
        initMem(0x0548, { 0xDD,0xA4 });
        lines = disassembler_.disassembleForward(0x0548, memory_, 1);
        verifyLine(lines[0], 0x0548, { 0xDD,0xA4 }, "*AND IXH");
        initMem(0x054a, { 0xDD,0xA5 });
        lines = disassembler_.disassembleForward(0x054a, memory_, 1);
        verifyLine(lines[0], 0x054a, { 0xDD,0xA5 }, "*AND IXL");
        initMem(0x054c, { 0xDD,0xA6,0xDD });
        lines = disassembler_.disassembleForward(0x054c, memory_, 1);
        verifyLine(lines[0], 0x054c, { 0xDD,0xA6,0xDD }, "AND (IX-$23)");
        initMem(0x054e, { 0xDD,0xA7 });
        lines = disassembler_.disassembleForward(0x054e, memory_, 1);
        verifyLine(lines[0], 0x054e, { 0xDD,0xA7 }, "*AND A");
        initMem(0x0550, { 0xDD,0xA8 });
        lines = disassembler_.disassembleForward(0x0550, memory_, 1);
        verifyLine(lines[0], 0x0550, { 0xDD,0xA8 }, "*XOR B");
        initMem(0x0552, { 0xDD,0xA9 });
        lines = disassembler_.disassembleForward(0x0552, memory_, 1);
        verifyLine(lines[0], 0x0552, { 0xDD,0xA9 }, "*XOR C");
        initMem(0x0554, { 0xDD,0xAA });
        lines = disassembler_.disassembleForward(0x0554, memory_, 1);
        verifyLine(lines[0], 0x0554, { 0xDD,0xAA }, "*XOR D");
        initMem(0x0556, { 0xDD,0xAB });
        lines = disassembler_.disassembleForward(0x0556, memory_, 1);
        verifyLine(lines[0], 0x0556, { 0xDD,0xAB }, "*XOR E");
        initMem(0x0558, { 0xDD,0xAC });
        lines = disassembler_.disassembleForward(0x0558, memory_, 1);
        verifyLine(lines[0], 0x0558, { 0xDD,0xAC }, "*XOR IXH");
        initMem(0x055a, { 0xDD,0xAD });
        lines = disassembler_.disassembleForward(0x055a, memory_, 1);
        verifyLine(lines[0], 0x055a, { 0xDD,0xAD }, "*XOR IXL");
        initMem(0x055c, { 0xDD,0xAE,0xDD });
        lines = disassembler_.disassembleForward(0x055c, memory_, 1);
        verifyLine(lines[0], 0x055c, { 0xDD,0xAE,0xDD }, "XOR (IX-$23)");
        initMem(0x055e, { 0xDD,0xAF });
        lines = disassembler_.disassembleForward(0x055e, memory_, 1);
        verifyLine(lines[0], 0x055e, { 0xDD,0xAF }, "*XOR A");
        initMem(0x0560, { 0xDD,0xB0 });
        lines = disassembler_.disassembleForward(0x0560, memory_, 1);
        verifyLine(lines[0], 0x0560, { 0xDD,0xB0 }, "*OR B");
        initMem(0x0562, { 0xDD,0xB1 });
        lines = disassembler_.disassembleForward(0x0562, memory_, 1);
        verifyLine(lines[0], 0x0562, { 0xDD,0xB1 }, "*OR C");
        initMem(0x0564, { 0xDD,0xB2 });
        lines = disassembler_.disassembleForward(0x0564, memory_, 1);
        verifyLine(lines[0], 0x0564, { 0xDD,0xB2 }, "*OR D");
        initMem(0x0566, { 0xDD,0xB3 });
        lines = disassembler_.disassembleForward(0x0566, memory_, 1);
        verifyLine(lines[0], 0x0566, { 0xDD,0xB3 }, "*OR E");
        initMem(0x0568, { 0xDD,0xB4 });
        lines = disassembler_.disassembleForward(0x0568, memory_, 1);
        verifyLine(lines[0], 0x0568, { 0xDD,0xB4 }, "*OR IXH");
        initMem(0x056a, { 0xDD,0xB5 });
        lines = disassembler_.disassembleForward(0x056a, memory_, 1);
        verifyLine(lines[0], 0x056a, { 0xDD,0xB5 }, "*OR IXL");
        initMem(0x056c, { 0xDD,0xB6,0xDD });
        lines = disassembler_.disassembleForward(0x056c, memory_, 1);
        verifyLine(lines[0], 0x056c, { 0xDD,0xB6,0xDD }, "OR (IX-$23)");
        initMem(0x056e, { 0xDD,0xB7 });
        lines = disassembler_.disassembleForward(0x056e, memory_, 1);
        verifyLine(lines[0], 0x056e, { 0xDD,0xB7 }, "*OR A");
        initMem(0x0570, { 0xDD,0xB8 });
        lines = disassembler_.disassembleForward(0x0570, memory_, 1);
        verifyLine(lines[0], 0x0570, { 0xDD,0xB8 }, "*CP B");
        initMem(0x0572, { 0xDD,0xB9 });
        lines = disassembler_.disassembleForward(0x0572, memory_, 1);
        verifyLine(lines[0], 0x0572, { 0xDD,0xB9 }, "*CP C");
        initMem(0x0574, { 0xDD,0xBA });
        lines = disassembler_.disassembleForward(0x0574, memory_, 1);
        verifyLine(lines[0], 0x0574, { 0xDD,0xBA }, "*CP D");
        initMem(0x0576, { 0xDD,0xBB });
        lines = disassembler_.disassembleForward(0x0576, memory_, 1);
        verifyLine(lines[0], 0x0576, { 0xDD,0xBB }, "*CP E");
        initMem(0x0578, { 0xDD,0xBC });
        lines = disassembler_.disassembleForward(0x0578, memory_, 1);
        verifyLine(lines[0], 0x0578, { 0xDD,0xBC }, "*CP IXH");
        initMem(0x057a, { 0xDD,0xBD });
        lines = disassembler_.disassembleForward(0x057a, memory_, 1);
        verifyLine(lines[0], 0x057a, { 0xDD,0xBD }, "*CP IXL");
        initMem(0x057c, { 0xDD,0xBE,0xDD });
        lines = disassembler_.disassembleForward(0x057c, memory_, 1);
        verifyLine(lines[0], 0x057c, { 0xDD,0xBE,0xDD }, "CP (IX-$23)");
        initMem(0x057e, { 0xDD,0xBF });
        lines = disassembler_.disassembleForward(0x057e, memory_, 1);
        verifyLine(lines[0], 0x057e, { 0xDD,0xBF }, "*CP A");
        initMem(0x0580, { 0xDD,0xC0 });
        lines = disassembler_.disassembleForward(0x0580, memory_, 1);
        verifyLine(lines[0], 0x0580, { 0xDD,0xC0 }, "*RET NZ");
        initMem(0x0582, { 0xDD,0xC1 });
        lines = disassembler_.disassembleForward(0x0582, memory_, 1);
        verifyLine(lines[0], 0x0582, { 0xDD,0xC1 }, "*POP BC");
        initMem(0x0584, { 0xDD,0xC2,0xDD,0xC3 });
        lines = disassembler_.disassembleForward(0x0584, memory_, 1);
        verifyLine(lines[0], 0x0584, { 0xDD,0xC2,0xDD,0xC3 }, "*JP NZ, $C3DD");
        initMem(0x0586, { 0xDD,0xC3,0xDD,0xC4 });
        lines = disassembler_.disassembleForward(0x0586, memory_, 1);
        verifyLine(lines[0], 0x0586, { 0xDD,0xC3,0xDD,0xC4 }, "*JP $C4DD");
        initMem(0x0588, { 0xDD,0xC4,0xDD,0xC5 });
        lines = disassembler_.disassembleForward(0x0588, memory_, 1);
        verifyLine(lines[0], 0x0588, { 0xDD,0xC4,0xDD,0xC5 }, "*CALL NZ, $C5DD");
        initMem(0x058a, { 0xDD,0xC5 });
        lines = disassembler_.disassembleForward(0x058a, memory_, 1);
        verifyLine(lines[0], 0x058a, { 0xDD,0xC5 }, "*PUSH BC");
        initMem(0x058c, { 0xDD,0xC6,0xDD });
        lines = disassembler_.disassembleForward(0x058c, memory_, 1);
        verifyLine(lines[0], 0x058c, { 0xDD,0xC6,0xDD }, "*ADD #$DD");
        initMem(0x058e, { 0xDD,0xC7 });
        lines = disassembler_.disassembleForward(0x058e, memory_, 1);
        verifyLine(lines[0], 0x058e, { 0xDD,0xC7 }, "*RST 00");
        initMem(0x0590, { 0xDD,0xC8 });
        lines = disassembler_.disassembleForward(0x0590, memory_, 1);
        verifyLine(lines[0], 0x0590, { 0xDD,0xC8 }, "*RET Z");
        initMem(0x0592, { 0xDD,0xC9 });
        lines = disassembler_.disassembleForward(0x0592, memory_, 1);
        verifyLine(lines[0], 0x0592, { 0xDD,0xC9 }, "*RET");
        initMem(0x0594, { 0xDD,0xCA,0xDD,0xCB });
        lines = disassembler_.disassembleForward(0x0594, memory_, 1);
        verifyLine(lines[0], 0x0594, { 0xDD,0xCA,0xDD,0xCB }, "*JP Z, $CBDD");
        initMem(0x0598, { 0xDD,0xCC,0xDD,0xCD });
        lines = disassembler_.disassembleForward(0x0598, memory_, 1);
        verifyLine(lines[0], 0x0598, { 0xDD,0xCC,0xDD,0xCD }, "*CALL Z, $CDDD");
        initMem(0x059a, { 0xDD,0xCD,0xDD,0xCE });
        lines = disassembler_.disassembleForward(0x059a, memory_, 1);
        verifyLine(lines[0], 0x059a, { 0xDD,0xCD,0xDD,0xCE }, "*CALL $CEDD");
        initMem(0x059c, { 0xDD,0xCE,0xDD });
        lines = disassembler_.disassembleForward(0x059c, memory_, 1);
        verifyLine(lines[0], 0x059c, { 0xDD,0xCE,0xDD }, "*ADC #$DD");
        initMem(0x059e, { 0xDD,0xCF });
        lines = disassembler_.disassembleForward(0x059e, memory_, 1);
        verifyLine(lines[0], 0x059e, { 0xDD,0xCF }, "*RST 08");
        initMem(0x05a0, { 0xDD,0xD0 });
        lines = disassembler_.disassembleForward(0x05a0, memory_, 1);
        verifyLine(lines[0], 0x05a0, { 0xDD,0xD0 }, "*RET NC");
        initMem(0x05a2, { 0xDD,0xD1 });
        lines = disassembler_.disassembleForward(0x05a2, memory_, 1);
        verifyLine(lines[0], 0x05a2, { 0xDD,0xD1 }, "*POP DE");
        initMem(0x05a4, { 0xDD,0xD2,0xDD,0xD3 });
        lines = disassembler_.disassembleForward(0x05a4, memory_, 1);
        verifyLine(lines[0], 0x05a4, { 0xDD,0xD2,0xDD,0xD3 }, "*JP NC, $D3DD");
        initMem(0x05a6, { 0xDD,0xD3,0xDD });
        lines = disassembler_.disassembleForward(0x05a6, memory_, 1);
        verifyLine(lines[0], 0x05a6, { 0xDD,0xD3,0xDD }, "*OUTA $DD");
        initMem(0x05a8, { 0xDD,0xD4,0xDD,0xD5 });
        lines = disassembler_.disassembleForward(0x05a8, memory_, 1);
        verifyLine(lines[0], 0x05a8, { 0xDD,0xD4,0xDD,0xD5 }, "*CALL NC, $D5DD");
        initMem(0x05aa, { 0xDD,0xD5 });
        lines = disassembler_.disassembleForward(0x05aa, memory_, 1);
        verifyLine(lines[0], 0x05aa, { 0xDD,0xD5 }, "*PUSH DE");
        initMem(0x05ac, { 0xDD,0xD6,0xDD });
        lines = disassembler_.disassembleForward(0x05ac, memory_, 1);
        verifyLine(lines[0], 0x05ac, { 0xDD,0xD6,0xDD }, "*SUB #$DD");
        initMem(0x05ae, { 0xDD,0xD7 });
        lines = disassembler_.disassembleForward(0x05ae, memory_, 1);
        verifyLine(lines[0], 0x05ae, { 0xDD,0xD7 }, "*RST 10");
        initMem(0x05b0, { 0xDD,0xD8 });
        lines = disassembler_.disassembleForward(0x05b0, memory_, 1);
        verifyLine(lines[0], 0x05b0, { 0xDD,0xD8 }, "*RET C");
        initMem(0x05b2, { 0xDD,0xD9 });
        lines = disassembler_.disassembleForward(0x05b2, memory_, 1);
        verifyLine(lines[0], 0x05b2, { 0xDD,0xD9 }, "*EXX");
        initMem(0x05b4, { 0xDD,0xDA,0xDD,0xDB });
        lines = disassembler_.disassembleForward(0x05b4, memory_, 1);
        verifyLine(lines[0], 0x05b4, { 0xDD,0xDA,0xDD,0xDB }, "*JP C, $DBDD");
        initMem(0x05b6, { 0xDD,0xDB,0xDD });
        lines = disassembler_.disassembleForward(0x05b6, memory_, 1);
        verifyLine(lines[0], 0x05b6, { 0xDD,0xDB,0xDD }, "*INA $DD");
        initMem(0x05b8, { 0xDD,0xDC,0xDD,0xDD });
        lines = disassembler_.disassembleForward(0x05b8, memory_, 1);
        verifyLine(lines[0], 0x05b8, { 0xDD,0xDC,0xDD,0xDD }, "*CALL C, $DDDD");
        initMem(0x05ba, { 0xDD,0xDD,0xDD });
        lines = disassembler_.disassembleForward(0x05ba, memory_, 1);
        verifyLine(lines[0], 0x05ba, { 0xDD,0xDD,0xDD }, "*NOP #$DD");
        initMem(0x05bc, { 0xDD,0xDE,0xDD });
        lines = disassembler_.disassembleForward(0x05bc, memory_, 1);
        verifyLine(lines[0], 0x05bc, { 0xDD,0xDE,0xDD }, "*SBC #$DD");
        initMem(0x05be, { 0xDD,0xDF });
        lines = disassembler_.disassembleForward(0x05be, memory_, 1);
        verifyLine(lines[0], 0x05be, { 0xDD,0xDF }, "*RST 18");
        initMem(0x05c0, { 0xDD,0xE0 });
        lines = disassembler_.disassembleForward(0x05c0, memory_, 1);
        verifyLine(lines[0], 0x05c0, { 0xDD,0xE0 }, "*RET PO");
        initMem(0x05c2, { 0xDD,0xE1 });
        lines = disassembler_.disassembleForward(0x05c2, memory_, 1);
        verifyLine(lines[0], 0x05c2, { 0xDD,0xE1 }, "POP IX");
        initMem(0x05c4, { 0xDD,0xE2,0xDD,0xE3 });
        lines = disassembler_.disassembleForward(0x05c4, memory_, 1);
        verifyLine(lines[0], 0x05c4, { 0xDD,0xE2,0xDD,0xE3 }, "*JP PO, $E3DD");
        initMem(0x05c6, { 0xDD,0xE3 });
        lines = disassembler_.disassembleForward(0x05c6, memory_, 1);
        verifyLine(lines[0], 0x05c6, { 0xDD,0xE3 }, "EX (SP),IX");
        initMem(0x05c8, { 0xDD,0xE4,0xDD,0xE5 });
        lines = disassembler_.disassembleForward(0x05c8, memory_, 1);
        verifyLine(lines[0], 0x05c8, { 0xDD,0xE4,0xDD,0xE5 }, "*CALL PO, $E5DD");
        initMem(0x05ca, { 0xDD,0xE5 });
        lines = disassembler_.disassembleForward(0x05ca, memory_, 1);
        verifyLine(lines[0], 0x05ca, { 0xDD,0xE5 }, "PUSH IX");
        initMem(0x05cc, { 0xDD,0xE6,0xDD });
        lines = disassembler_.disassembleForward(0x05cc, memory_, 1);
        verifyLine(lines[0], 0x05cc, { 0xDD,0xE6,0xDD }, "*AND #$DD");
        initMem(0x05ce, { 0xDD,0xE7 });
        lines = disassembler_.disassembleForward(0x05ce, memory_, 1);
        verifyLine(lines[0], 0x05ce, { 0xDD,0xE7 }, "*RST 20");
        initMem(0x05d0, { 0xDD,0xE8 });
        lines = disassembler_.disassembleForward(0x05d0, memory_, 1);
        verifyLine(lines[0], 0x05d0, { 0xDD,0xE8 }, "*RET PE");
        initMem(0x05d2, { 0xDD,0xE9 });
        lines = disassembler_.disassembleForward(0x05d2, memory_, 1);
        verifyLine(lines[0], 0x05d2, { 0xDD,0xE9 }, "JP (IX)");
        initMem(0x05d4, { 0xDD,0xEA,0xDD,0xEB });
        lines = disassembler_.disassembleForward(0x05d4, memory_, 1);
        verifyLine(lines[0], 0x05d4, { 0xDD,0xEA,0xDD,0xEB }, "*JP PE, $EBDD");
        initMem(0x05d6, { 0xDD,0xEB });
        lines = disassembler_.disassembleForward(0x05d6, memory_, 1);
        verifyLine(lines[0], 0x05d6, { 0xDD,0xEB }, "*EX DE,HL");
        initMem(0x05d8, { 0xDD,0xEC,0xDD,0xED });
        lines = disassembler_.disassembleForward(0x05d8, memory_, 1);
        verifyLine(lines[0], 0x05d8, { 0xDD,0xEC,0xDD,0xED }, "*CALL PE, $EDDD");
        initMem(0x05da, { 0xDD,0xED,0xDD });
        lines = disassembler_.disassembleForward(0x05da, memory_, 1);
        verifyLine(lines[0], 0x05da, { 0xDD,0xED,0xDD }, "*PFX_DDED #$DD");
        initMem(0x05dc, { 0xDD,0xEE,0xDD });
        lines = disassembler_.disassembleForward(0x05dc, memory_, 1);
        verifyLine(lines[0], 0x05dc, { 0xDD,0xEE,0xDD }, "*XOR #$DD");
        initMem(0x05de, { 0xDD,0xEF });
        lines = disassembler_.disassembleForward(0x05de, memory_, 1);
        verifyLine(lines[0], 0x05de, { 0xDD,0xEF }, "*RST 28");
        initMem(0x05e0, { 0xDD,0xF0 });
        lines = disassembler_.disassembleForward(0x05e0, memory_, 1);
        verifyLine(lines[0], 0x05e0, { 0xDD,0xF0 }, "*RET P");
        initMem(0x05e2, { 0xDD,0xF1 });
        lines = disassembler_.disassembleForward(0x05e2, memory_, 1);
        verifyLine(lines[0], 0x05e2, { 0xDD,0xF1 }, "*POP AF");
        initMem(0x05e4, { 0xDD,0xF2,0xDD,0xF3 });
        lines = disassembler_.disassembleForward(0x05e4, memory_, 1);
        verifyLine(lines[0], 0x05e4, { 0xDD,0xF2,0xDD,0xF3 }, "*JP P, $F3DD");
        initMem(0x05e6, { 0xDD,0xF3 });
        lines = disassembler_.disassembleForward(0x05e6, memory_, 1);
        verifyLine(lines[0], 0x05e6, { 0xDD,0xF3 }, "*DI");
        initMem(0x05e8, { 0xDD,0xF4,0xDD,0xF5 });
        lines = disassembler_.disassembleForward(0x05e8, memory_, 1);
        verifyLine(lines[0], 0x05e8, { 0xDD,0xF4,0xDD,0xF5 }, "*CALL P, $F5DD");
        initMem(0x05ea, { 0xDD,0xF5 });
        lines = disassembler_.disassembleForward(0x05ea, memory_, 1);
        verifyLine(lines[0], 0x05ea, { 0xDD,0xF5 }, "*PUSH AF");
        initMem(0x05ec, { 0xDD,0xF6,0xDD });
        lines = disassembler_.disassembleForward(0x05ec, memory_, 1);
        verifyLine(lines[0], 0x05ec, { 0xDD,0xF6,0xDD }, "*OR #$DD");
        initMem(0x05ee, { 0xDD,0xF7 });
        lines = disassembler_.disassembleForward(0x05ee, memory_, 1);
        verifyLine(lines[0], 0x05ee, { 0xDD,0xF7 }, "*RST 30");
        initMem(0x05f0, { 0xDD,0xF8 });
        lines = disassembler_.disassembleForward(0x05f0, memory_, 1);
        verifyLine(lines[0], 0x05f0, { 0xDD,0xF8 }, "*RET M");
        initMem(0x05f2, { 0xDD,0xF9 });
        lines = disassembler_.disassembleForward(0x05f2, memory_, 1);
        verifyLine(lines[0], 0x05f2, { 0xDD,0xF9 }, "LD SP,IX");
        initMem(0x05f4, { 0xDD,0xFA,0xDD,0xFB });
        lines = disassembler_.disassembleForward(0x05f4, memory_, 1);
        verifyLine(lines[0], 0x05f4, { 0xDD,0xFA,0xDD,0xFB }, "*JP M, $FBDD");
        initMem(0x05f6, { 0xDD,0xFB });
        lines = disassembler_.disassembleForward(0x05f6, memory_, 1);
        verifyLine(lines[0], 0x05f6, { 0xDD,0xFB }, "*EI");
        initMem(0x05f8, { 0xDD,0xFC,0xDD,0xFD });
        lines = disassembler_.disassembleForward(0x05f8, memory_, 1);
        verifyLine(lines[0], 0x05f8, { 0xDD,0xFC,0xDD,0xFD }, "*CALL M, $FDDD");
        initMem(0x05fa, { 0xDD,0xFD,0xDD });
        lines = disassembler_.disassembleForward(0x05fa, memory_, 1);
        verifyLine(lines[0], 0x05fa, { 0xDD,0xFD,0xDD }, "*NOP #$DD");
        initMem(0x05fc, { 0xDD,0xFE,0xDD });
        lines = disassembler_.disassembleForward(0x05fc, memory_, 1);
        verifyLine(lines[0], 0x05fc, { 0xDD,0xFE,0xDD }, "*CP #$DD");
        initMem(0x05fe, { 0xDD,0xFF });
        lines = disassembler_.disassembleForward(0x05fe, memory_, 1);
        verifyLine(lines[0], 0x05fe, { 0xDD,0xFF }, "*RST 38");
    }

    void TestDisassembleForward_PrefixED() {
        initMem(0x0400, { 0xED,0x00 });
        auto lines = disassembler_.disassembleForward(0x0400, memory_, 1);
        verifyLine(lines[0], 0x0400, { 0xED,0x00 }, "*NOP");
        initMem(0x0402, { 0xED,0x01 });
        lines = disassembler_.disassembleForward(0x0402, memory_, 1);
        verifyLine(lines[0], 0x0402, { 0xED,0x01 }, "???");
        initMem(0x0404, { 0xED,0x02 });
        lines = disassembler_.disassembleForward(0x0404, memory_, 1);
        verifyLine(lines[0], 0x0404, { 0xED,0x02 }, "???");
        initMem(0x0406, { 0xED,0x03 });
        lines = disassembler_.disassembleForward(0x0406, memory_, 1);
        verifyLine(lines[0], 0x0406, { 0xED,0x03 }, "???");
        initMem(0x0408, { 0xED,0x04 });
        lines = disassembler_.disassembleForward(0x0408, memory_, 1);
        verifyLine(lines[0], 0x0408, { 0xED,0x04 }, "???");
        initMem(0x040a, { 0xED,0x05 });
        lines = disassembler_.disassembleForward(0x040a, memory_, 1);
        verifyLine(lines[0], 0x040a, { 0xED,0x05 }, "???");
        initMem(0x040c, { 0xED,0x06 });
        lines = disassembler_.disassembleForward(0x040c, memory_, 1);
        verifyLine(lines[0], 0x040c, { 0xED,0x06 }, "???");
        initMem(0x040e, { 0xED,0x07 });
        lines = disassembler_.disassembleForward(0x040e, memory_, 1);
        verifyLine(lines[0], 0x040e, { 0xED,0x07 }, "???");
        initMem(0x0410, { 0xED,0x08 });
        lines = disassembler_.disassembleForward(0x0410, memory_, 1);
        verifyLine(lines[0], 0x0410, { 0xED,0x08 }, "???");
        initMem(0x0412, { 0xED,0x09 });
        lines = disassembler_.disassembleForward(0x0412, memory_, 1);
        verifyLine(lines[0], 0x0412, { 0xED,0x09 }, "???");
        initMem(0x0414, { 0xED,0x0A });
        lines = disassembler_.disassembleForward(0x0414, memory_, 1);
        verifyLine(lines[0], 0x0414, { 0xED,0x0A }, "???");
        initMem(0x0416, { 0xED,0x0B });
        lines = disassembler_.disassembleForward(0x0416, memory_, 1);
        verifyLine(lines[0], 0x0416, { 0xED,0x0B }, "???");
        initMem(0x0418, { 0xED,0x0C });
        lines = disassembler_.disassembleForward(0x0418, memory_, 1);
        verifyLine(lines[0], 0x0418, { 0xED,0x0C }, "???");
        initMem(0x041a, { 0xED,0x0D });
        lines = disassembler_.disassembleForward(0x041a, memory_, 1);
        verifyLine(lines[0], 0x041a, { 0xED,0x0D }, "???");
        initMem(0x041c, { 0xED,0x0E });
        lines = disassembler_.disassembleForward(0x041c, memory_, 1);
        verifyLine(lines[0], 0x041c, { 0xED,0x0E }, "???");
        initMem(0x041e, { 0xED,0x0F });
        lines = disassembler_.disassembleForward(0x041e, memory_, 1);
        verifyLine(lines[0], 0x041e, { 0xED,0x0F }, "???");
        initMem(0x0420, { 0xED,0x10 });
        lines = disassembler_.disassembleForward(0x0420, memory_, 1);
        verifyLine(lines[0], 0x0420, { 0xED,0x10 }, "???");
        initMem(0x0422, { 0xED,0x11 });
        lines = disassembler_.disassembleForward(0x0422, memory_, 1);
        verifyLine(lines[0], 0x0422, { 0xED,0x11 }, "???");
        initMem(0x0424, { 0xED,0x12 });
        lines = disassembler_.disassembleForward(0x0424, memory_, 1);
        verifyLine(lines[0], 0x0424, { 0xED,0x12 }, "???");
        initMem(0x0426, { 0xED,0x13 });
        lines = disassembler_.disassembleForward(0x0426, memory_, 1);
        verifyLine(lines[0], 0x0426, { 0xED,0x13 }, "???");
        initMem(0x0428, { 0xED,0x14 });
        lines = disassembler_.disassembleForward(0x0428, memory_, 1);
        verifyLine(lines[0], 0x0428, { 0xED,0x14 }, "???");
        initMem(0x042a, { 0xED,0x15 });
        lines = disassembler_.disassembleForward(0x042a, memory_, 1);
        verifyLine(lines[0], 0x042a, { 0xED,0x15 }, "???");
        initMem(0x042c, { 0xED,0x16 });
        lines = disassembler_.disassembleForward(0x042c, memory_, 1);
        verifyLine(lines[0], 0x042c, { 0xED,0x16 }, "???");
        initMem(0x042e, { 0xED,0x17 });
        lines = disassembler_.disassembleForward(0x042e, memory_, 1);
        verifyLine(lines[0], 0x042e, { 0xED,0x17 }, "???");
        initMem(0x0430, { 0xED,0x18 });
        lines = disassembler_.disassembleForward(0x0430, memory_, 1);
        verifyLine(lines[0], 0x0430, { 0xED,0x18 }, "???");
        initMem(0x0432, { 0xED,0x19 });
        lines = disassembler_.disassembleForward(0x0432, memory_, 1);
        verifyLine(lines[0], 0x0432, { 0xED,0x19 }, "???");
        initMem(0x0434, { 0xED,0x1A });
        lines = disassembler_.disassembleForward(0x0434, memory_, 1);
        verifyLine(lines[0], 0x0434, { 0xED,0x1A }, "???");
        initMem(0x0436, { 0xED,0x1B });
        lines = disassembler_.disassembleForward(0x0436, memory_, 1);
        verifyLine(lines[0], 0x0436, { 0xED,0x1B }, "???");
        initMem(0x0438, { 0xED,0x1C });
        lines = disassembler_.disassembleForward(0x0438, memory_, 1);
        verifyLine(lines[0], 0x0438, { 0xED,0x1C }, "???");
        initMem(0x043a, { 0xED,0x1D });
        lines = disassembler_.disassembleForward(0x043a, memory_, 1);
        verifyLine(lines[0], 0x043a, { 0xED,0x1D }, "???");
        initMem(0x043c, { 0xED,0x1E });
        lines = disassembler_.disassembleForward(0x043c, memory_, 1);
        verifyLine(lines[0], 0x043c, { 0xED,0x1E }, "???");
        initMem(0x043e, { 0xED,0x1F });
        lines = disassembler_.disassembleForward(0x043e, memory_, 1);
        verifyLine(lines[0], 0x043e, { 0xED,0x1F }, "???");
        initMem(0x0440, { 0xED,0x20 });
        lines = disassembler_.disassembleForward(0x0440, memory_, 1);
        verifyLine(lines[0], 0x0440, { 0xED,0x20 }, "???");
        initMem(0x0442, { 0xED,0x21 });
        lines = disassembler_.disassembleForward(0x0442, memory_, 1);
        verifyLine(lines[0], 0x0442, { 0xED,0x21 }, "???");
        initMem(0x0444, { 0xED,0x22 });
        lines = disassembler_.disassembleForward(0x0444, memory_, 1);
        verifyLine(lines[0], 0x0444, { 0xED,0x22 }, "???");
        initMem(0x0446, { 0xED,0x23 });
        lines = disassembler_.disassembleForward(0x0446, memory_, 1);
        verifyLine(lines[0], 0x0446, { 0xED,0x23 }, "???");
        initMem(0x0448, { 0xED,0x24 });
        lines = disassembler_.disassembleForward(0x0448, memory_, 1);
        verifyLine(lines[0], 0x0448, { 0xED,0x24 }, "???");
        initMem(0x044a, { 0xED,0x25 });
        lines = disassembler_.disassembleForward(0x044a, memory_, 1);
        verifyLine(lines[0], 0x044a, { 0xED,0x25 }, "???");
        initMem(0x044c, { 0xED,0x26 });
        lines = disassembler_.disassembleForward(0x044c, memory_, 1);
        verifyLine(lines[0], 0x044c, { 0xED,0x26 }, "???");
        initMem(0x044e, { 0xED,0x27 });
        lines = disassembler_.disassembleForward(0x044e, memory_, 1);
        verifyLine(lines[0], 0x044e, { 0xED,0x27 }, "???");
        initMem(0x0450, { 0xED,0x28 });
        lines = disassembler_.disassembleForward(0x0450, memory_, 1);
        verifyLine(lines[0], 0x0450, { 0xED,0x28 }, "???");
        initMem(0x0452, { 0xED,0x29 });
        lines = disassembler_.disassembleForward(0x0452, memory_, 1);
        verifyLine(lines[0], 0x0452, { 0xED,0x29 }, "???");
        initMem(0x0454, { 0xED,0x2A });
        lines = disassembler_.disassembleForward(0x0454, memory_, 1);
        verifyLine(lines[0], 0x0454, { 0xED,0x2A }, "???");
        initMem(0x0456, { 0xED,0x2B });
        lines = disassembler_.disassembleForward(0x0456, memory_, 1);
        verifyLine(lines[0], 0x0456, { 0xED,0x2B }, "???");
        initMem(0x0458, { 0xED,0x2C });
        lines = disassembler_.disassembleForward(0x0458, memory_, 1);
        verifyLine(lines[0], 0x0458, { 0xED,0x2C }, "???");
        initMem(0x045a, { 0xED,0x2D });
        lines = disassembler_.disassembleForward(0x045a, memory_, 1);
        verifyLine(lines[0], 0x045a, { 0xED,0x2D }, "???");
        initMem(0x045c, { 0xED,0x2E });
        lines = disassembler_.disassembleForward(0x045c, memory_, 1);
        verifyLine(lines[0], 0x045c, { 0xED,0x2E }, "???");
        initMem(0x045e, { 0xED,0x2F });
        lines = disassembler_.disassembleForward(0x045e, memory_, 1);
        verifyLine(lines[0], 0x045e, { 0xED,0x2F }, "???");
        initMem(0x0460, { 0xED,0x30 });
        lines = disassembler_.disassembleForward(0x0460, memory_, 1);
        verifyLine(lines[0], 0x0460, { 0xED,0x30 }, "???");
        initMem(0x0462, { 0xED,0x31 });
        lines = disassembler_.disassembleForward(0x0462, memory_, 1);
        verifyLine(lines[0], 0x0462, { 0xED,0x31 }, "???");
        initMem(0x0464, { 0xED,0x32 });
        lines = disassembler_.disassembleForward(0x0464, memory_, 1);
        verifyLine(lines[0], 0x0464, { 0xED,0x32 }, "???");
        initMem(0x0466, { 0xED,0x33 });
        lines = disassembler_.disassembleForward(0x0466, memory_, 1);
        verifyLine(lines[0], 0x0466, { 0xED,0x33 }, "???");
        initMem(0x0468, { 0xED,0x34 });
        lines = disassembler_.disassembleForward(0x0468, memory_, 1);
        verifyLine(lines[0], 0x0468, { 0xED,0x34 }, "???");
        initMem(0x046a, { 0xED,0x35 });
        lines = disassembler_.disassembleForward(0x046a, memory_, 1);
        verifyLine(lines[0], 0x046a, { 0xED,0x35 }, "???");
        initMem(0x046c, { 0xED,0x36 });
        lines = disassembler_.disassembleForward(0x046c, memory_, 1);
        verifyLine(lines[0], 0x046c, { 0xED,0x36 }, "???");
        initMem(0x046e, { 0xED,0x37 });
        lines = disassembler_.disassembleForward(0x046e, memory_, 1);
        verifyLine(lines[0], 0x046e, { 0xED,0x37 }, "???");
        initMem(0x0470, { 0xED,0x38 });
        lines = disassembler_.disassembleForward(0x0470, memory_, 1);
        verifyLine(lines[0], 0x0470, { 0xED,0x38 }, "???");
        initMem(0x0472, { 0xED,0x39 });
        lines = disassembler_.disassembleForward(0x0472, memory_, 1);
        verifyLine(lines[0], 0x0472, { 0xED,0x39 }, "???");
        initMem(0x0474, { 0xED,0x3A });
        lines = disassembler_.disassembleForward(0x0474, memory_, 1);
        verifyLine(lines[0], 0x0474, { 0xED,0x3A }, "???");
        initMem(0x0476, { 0xED,0x3B });
        lines = disassembler_.disassembleForward(0x0476, memory_, 1);
        verifyLine(lines[0], 0x0476, { 0xED,0x3B }, "???");
        initMem(0x0478, { 0xED,0x3C });
        lines = disassembler_.disassembleForward(0x0478, memory_, 1);
        verifyLine(lines[0], 0x0478, { 0xED,0x3C }, "???");
        initMem(0x047a, { 0xED,0x3D });
        lines = disassembler_.disassembleForward(0x047a, memory_, 1);
        verifyLine(lines[0], 0x047a, { 0xED,0x3D }, "???");
        initMem(0x047c, { 0xED,0x3E });
        lines = disassembler_.disassembleForward(0x047c, memory_, 1);
        verifyLine(lines[0], 0x047c, { 0xED,0x3E }, "???");
        initMem(0x047e, { 0xED,0x3F });
        lines = disassembler_.disassembleForward(0x047e, memory_, 1);
        verifyLine(lines[0], 0x047e, { 0xED,0x3F }, "???");
        initMem(0x0480, { 0xED,0x40 });
        lines = disassembler_.disassembleForward(0x0480, memory_, 1);
        verifyLine(lines[0], 0x0480, { 0xED,0x40 }, "IN B,(C)");
        initMem(0x0482, { 0xED,0x41 });
        lines = disassembler_.disassembleForward(0x0482, memory_, 1);
        verifyLine(lines[0], 0x0482, { 0xED,0x41 }, "OUT (C),B");
        initMem(0x0484, { 0xED,0x42 });
        lines = disassembler_.disassembleForward(0x0484, memory_, 1);
        verifyLine(lines[0], 0x0484, { 0xED,0x42 }, "SBC HL,BC");
        initMem(0x0486, { 0xED,0x43,0xED,0x44 });
        lines = disassembler_.disassembleForward(0x0486, memory_, 1);
        verifyLine(lines[0], 0x0486, { 0xED,0x43,0xED,0x44 }, "LD ($44ED),BC");
        initMem(0x0488, { 0xED,0x44 });
        lines = disassembler_.disassembleForward(0x0488, memory_, 1);
        verifyLine(lines[0], 0x0488, { 0xED,0x44 }, "NEG");
        initMem(0x048a, { 0xED,0x45 });
        lines = disassembler_.disassembleForward(0x048a, memory_, 1);
        verifyLine(lines[0], 0x048a, { 0xED,0x45 }, "RETN");
        initMem(0x048c, { 0xED,0x46 });
        lines = disassembler_.disassembleForward(0x048c, memory_, 1);
        verifyLine(lines[0], 0x048c, { 0xED,0x46 }, "IM 0");
        initMem(0x048e, { 0xED,0x47 });
        lines = disassembler_.disassembleForward(0x048e, memory_, 1);
        verifyLine(lines[0], 0x048e, { 0xED,0x47 }, "LD I,A");
        initMem(0x0490, { 0xED,0x48 });
        lines = disassembler_.disassembleForward(0x0490, memory_, 1);
        verifyLine(lines[0], 0x0490, { 0xED,0x48 }, "IN C,(C)");
        initMem(0x0492, { 0xED,0x49 });
        lines = disassembler_.disassembleForward(0x0492, memory_, 1);
        verifyLine(lines[0], 0x0492, { 0xED,0x49 }, "OUT (C),C");
        initMem(0x0494, { 0xED,0x4A });
        lines = disassembler_.disassembleForward(0x0494, memory_, 1);
        verifyLine(lines[0], 0x0494, { 0xED,0x4A }, "ADC HL,BC");
        initMem(0x0496, { 0xED,0x4B,0xED,0x4C });
        lines = disassembler_.disassembleForward(0x0496, memory_, 1);
        verifyLine(lines[0], 0x0496, { 0xED,0x4B,0xED,0x4C }, "LD BC, ($4CED)");
        initMem(0x0498, { 0xED,0x4C });
        lines = disassembler_.disassembleForward(0x0498, memory_, 1);
        verifyLine(lines[0], 0x0498, { 0xED,0x4C }, "*NEG");
        initMem(0x049a, { 0xED,0x4D });
        lines = disassembler_.disassembleForward(0x049a, memory_, 1);
        verifyLine(lines[0], 0x049a, { 0xED,0x4D }, "RETI");
        initMem(0x049c, { 0xED,0x4E });
        lines = disassembler_.disassembleForward(0x049c, memory_, 1);
        verifyLine(lines[0], 0x049c, { 0xED,0x4E }, "*IM 0/1");
        initMem(0x049e, { 0xED,0x4F });
        lines = disassembler_.disassembleForward(0x049e, memory_, 1);
        verifyLine(lines[0], 0x049e, { 0xED,0x4F }, "LD R,A");
        initMem(0x04a0, { 0xED,0x50 });
        lines = disassembler_.disassembleForward(0x04a0, memory_, 1);
        verifyLine(lines[0], 0x04a0, { 0xED,0x50 }, "IN D,(C)");
        initMem(0x04a2, { 0xED,0x51 });
        lines = disassembler_.disassembleForward(0x04a2, memory_, 1);
        verifyLine(lines[0], 0x04a2, { 0xED,0x51 }, "OUT (C),D");
        initMem(0x04a4, { 0xED,0x52 });
        lines = disassembler_.disassembleForward(0x04a4, memory_, 1);
        verifyLine(lines[0], 0x04a4, { 0xED,0x52 }, "SBC HL,DE");
        initMem(0x04a6, { 0xED,0x53,0xED,0x54 });
        lines = disassembler_.disassembleForward(0x04a6, memory_, 1);
        verifyLine(lines[0], 0x04a6, { 0xED,0x53,0xED,0x54 }, "LD ($54ED),DE");
        initMem(0x04a8, { 0xED,0x54 });
        lines = disassembler_.disassembleForward(0x04a8, memory_, 1);
        verifyLine(lines[0], 0x04a8, { 0xED,0x54 }, "*NEG");
        initMem(0x04aa, { 0xED,0x55 });
        lines = disassembler_.disassembleForward(0x04aa, memory_, 1);
        verifyLine(lines[0], 0x04aa, { 0xED,0x55 }, "RETN");
        initMem(0x04ac, { 0xED,0x56 });
        lines = disassembler_.disassembleForward(0x04ac, memory_, 1);
        verifyLine(lines[0], 0x04ac, { 0xED,0x56 }, "IM 1");
        initMem(0x04ae, { 0xED,0x57 });
        lines = disassembler_.disassembleForward(0x04ae, memory_, 1);
        verifyLine(lines[0], 0x04ae, { 0xED,0x57 }, "LD A,I");
        initMem(0x04b0, { 0xED,0x58 });
        lines = disassembler_.disassembleForward(0x04b0, memory_, 1);
        verifyLine(lines[0], 0x04b0, { 0xED,0x58 }, "IN E,(C)");
        initMem(0x04b2, { 0xED,0x59 });
        lines = disassembler_.disassembleForward(0x04b2, memory_, 1);
        verifyLine(lines[0], 0x04b2, { 0xED,0x59 }, "OUT (C),E");
        initMem(0x04b4, { 0xED,0x5A });
        lines = disassembler_.disassembleForward(0x04b4, memory_, 1);
        verifyLine(lines[0], 0x04b4, { 0xED,0x5A }, "ADC HL,DE");
        initMem(0x04b6, { 0xED,0x5B,0xED,0x5C });
        lines = disassembler_.disassembleForward(0x04b6, memory_, 1);
        verifyLine(lines[0], 0x04b6, { 0xED,0x5B,0xED,0x5C }, "LD DE, ($5CED)");
        initMem(0x04b8, { 0xED,0x5C });
        lines = disassembler_.disassembleForward(0x04b8, memory_, 1);
        verifyLine(lines[0], 0x04b8, { 0xED,0x5C }, "*NEG");
        initMem(0x04ba, { 0xED,0x5D });
        lines = disassembler_.disassembleForward(0x04ba, memory_, 1);
        verifyLine(lines[0], 0x04ba, { 0xED,0x5D }, "RETN");
        initMem(0x04bc, { 0xED,0x5E });
        lines = disassembler_.disassembleForward(0x04bc, memory_, 1);
        verifyLine(lines[0], 0x04bc, { 0xED,0x5E }, "IM 2");
        initMem(0x04be, { 0xED,0x5F });
        lines = disassembler_.disassembleForward(0x04be, memory_, 1);
        verifyLine(lines[0], 0x04be, { 0xED,0x5F }, "LD A,R");
        initMem(0x04c0, { 0xED,0x60 });
        lines = disassembler_.disassembleForward(0x04c0, memory_, 1);
        verifyLine(lines[0], 0x04c0, { 0xED,0x60 }, "IN H,(C)");
        initMem(0x04c2, { 0xED,0x61 });
        lines = disassembler_.disassembleForward(0x04c2, memory_, 1);
        verifyLine(lines[0], 0x04c2, { 0xED,0x61 }, "OUT (C),H");
        initMem(0x04c4, { 0xED,0x62 });
        lines = disassembler_.disassembleForward(0x04c4, memory_, 1);
        verifyLine(lines[0], 0x04c4, { 0xED,0x62 }, "SBC HL,HL");
        initMem(0x04c6, { 0xED,0x63,0xED,0x64 });
        lines = disassembler_.disassembleForward(0x04c6, memory_, 1);
        verifyLine(lines[0], 0x04c6, { 0xED,0x63,0xED,0x64 }, "*LD ($64ED),HL");
        initMem(0x04c8, { 0xED,0x64 });
        lines = disassembler_.disassembleForward(0x04c8, memory_, 1);
        verifyLine(lines[0], 0x04c8, { 0xED,0x64 }, "*NEG");
        initMem(0x04ca, { 0xED,0x65 });
        lines = disassembler_.disassembleForward(0x04ca, memory_, 1);
        verifyLine(lines[0], 0x04ca, { 0xED,0x65 }, "RETN");
        initMem(0x04cc, { 0xED,0x66 });
        lines = disassembler_.disassembleForward(0x04cc, memory_, 1);
        verifyLine(lines[0], 0x04cc, { 0xED,0x66 }, "IM 0");
        initMem(0x04ce, { 0xED,0x67 });
        lines = disassembler_.disassembleForward(0x04ce, memory_, 1);
        verifyLine(lines[0], 0x04ce, { 0xED,0x67 }, "RRD");
        initMem(0x04d0, { 0xED,0x68 });
        lines = disassembler_.disassembleForward(0x04d0, memory_, 1);
        verifyLine(lines[0], 0x04d0, { 0xED,0x68 }, "IN L,(C)");
        initMem(0x04d2, { 0xED,0x69 });
        lines = disassembler_.disassembleForward(0x04d2, memory_, 1);
        verifyLine(lines[0], 0x04d2, { 0xED,0x69 }, "OUT (C),L");
        initMem(0x04d4, { 0xED,0x6A });
        lines = disassembler_.disassembleForward(0x04d4, memory_, 1);
        verifyLine(lines[0], 0x04d4, { 0xED,0x6A }, "ADC HL,HL");
        initMem(0x04d6, { 0xED,0x6B,0xED,0x6C });
        lines = disassembler_.disassembleForward(0x04d6, memory_, 1);
        verifyLine(lines[0], 0x04d6, { 0xED,0x6B,0xED,0x6C }, "*LD HL, ($6CED)");
        initMem(0x04d8, { 0xED,0x6C });
        lines = disassembler_.disassembleForward(0x04d8, memory_, 1);
        verifyLine(lines[0], 0x04d8, { 0xED,0x6C }, "*NEG");
        initMem(0x04da, { 0xED,0x6D });
        lines = disassembler_.disassembleForward(0x04da, memory_, 1);
        verifyLine(lines[0], 0x04da, { 0xED,0x6D }, "RETN");
        initMem(0x04dc, { 0xED,0x6E });
        lines = disassembler_.disassembleForward(0x04dc, memory_, 1);
        verifyLine(lines[0], 0x04dc, { 0xED,0x6E }, "*IM 0/1");
        initMem(0x04de, { 0xED,0x6F });
        lines = disassembler_.disassembleForward(0x04de, memory_, 1);
        verifyLine(lines[0], 0x04de, { 0xED,0x6F }, "RLD");
        initMem(0x04e0, { 0xED,0x70 });
        lines = disassembler_.disassembleForward(0x04e0, memory_, 1);
        verifyLine(lines[0], 0x04e0, { 0xED,0x70 }, "*IN (C)");
        initMem(0x04e2, { 0xED,0x71 });
        lines = disassembler_.disassembleForward(0x04e2, memory_, 1);
        verifyLine(lines[0], 0x04e2, { 0xED,0x71 }, "*OUT (C), 0");
        initMem(0x04e4, { 0xED,0x72 });
        lines = disassembler_.disassembleForward(0x04e4, memory_, 1);
        verifyLine(lines[0], 0x04e4, { 0xED,0x72 }, "SBC HL,SP");
        initMem(0x04e6, { 0xED,0x73,0xED,0x74 });
        lines = disassembler_.disassembleForward(0x04e6, memory_, 1);
        verifyLine(lines[0], 0x04e6, { 0xED,0x73,0xED,0x74 }, "LD ($74ED),SP");
        initMem(0x04e8, { 0xED,0x74 });
        lines = disassembler_.disassembleForward(0x04e8, memory_, 1);
        verifyLine(lines[0], 0x04e8, { 0xED,0x74 }, "*NEG");
        initMem(0x04ea, { 0xED,0x75 });
        lines = disassembler_.disassembleForward(0x04ea, memory_, 1);
        verifyLine(lines[0], 0x04ea, { 0xED,0x75 }, "RETN");
        initMem(0x04ec, { 0xED,0x76 });
        lines = disassembler_.disassembleForward(0x04ec, memory_, 1);
        verifyLine(lines[0], 0x04ec, { 0xED,0x76 }, "IM 1");
        initMem(0x04ee, { 0xED,0x77 });
        lines = disassembler_.disassembleForward(0x04ee, memory_, 1);
        verifyLine(lines[0], 0x04ee, { 0xED,0x77 }, "*NOP");
        initMem(0x04f0, { 0xED,0x78 });
        lines = disassembler_.disassembleForward(0x04f0, memory_, 1);
        verifyLine(lines[0], 0x04f0, { 0xED,0x78 }, "IN A,(C)");
        initMem(0x04f2, { 0xED,0x79 });
        lines = disassembler_.disassembleForward(0x04f2, memory_, 1);
        verifyLine(lines[0], 0x04f2, { 0xED,0x79 }, "OUT (C),A");
        initMem(0x04f4, { 0xED,0x7A });
        lines = disassembler_.disassembleForward(0x04f4, memory_, 1);
        verifyLine(lines[0], 0x04f4, { 0xED,0x7A }, "ADC HL,SP");
        initMem(0x04f6, { 0xED,0x7B,0xED,0x7C });
        lines = disassembler_.disassembleForward(0x04f6, memory_, 1);
        verifyLine(lines[0], 0x04f6, { 0xED,0x7B,0xED,0x7C }, "LD SP, ($7CED)");
        initMem(0x04f8, { 0xED,0x7C });
        lines = disassembler_.disassembleForward(0x04f8, memory_, 1);
        verifyLine(lines[0], 0x04f8, { 0xED,0x7C }, "*NEG");
        initMem(0x04fa, { 0xED,0x7D });
        lines = disassembler_.disassembleForward(0x04fa, memory_, 1);
        verifyLine(lines[0], 0x04fa, { 0xED,0x7D }, "RETN");
        initMem(0x04fc, { 0xED,0x7E });
        lines = disassembler_.disassembleForward(0x04fc, memory_, 1);
        verifyLine(lines[0], 0x04fc, { 0xED,0x7E }, "IM 2");
        initMem(0x04fe, { 0xED,0x7F });
        lines = disassembler_.disassembleForward(0x04fe, memory_, 1);
        verifyLine(lines[0], 0x04fe, { 0xED,0x7F }, "*NOP");
        initMem(0x0500, { 0xED,0x80 });
        lines = disassembler_.disassembleForward(0x0500, memory_, 1);
        verifyLine(lines[0], 0x0500, { 0xED,0x80 }, "???");
        initMem(0x0502, { 0xED,0x81 });
        lines = disassembler_.disassembleForward(0x0502, memory_, 1);
        verifyLine(lines[0], 0x0502, { 0xED,0x81 }, "???");
        initMem(0x0504, { 0xED,0x82 });
        lines = disassembler_.disassembleForward(0x0504, memory_, 1);
        verifyLine(lines[0], 0x0504, { 0xED,0x82 }, "???");
        initMem(0x0506, { 0xED,0x83 });
        lines = disassembler_.disassembleForward(0x0506, memory_, 1);
        verifyLine(lines[0], 0x0506, { 0xED,0x83 }, "???");
        initMem(0x0508, { 0xED,0x84 });
        lines = disassembler_.disassembleForward(0x0508, memory_, 1);
        verifyLine(lines[0], 0x0508, { 0xED,0x84 }, "???");
        initMem(0x050a, { 0xED,0x85 });
        lines = disassembler_.disassembleForward(0x050a, memory_, 1);
        verifyLine(lines[0], 0x050a, { 0xED,0x85 }, "???");
        initMem(0x050c, { 0xED,0x86 });
        lines = disassembler_.disassembleForward(0x050c, memory_, 1);
        verifyLine(lines[0], 0x050c, { 0xED,0x86 }, "???");
        initMem(0x050e, { 0xED,0x87 });
        lines = disassembler_.disassembleForward(0x050e, memory_, 1);
        verifyLine(lines[0], 0x050e, { 0xED,0x87 }, "???");
        initMem(0x0510, { 0xED,0x88 });
        lines = disassembler_.disassembleForward(0x0510, memory_, 1);
        verifyLine(lines[0], 0x0510, { 0xED,0x88 }, "???");
        initMem(0x0512, { 0xED,0x89 });
        lines = disassembler_.disassembleForward(0x0512, memory_, 1);
        verifyLine(lines[0], 0x0512, { 0xED,0x89 }, "???");
        initMem(0x0514, { 0xED,0x8A });
        lines = disassembler_.disassembleForward(0x0514, memory_, 1);
        verifyLine(lines[0], 0x0514, { 0xED,0x8A }, "???");
        initMem(0x0516, { 0xED,0x8B });
        lines = disassembler_.disassembleForward(0x0516, memory_, 1);
        verifyLine(lines[0], 0x0516, { 0xED,0x8B }, "???");
        initMem(0x0518, { 0xED,0x8C });
        lines = disassembler_.disassembleForward(0x0518, memory_, 1);
        verifyLine(lines[0], 0x0518, { 0xED,0x8C }, "???");
        initMem(0x051a, { 0xED,0x8D });
        lines = disassembler_.disassembleForward(0x051a, memory_, 1);
        verifyLine(lines[0], 0x051a, { 0xED,0x8D }, "???");
        initMem(0x051c, { 0xED,0x8E });
        lines = disassembler_.disassembleForward(0x051c, memory_, 1);
        verifyLine(lines[0], 0x051c, { 0xED,0x8E }, "???");
        initMem(0x051e, { 0xED,0x8F });
        lines = disassembler_.disassembleForward(0x051e, memory_, 1);
        verifyLine(lines[0], 0x051e, { 0xED,0x8F }, "???");
        initMem(0x0520, { 0xED,0x90 });
        lines = disassembler_.disassembleForward(0x0520, memory_, 1);
        verifyLine(lines[0], 0x0520, { 0xED,0x90 }, "???");
        initMem(0x0522, { 0xED,0x91 });
        lines = disassembler_.disassembleForward(0x0522, memory_, 1);
        verifyLine(lines[0], 0x0522, { 0xED,0x91 }, "???");
        initMem(0x0524, { 0xED,0x92 });
        lines = disassembler_.disassembleForward(0x0524, memory_, 1);
        verifyLine(lines[0], 0x0524, { 0xED,0x92 }, "???");
        initMem(0x0526, { 0xED,0x93 });
        lines = disassembler_.disassembleForward(0x0526, memory_, 1);
        verifyLine(lines[0], 0x0526, { 0xED,0x93 }, "???");
        initMem(0x0528, { 0xED,0x94 });
        lines = disassembler_.disassembleForward(0x0528, memory_, 1);
        verifyLine(lines[0], 0x0528, { 0xED,0x94 }, "???");
        initMem(0x052a, { 0xED,0x95 });
        lines = disassembler_.disassembleForward(0x052a, memory_, 1);
        verifyLine(lines[0], 0x052a, { 0xED,0x95 }, "???");
        initMem(0x052c, { 0xED,0x96 });
        lines = disassembler_.disassembleForward(0x052c, memory_, 1);
        verifyLine(lines[0], 0x052c, { 0xED,0x96 }, "???");
        initMem(0x052e, { 0xED,0x97 });
        lines = disassembler_.disassembleForward(0x052e, memory_, 1);
        verifyLine(lines[0], 0x052e, { 0xED,0x97 }, "???");
        initMem(0x0530, { 0xED,0x98 });
        lines = disassembler_.disassembleForward(0x0530, memory_, 1);
        verifyLine(lines[0], 0x0530, { 0xED,0x98 }, "???");
        initMem(0x0532, { 0xED,0x99 });
        lines = disassembler_.disassembleForward(0x0532, memory_, 1);
        verifyLine(lines[0], 0x0532, { 0xED,0x99 }, "???");
        initMem(0x0534, { 0xED,0x9A });
        lines = disassembler_.disassembleForward(0x0534, memory_, 1);
        verifyLine(lines[0], 0x0534, { 0xED,0x9A }, "???");
        initMem(0x0536, { 0xED,0x9B });
        lines = disassembler_.disassembleForward(0x0536, memory_, 1);
        verifyLine(lines[0], 0x0536, { 0xED,0x9B }, "???");
        initMem(0x0538, { 0xED,0x9C });
        lines = disassembler_.disassembleForward(0x0538, memory_, 1);
        verifyLine(lines[0], 0x0538, { 0xED,0x9C }, "???");
        initMem(0x053a, { 0xED,0x9D });
        lines = disassembler_.disassembleForward(0x053a, memory_, 1);
        verifyLine(lines[0], 0x053a, { 0xED,0x9D }, "???");
        initMem(0x053c, { 0xED,0x9E });
        lines = disassembler_.disassembleForward(0x053c, memory_, 1);
        verifyLine(lines[0], 0x053c, { 0xED,0x9E }, "???");
        initMem(0x053e, { 0xED,0x9F });
        lines = disassembler_.disassembleForward(0x053e, memory_, 1);
        verifyLine(lines[0], 0x053e, { 0xED,0x9F }, "???");
        initMem(0x0540, { 0xED,0xA0 });
        lines = disassembler_.disassembleForward(0x0540, memory_, 1);
        verifyLine(lines[0], 0x0540, { 0xED,0xA0 }, "LDI");
        initMem(0x0542, { 0xED,0xA1 });
        lines = disassembler_.disassembleForward(0x0542, memory_, 1);
        verifyLine(lines[0], 0x0542, { 0xED,0xA1 }, "CPI");
        initMem(0x0544, { 0xED,0xA2 });
        lines = disassembler_.disassembleForward(0x0544, memory_, 1);
        verifyLine(lines[0], 0x0544, { 0xED,0xA2 }, "INI");
        initMem(0x0546, { 0xED,0xA3 });
        lines = disassembler_.disassembleForward(0x0546, memory_, 1);
        verifyLine(lines[0], 0x0546, { 0xED,0xA3 }, "OUTI");
        initMem(0x0548, { 0xED,0xA4 });
        lines = disassembler_.disassembleForward(0x0548, memory_, 1);
        verifyLine(lines[0], 0x0548, { 0xED,0xA4 }, "???");
        initMem(0x054a, { 0xED,0xA5 });
        lines = disassembler_.disassembleForward(0x054a, memory_, 1);
        verifyLine(lines[0], 0x054a, { 0xED,0xA5 }, "???");
        initMem(0x054c, { 0xED,0xA6 });
        lines = disassembler_.disassembleForward(0x054c, memory_, 1);
        verifyLine(lines[0], 0x054c, { 0xED,0xA6 }, "???");
        initMem(0x054e, { 0xED,0xA7 });
        lines = disassembler_.disassembleForward(0x054e, memory_, 1);
        verifyLine(lines[0], 0x054e, { 0xED,0xA7 }, "???");
        initMem(0x0550, { 0xED,0xA8 });
        lines = disassembler_.disassembleForward(0x0550, memory_, 1);
        verifyLine(lines[0], 0x0550, { 0xED,0xA8 }, "LDD");
        initMem(0x0552, { 0xED,0xA9 });
        lines = disassembler_.disassembleForward(0x0552, memory_, 1);
        verifyLine(lines[0], 0x0552, { 0xED,0xA9 }, "CPD");
        initMem(0x0554, { 0xED,0xAA });
        lines = disassembler_.disassembleForward(0x0554, memory_, 1);
        verifyLine(lines[0], 0x0554, { 0xED,0xAA }, "IND");
        initMem(0x0556, { 0xED,0xAB });
        lines = disassembler_.disassembleForward(0x0556, memory_, 1);
        verifyLine(lines[0], 0x0556, { 0xED,0xAB }, "OUTD");
        initMem(0x0558, { 0xED,0xAC });
        lines = disassembler_.disassembleForward(0x0558, memory_, 1);
        verifyLine(lines[0], 0x0558, { 0xED,0xAC }, "???");
        initMem(0x055a, { 0xED,0xAD });
        lines = disassembler_.disassembleForward(0x055a, memory_, 1);
        verifyLine(lines[0], 0x055a, { 0xED,0xAD }, "???");
        initMem(0x055c, { 0xED,0xAE });
        lines = disassembler_.disassembleForward(0x055c, memory_, 1);
        verifyLine(lines[0], 0x055c, { 0xED,0xAE }, "???");
        initMem(0x055e, { 0xED,0xAF });
        lines = disassembler_.disassembleForward(0x055e, memory_, 1);
        verifyLine(lines[0], 0x055e, { 0xED,0xAF }, "???");
        initMem(0x0560, { 0xED,0xB0 });
        lines = disassembler_.disassembleForward(0x0560, memory_, 1);
        verifyLine(lines[0], 0x0560, { 0xED,0xB0 }, "LDIR");
        initMem(0x0562, { 0xED,0xB1 });
        lines = disassembler_.disassembleForward(0x0562, memory_, 1);
        verifyLine(lines[0], 0x0562, { 0xED,0xB1 }, "CPIR");
        initMem(0x0564, { 0xED,0xB2 });
        lines = disassembler_.disassembleForward(0x0564, memory_, 1);
        verifyLine(lines[0], 0x0564, { 0xED,0xB2 }, "INIR");
        initMem(0x0566, { 0xED,0xB3 });
        lines = disassembler_.disassembleForward(0x0566, memory_, 1);
        verifyLine(lines[0], 0x0566, { 0xED,0xB3 }, "OTIR");
        initMem(0x0568, { 0xED,0xB4 });
        lines = disassembler_.disassembleForward(0x0568, memory_, 1);
        verifyLine(lines[0], 0x0568, { 0xED,0xB4 }, "???");
        initMem(0x056a, { 0xED,0xB5 });
        lines = disassembler_.disassembleForward(0x056a, memory_, 1);
        verifyLine(lines[0], 0x056a, { 0xED,0xB5 }, "???");
        initMem(0x056c, { 0xED,0xB6 });
        lines = disassembler_.disassembleForward(0x056c, memory_, 1);
        verifyLine(lines[0], 0x056c, { 0xED,0xB6 }, "???");
        initMem(0x056e, { 0xED,0xB7 });
        lines = disassembler_.disassembleForward(0x056e, memory_, 1);
        verifyLine(lines[0], 0x056e, { 0xED,0xB7 }, "???");
        initMem(0x0570, { 0xED,0xB8 });
        lines = disassembler_.disassembleForward(0x0570, memory_, 1);
        verifyLine(lines[0], 0x0570, { 0xED,0xB8 }, "LDDR");
        initMem(0x0572, { 0xED,0xB9 });
        lines = disassembler_.disassembleForward(0x0572, memory_, 1);
        verifyLine(lines[0], 0x0572, { 0xED,0xB9 }, "CPDR");
        initMem(0x0574, { 0xED,0xBA });
        lines = disassembler_.disassembleForward(0x0574, memory_, 1);
        verifyLine(lines[0], 0x0574, { 0xED,0xBA }, "INDR");
        initMem(0x0576, { 0xED,0xBB });
        lines = disassembler_.disassembleForward(0x0576, memory_, 1);
        verifyLine(lines[0], 0x0576, { 0xED,0xBB }, "OTDR");
        initMem(0x0578, { 0xED,0xBC });
        lines = disassembler_.disassembleForward(0x0578, memory_, 1);
        verifyLine(lines[0], 0x0578, { 0xED,0xBC }, "???");
        initMem(0x057a, { 0xED,0xBD });
        lines = disassembler_.disassembleForward(0x057a, memory_, 1);
        verifyLine(lines[0], 0x057a, { 0xED,0xBD }, "???");
        initMem(0x057c, { 0xED,0xBE });
        lines = disassembler_.disassembleForward(0x057c, memory_, 1);
        verifyLine(lines[0], 0x057c, { 0xED,0xBE }, "???");
        initMem(0x057e, { 0xED,0xBF });
        lines = disassembler_.disassembleForward(0x057e, memory_, 1);
        verifyLine(lines[0], 0x057e, { 0xED,0xBF }, "???");
        initMem(0x0580, { 0xED,0xC0 });
        lines = disassembler_.disassembleForward(0x0580, memory_, 1);
        verifyLine(lines[0], 0x0580, { 0xED,0xC0 }, "???");
        initMem(0x0582, { 0xED,0xC1 });
        lines = disassembler_.disassembleForward(0x0582, memory_, 1);
        verifyLine(lines[0], 0x0582, { 0xED,0xC1 }, "???");
        initMem(0x0584, { 0xED,0xC2 });
        lines = disassembler_.disassembleForward(0x0584, memory_, 1);
        verifyLine(lines[0], 0x0584, { 0xED,0xC2 }, "???");
        initMem(0x0586, { 0xED,0xC3 });
        lines = disassembler_.disassembleForward(0x0586, memory_, 1);
        verifyLine(lines[0], 0x0586, { 0xED,0xC3 }, "???");
        initMem(0x0588, { 0xED,0xC4 });
        lines = disassembler_.disassembleForward(0x0588, memory_, 1);
        verifyLine(lines[0], 0x0588, { 0xED,0xC4 }, "???");
        initMem(0x058a, { 0xED,0xC5 });
        lines = disassembler_.disassembleForward(0x058a, memory_, 1);
        verifyLine(lines[0], 0x058a, { 0xED,0xC5 }, "???");
        initMem(0x058c, { 0xED,0xC6 });
        lines = disassembler_.disassembleForward(0x058c, memory_, 1);
        verifyLine(lines[0], 0x058c, { 0xED,0xC6 }, "???");
        initMem(0x058e, { 0xED,0xC7 });
        lines = disassembler_.disassembleForward(0x058e, memory_, 1);
        verifyLine(lines[0], 0x058e, { 0xED,0xC7 }, "???");
        initMem(0x0590, { 0xED,0xC8 });
        lines = disassembler_.disassembleForward(0x0590, memory_, 1);
        verifyLine(lines[0], 0x0590, { 0xED,0xC8 }, "???");
        initMem(0x0592, { 0xED,0xC9 });
        lines = disassembler_.disassembleForward(0x0592, memory_, 1);
        verifyLine(lines[0], 0x0592, { 0xED,0xC9 }, "???");
        initMem(0x0594, { 0xED,0xCA });
        lines = disassembler_.disassembleForward(0x0594, memory_, 1);
        verifyLine(lines[0], 0x0594, { 0xED,0xCA }, "???");
        initMem(0x0596, { 0xED,0xCB });
        lines = disassembler_.disassembleForward(0x0596, memory_, 1);
        verifyLine(lines[0], 0x0596, { 0xED,0xCB }, "*NOP");
        initMem(0x0598, { 0xED,0xCC });
        lines = disassembler_.disassembleForward(0x0598, memory_, 1);
        verifyLine(lines[0], 0x0598, { 0xED,0xCC }, "???");
        initMem(0x059a, { 0xED,0xCD });
        lines = disassembler_.disassembleForward(0x059a, memory_, 1);
        verifyLine(lines[0], 0x059a, { 0xED,0xCD }, "???");
        initMem(0x059c, { 0xED,0xCE });
        lines = disassembler_.disassembleForward(0x059c, memory_, 1);
        verifyLine(lines[0], 0x059c, { 0xED,0xCE }, "???");
        initMem(0x059e, { 0xED,0xCF });
        lines = disassembler_.disassembleForward(0x059e, memory_, 1);
        verifyLine(lines[0], 0x059e, { 0xED,0xCF }, "???");
        initMem(0x05a0, { 0xED,0xD0 });
        lines = disassembler_.disassembleForward(0x05a0, memory_, 1);
        verifyLine(lines[0], 0x05a0, { 0xED,0xD0 }, "???");
        initMem(0x05a2, { 0xED,0xD1 });
        lines = disassembler_.disassembleForward(0x05a2, memory_, 1);
        verifyLine(lines[0], 0x05a2, { 0xED,0xD1 }, "???");
        initMem(0x05a4, { 0xED,0xD2 });
        lines = disassembler_.disassembleForward(0x05a4, memory_, 1);
        verifyLine(lines[0], 0x05a4, { 0xED,0xD2 }, "???");
        initMem(0x05a6, { 0xED,0xD3 });
        lines = disassembler_.disassembleForward(0x05a6, memory_, 1);
        verifyLine(lines[0], 0x05a6, { 0xED,0xD3 }, "???");
        initMem(0x05a8, { 0xED,0xD4 });
        lines = disassembler_.disassembleForward(0x05a8, memory_, 1);
        verifyLine(lines[0], 0x05a8, { 0xED,0xD4 }, "???");
        initMem(0x05aa, { 0xED,0xD5 });
        lines = disassembler_.disassembleForward(0x05aa, memory_, 1);
        verifyLine(lines[0], 0x05aa, { 0xED,0xD5 }, "???");
        initMem(0x05ac, { 0xED,0xD6 });
        lines = disassembler_.disassembleForward(0x05ac, memory_, 1);
        verifyLine(lines[0], 0x05ac, { 0xED,0xD6 }, "???");
        initMem(0x05ae, { 0xED,0xD7 });
        lines = disassembler_.disassembleForward(0x05ae, memory_, 1);
        verifyLine(lines[0], 0x05ae, { 0xED,0xD7 }, "???");
        initMem(0x05b0, { 0xED,0xD8 });
        lines = disassembler_.disassembleForward(0x05b0, memory_, 1);
        verifyLine(lines[0], 0x05b0, { 0xED,0xD8 }, "???");
        initMem(0x05b2, { 0xED,0xD9 });
        lines = disassembler_.disassembleForward(0x05b2, memory_, 1);
        verifyLine(lines[0], 0x05b2, { 0xED,0xD9 }, "???");
        initMem(0x05b4, { 0xED,0xDA });
        lines = disassembler_.disassembleForward(0x05b4, memory_, 1);
        verifyLine(lines[0], 0x05b4, { 0xED,0xDA }, "???");
        initMem(0x05b6, { 0xED,0xDB });
        lines = disassembler_.disassembleForward(0x05b6, memory_, 1);
        verifyLine(lines[0], 0x05b6, { 0xED,0xDB }, "???");
        initMem(0x05b8, { 0xED,0xDC });
        lines = disassembler_.disassembleForward(0x05b8, memory_, 1);
        verifyLine(lines[0], 0x05b8, { 0xED,0xDC }, "???");
        initMem(0x05ba, { 0xED,0xDD });
        lines = disassembler_.disassembleForward(0x05ba, memory_, 1);
        verifyLine(lines[0], 0x05ba, { 0xED,0xDD }, "*NOP");
        initMem(0x05bc, { 0xED,0xDE });
        lines = disassembler_.disassembleForward(0x05bc, memory_, 1);
        verifyLine(lines[0], 0x05bc, { 0xED,0xDE }, "???");
        initMem(0x05be, { 0xED,0xDF });
        lines = disassembler_.disassembleForward(0x05be, memory_, 1);
        verifyLine(lines[0], 0x05be, { 0xED,0xDF }, "???");
        initMem(0x05c0, { 0xED,0xE0 });
        lines = disassembler_.disassembleForward(0x05c0, memory_, 1);
        verifyLine(lines[0], 0x05c0, { 0xED,0xE0 }, "???");
        initMem(0x05c2, { 0xED,0xE1 });
        lines = disassembler_.disassembleForward(0x05c2, memory_, 1);
        verifyLine(lines[0], 0x05c2, { 0xED,0xE1 }, "???");
        initMem(0x05c4, { 0xED,0xE2 });
        lines = disassembler_.disassembleForward(0x05c4, memory_, 1);
        verifyLine(lines[0], 0x05c4, { 0xED,0xE2 }, "???");
        initMem(0x05c6, { 0xED,0xE3 });
        lines = disassembler_.disassembleForward(0x05c6, memory_, 1);
        verifyLine(lines[0], 0x05c6, { 0xED,0xE3 }, "???");
        initMem(0x05c8, { 0xED,0xE4 });
        lines = disassembler_.disassembleForward(0x05c8, memory_, 1);
        verifyLine(lines[0], 0x05c8, { 0xED,0xE4 }, "???");
        initMem(0x05ca, { 0xED,0xE5 });
        lines = disassembler_.disassembleForward(0x05ca, memory_, 1);
        verifyLine(lines[0], 0x05ca, { 0xED,0xE5 }, "???");
        initMem(0x05cc, { 0xED,0xE6 });
        lines = disassembler_.disassembleForward(0x05cc, memory_, 1);
        verifyLine(lines[0], 0x05cc, { 0xED,0xE6 }, "???");
        initMem(0x05ce, { 0xED,0xE7 });
        lines = disassembler_.disassembleForward(0x05ce, memory_, 1);
        verifyLine(lines[0], 0x05ce, { 0xED,0xE7 }, "???");
        initMem(0x05d0, { 0xED,0xE8 });
        lines = disassembler_.disassembleForward(0x05d0, memory_, 1);
        verifyLine(lines[0], 0x05d0, { 0xED,0xE8 }, "???");
        initMem(0x05d2, { 0xED,0xE9 });
        lines = disassembler_.disassembleForward(0x05d2, memory_, 1);
        verifyLine(lines[0], 0x05d2, { 0xED,0xE9 }, "???");
        initMem(0x05d4, { 0xED,0xEA });
        lines = disassembler_.disassembleForward(0x05d4, memory_, 1);
        verifyLine(lines[0], 0x05d4, { 0xED,0xEA }, "???");
        initMem(0x05d6, { 0xED,0xEB });
        lines = disassembler_.disassembleForward(0x05d6, memory_, 1);
        verifyLine(lines[0], 0x05d6, { 0xED,0xEB }, "???");
        initMem(0x05d8, { 0xED,0xEC });
        lines = disassembler_.disassembleForward(0x05d8, memory_, 1);
        verifyLine(lines[0], 0x05d8, { 0xED,0xEC }, "???");
        initMem(0x05da, { 0xED,0xED });
        lines = disassembler_.disassembleForward(0x05da, memory_, 1);
        verifyLine(lines[0], 0x05da, { 0xED,0xED }, "*NOP");
        initMem(0x05dc, { 0xED,0xEE });
        lines = disassembler_.disassembleForward(0x05dc, memory_, 1);
        verifyLine(lines[0], 0x05dc, { 0xED,0xEE }, "???");
        initMem(0x05de, { 0xED,0xEF });
        lines = disassembler_.disassembleForward(0x05de, memory_, 1);
        verifyLine(lines[0], 0x05de, { 0xED,0xEF }, "???");
        initMem(0x05e0, { 0xED,0xF0 });
        lines = disassembler_.disassembleForward(0x05e0, memory_, 1);
        verifyLine(lines[0], 0x05e0, { 0xED,0xF0 }, "???");
        initMem(0x05e2, { 0xED,0xF1 });
        lines = disassembler_.disassembleForward(0x05e2, memory_, 1);
        verifyLine(lines[0], 0x05e2, { 0xED,0xF1 }, "???");
        initMem(0x05e4, { 0xED,0xF2 });
        lines = disassembler_.disassembleForward(0x05e4, memory_, 1);
        verifyLine(lines[0], 0x05e4, { 0xED,0xF2 }, "???");
        initMem(0x05e6, { 0xED,0xF3 });
        lines = disassembler_.disassembleForward(0x05e6, memory_, 1);
        verifyLine(lines[0], 0x05e6, { 0xED,0xF3 }, "???");
        initMem(0x05e8, { 0xED,0xF4 });
        lines = disassembler_.disassembleForward(0x05e8, memory_, 1);
        verifyLine(lines[0], 0x05e8, { 0xED,0xF4 }, "???");
        initMem(0x05ea, { 0xED,0xF5 });
        lines = disassembler_.disassembleForward(0x05ea, memory_, 1);
        verifyLine(lines[0], 0x05ea, { 0xED,0xF5 }, "???");
        initMem(0x05ec, { 0xED,0xF6 });
        lines = disassembler_.disassembleForward(0x05ec, memory_, 1);
        verifyLine(lines[0], 0x05ec, { 0xED,0xF6 }, "???");
        initMem(0x05ee, { 0xED,0xF7 });
        lines = disassembler_.disassembleForward(0x05ee, memory_, 1);
        verifyLine(lines[0], 0x05ee, { 0xED,0xF7 }, "???");
        initMem(0x05f0, { 0xED,0xF8 });
        lines = disassembler_.disassembleForward(0x05f0, memory_, 1);
        verifyLine(lines[0], 0x05f0, { 0xED,0xF8 }, "???");
        initMem(0x05f2, { 0xED,0xF9 });
        lines = disassembler_.disassembleForward(0x05f2, memory_, 1);
        verifyLine(lines[0], 0x05f2, { 0xED,0xF9 }, "???");
        initMem(0x05f4, { 0xED,0xFA });
        lines = disassembler_.disassembleForward(0x05f4, memory_, 1);
        verifyLine(lines[0], 0x05f4, { 0xED,0xFA }, "???");
        initMem(0x05f6, { 0xED,0xFB });
        lines = disassembler_.disassembleForward(0x05f6, memory_, 1);
        verifyLine(lines[0], 0x05f6, { 0xED,0xFB }, "???");
        initMem(0x05f8, { 0xED,0xFC });
        lines = disassembler_.disassembleForward(0x05f8, memory_, 1);
        verifyLine(lines[0], 0x05f8, { 0xED,0xFC }, "???");
        initMem(0x05fa, { 0xED,0xFD });
        lines = disassembler_.disassembleForward(0x05fa, memory_, 1);
        verifyLine(lines[0], 0x05fa, { 0xED,0xFD }, "*NOP");
        initMem(0x05fc, { 0xED,0xFE });
        lines = disassembler_.disassembleForward(0x05fc, memory_, 1);
        verifyLine(lines[0], 0x05fc, { 0xED,0xFE }, "???");
        initMem(0x05fe, { 0xED,0xFF });
        lines = disassembler_.disassembleForward(0x05fe, memory_, 1);
        verifyLine(lines[0], 0x05fe, { 0xED,0xFF }, "???");
    }

    void TestDisassembleForward_PrefixFD() {
        initMem(0x0400, { 0xFD,0x00 });
        auto lines = disassembler_.disassembleForward(0x0400, memory_, 1);
        verifyLine(lines[0], 0x0400, { 0xFD,0x00 }, "*NOP");
        initMem(0x0402, { 0xFD,0x01,0xFD,0x02 });
        lines = disassembler_.disassembleForward(0x0402, memory_, 1);
        verifyLine(lines[0], 0x0402, { 0xFD,0x01,0xFD,0x02 }, "*LD BC, #$02FD");
        initMem(0x0404, { 0xFD,0x02 });
        lines = disassembler_.disassembleForward(0x0404, memory_, 1);
        verifyLine(lines[0], 0x0404, { 0xFD,0x02 }, "*LD (BC),A");
        initMem(0x0406, { 0xFD,0x03 });
        lines = disassembler_.disassembleForward(0x0406, memory_, 1);
        verifyLine(lines[0], 0x0406, { 0xFD,0x03 }, "*INC BC");
        initMem(0x0408, { 0xFD,0x04 });
        lines = disassembler_.disassembleForward(0x0408, memory_, 1);
        verifyLine(lines[0], 0x0408, { 0xFD,0x04 }, "*INC B");
        initMem(0x040a, { 0xFD,0x05 });
        lines = disassembler_.disassembleForward(0x040a, memory_, 1);
        verifyLine(lines[0], 0x040a, { 0xFD,0x05 }, "*DEC B");
        initMem(0x040c, { 0xFD,0x06,0xFD });
        lines = disassembler_.disassembleForward(0x040c, memory_, 1);
        verifyLine(lines[0], 0x040c, { 0xFD,0x06,0xFD }, "*LD B, #$FD");
        initMem(0x040e, { 0xFD,0x07 });
        lines = disassembler_.disassembleForward(0x040e, memory_, 1);
        verifyLine(lines[0], 0x040e, { 0xFD,0x07 }, "*RLCA");
        initMem(0x0410, { 0xFD,0x08 });
        lines = disassembler_.disassembleForward(0x0410, memory_, 1);
        verifyLine(lines[0], 0x0410, { 0xFD,0x08 }, "*EX AF,AF'");
        initMem(0x0412, { 0xFD,0x09 });
        lines = disassembler_.disassembleForward(0x0412, memory_, 1);
        verifyLine(lines[0], 0x0412, { 0xFD,0x09 }, "ADD IY,BC");
        initMem(0x0414, { 0xFD,0x0A });
        lines = disassembler_.disassembleForward(0x0414, memory_, 1);
        verifyLine(lines[0], 0x0414, { 0xFD,0x0A }, "*LD A,(BC)");
        initMem(0x0416, { 0xFD,0x0B });
        lines = disassembler_.disassembleForward(0x0416, memory_, 1);
        verifyLine(lines[0], 0x0416, { 0xFD,0x0B }, "*DEC BC");
        initMem(0x0418, { 0xFD,0x0C });
        lines = disassembler_.disassembleForward(0x0418, memory_, 1);
        verifyLine(lines[0], 0x0418, { 0xFD,0x0C }, "*INC C");
        initMem(0x041a, { 0xFD,0x0D });
        lines = disassembler_.disassembleForward(0x041a, memory_, 1);
        verifyLine(lines[0], 0x041a, { 0xFD,0x0D }, "*DEC C");
        initMem(0x041c, { 0xFD,0x0E,0xFD });
        lines = disassembler_.disassembleForward(0x041c, memory_, 1);
        verifyLine(lines[0], 0x041c, { 0xFD,0x0E,0xFD }, "*LD C, #$FD");
        initMem(0x041e, { 0xFD,0x0F });
        lines = disassembler_.disassembleForward(0x041e, memory_, 1);
        verifyLine(lines[0], 0x041e, { 0xFD,0x0F }, "*RRCA");
        initMem(0x0420, { 0xFD,0x10,0xFD });
        lines = disassembler_.disassembleForward(0x0420, memory_, 1);
        verifyLine(lines[0], 0x0420, { 0xFD,0x10,0xFD }, "*DJNZ $041F");
        initMem(0x0422, { 0xFD,0x11,0xFD,0x12 });
        lines = disassembler_.disassembleForward(0x0422, memory_, 1);
        verifyLine(lines[0], 0x0422, { 0xFD,0x11,0xFD,0x12 }, "*LD DE, #$12FD");
        initMem(0x0424, { 0xFD,0x12 });
        lines = disassembler_.disassembleForward(0x0424, memory_, 1);
        verifyLine(lines[0], 0x0424, { 0xFD,0x12 }, "*LD (DE),A");
        initMem(0x0426, { 0xFD,0x13 });
        lines = disassembler_.disassembleForward(0x0426, memory_, 1);
        verifyLine(lines[0], 0x0426, { 0xFD,0x13 }, "*INC DE");
        initMem(0x0428, { 0xFD,0x14 });
        lines = disassembler_.disassembleForward(0x0428, memory_, 1);
        verifyLine(lines[0], 0x0428, { 0xFD,0x14 }, "*INC D");
        initMem(0x042a, { 0xFD,0x15 });
        lines = disassembler_.disassembleForward(0x042a, memory_, 1);
        verifyLine(lines[0], 0x042a, { 0xFD,0x15 }, "*DEC D");
        initMem(0x042c, { 0xFD,0x16,0xFD });
        lines = disassembler_.disassembleForward(0x042c, memory_, 1);
        verifyLine(lines[0], 0x042c, { 0xFD,0x16,0xFD }, "*LD D, #$FD");
        initMem(0x042e, { 0xFD,0x17 });
        lines = disassembler_.disassembleForward(0x042e, memory_, 1);
        verifyLine(lines[0], 0x042e, { 0xFD,0x17 }, "*RLA");
        initMem(0x0430, { 0xFD,0x18,0xFD });
        lines = disassembler_.disassembleForward(0x0430, memory_, 1);
        verifyLine(lines[0], 0x0430, { 0xFD,0x18,0xFD }, "*JR $042F");
        initMem(0x0432, { 0xFD,0x19 });
        lines = disassembler_.disassembleForward(0x0432, memory_, 1);
        verifyLine(lines[0], 0x0432, { 0xFD,0x19 }, "ADD IY,DE");
        initMem(0x0434, { 0xFD,0x1A });
        lines = disassembler_.disassembleForward(0x0434, memory_, 1);
        verifyLine(lines[0], 0x0434, { 0xFD,0x1A }, "*LD A,(DE)");
        initMem(0x0436, { 0xFD,0x1B });
        lines = disassembler_.disassembleForward(0x0436, memory_, 1);
        verifyLine(lines[0], 0x0436, { 0xFD,0x1B }, "*DEC DE");
        initMem(0x0438, { 0xFD,0x1C });
        lines = disassembler_.disassembleForward(0x0438, memory_, 1);
        verifyLine(lines[0], 0x0438, { 0xFD,0x1C }, "*INC E");
        initMem(0x043a, { 0xFD,0x1D });
        lines = disassembler_.disassembleForward(0x043a, memory_, 1);
        verifyLine(lines[0], 0x043a, { 0xFD,0x1D }, "*DEC E");
        initMem(0x043c, { 0xFD,0x1E,0xFD });
        lines = disassembler_.disassembleForward(0x043c, memory_, 1);
        verifyLine(lines[0], 0x043c, { 0xFD,0x1E,0xFD }, "*LD E, #$FD");
        initMem(0x043e, { 0xFD,0x1F });
        lines = disassembler_.disassembleForward(0x043e, memory_, 1);
        verifyLine(lines[0], 0x043e, { 0xFD,0x1F }, "*RRA");
        initMem(0x0440, { 0xFD,0x20,0xFD });
        lines = disassembler_.disassembleForward(0x0440, memory_, 1);
        verifyLine(lines[0], 0x0440, { 0xFD,0x20,0xFD }, "*JR NZ, $043F");
        initMem(0x0442, { 0xFD,0x21,0xFD,0x22 });
        lines = disassembler_.disassembleForward(0x0442, memory_, 1);
        verifyLine(lines[0], 0x0442, { 0xFD,0x21,0xFD,0x22 }, "LD IY, #$22FD");
        initMem(0x0444, { 0xFD,0x22,0xFD,0x23 });
        lines = disassembler_.disassembleForward(0x0444, memory_, 1);
        verifyLine(lines[0], 0x0444, { 0xFD,0x22,0xFD,0x23 }, "LD ($23FD),IY");
        initMem(0x0446, { 0xFD,0x23 });
        lines = disassembler_.disassembleForward(0x0446, memory_, 1);
        verifyLine(lines[0], 0x0446, { 0xFD,0x23 }, "INC IY");
        initMem(0x0448, { 0xFD,0x24 });
        lines = disassembler_.disassembleForward(0x0448, memory_, 1);
        verifyLine(lines[0], 0x0448, { 0xFD,0x24 }, "*INC IYH");
        initMem(0x044a, { 0xFD,0x25 });
        lines = disassembler_.disassembleForward(0x044a, memory_, 1);
        verifyLine(lines[0], 0x044a, { 0xFD,0x25 }, "*DEC IYH");
        initMem(0x044c, { 0xFD,0x26,0xFD });
        lines = disassembler_.disassembleForward(0x044c, memory_, 1);
        verifyLine(lines[0], 0x044c, { 0xFD,0x26,0xFD }, "*LD IYH, #$FD");
        initMem(0x044e, { 0xFD,0x27 });
        lines = disassembler_.disassembleForward(0x044e, memory_, 1);
        verifyLine(lines[0], 0x044e, { 0xFD,0x27 }, "*DAA");
        initMem(0x0450, { 0xFD,0x28,0xFD });
        lines = disassembler_.disassembleForward(0x0450, memory_, 1);
        verifyLine(lines[0], 0x0450, { 0xFD,0x28,0xFD }, "*JR Z, $044F");
        initMem(0x0452, { 0xFD,0x29 });
        lines = disassembler_.disassembleForward(0x0452, memory_, 1);
        verifyLine(lines[0], 0x0452, { 0xFD,0x29 }, "ADD IY,IY");
        initMem(0x0454, { 0xFD,0x2A,0xFD,0x2B });
        lines = disassembler_.disassembleForward(0x0454, memory_, 1);
        verifyLine(lines[0], 0x0454, { 0xFD,0x2A,0xFD,0x2B }, "LD IY, ($2BFD)");
        initMem(0x0456, { 0xFD,0x2B });
        lines = disassembler_.disassembleForward(0x0456, memory_, 1);
        verifyLine(lines[0], 0x0456, { 0xFD,0x2B }, "DEC IY");
        initMem(0x0458, { 0xFD,0x2C });
        lines = disassembler_.disassembleForward(0x0458, memory_, 1);
        verifyLine(lines[0], 0x0458, { 0xFD,0x2C }, "*INC IYL");
        initMem(0x045a, { 0xFD,0x2D });
        lines = disassembler_.disassembleForward(0x045a, memory_, 1);
        verifyLine(lines[0], 0x045a, { 0xFD,0x2D }, "*DEC IYL");
        initMem(0x045c, { 0xFD,0x2E,0xFD });
        lines = disassembler_.disassembleForward(0x045c, memory_, 1);
        verifyLine(lines[0], 0x045c, { 0xFD,0x2E,0xFD }, "*LD IYL, #$FD");
        initMem(0x045e, { 0xFD,0x2F });
        lines = disassembler_.disassembleForward(0x045e, memory_, 1);
        verifyLine(lines[0], 0x045e, { 0xFD,0x2F }, "*CPL");
        initMem(0x0460, { 0xFD,0x30,0xFD });
        lines = disassembler_.disassembleForward(0x0460, memory_, 1);
        verifyLine(lines[0], 0x0460, { 0xFD,0x30,0xFD }, "*JR NC, $045F");
        initMem(0x0462, { 0xFD,0x31,0xFD,0x32 });
        lines = disassembler_.disassembleForward(0x0462, memory_, 1);
        verifyLine(lines[0], 0x0462, { 0xFD,0x31,0xFD,0x32 }, "*LD SP, #$32FD");
        initMem(0x0464, { 0xFD,0x32,0xFD,0x33 });
        lines = disassembler_.disassembleForward(0x0464, memory_, 1);
        verifyLine(lines[0], 0x0464, { 0xFD,0x32,0xFD,0x33 }, "*LD ($33FD),A");
        initMem(0x0466, { 0xFD,0x33 });
        lines = disassembler_.disassembleForward(0x0466, memory_, 1);
        verifyLine(lines[0], 0x0466, { 0xFD,0x33 }, "*INC SP");
        initMem(0x0468, { 0xFD,0x34,0xFD });
        lines = disassembler_.disassembleForward(0x0468, memory_, 1);
        verifyLine(lines[0], 0x0468, { 0xFD,0x34,0xFD }, "INC (IY-$03)");
        initMem(0x046a, { 0xFD,0x35,0xFD });
        lines = disassembler_.disassembleForward(0x046a, memory_, 1);
        verifyLine(lines[0], 0x046a, { 0xFD,0x35,0xFD }, "DEC (IY-$03)");
        initMem(0x046c, { 0xFD,0x36,0xFD,0x37 });
        lines = disassembler_.disassembleForward(0x046c, memory_, 1);
        verifyLine(lines[0], 0x046c, { 0xFD,0x36,0xFD,0x37 }, "LD (IY+$FD), #$37");
        initMem(0x046e, { 0xFD,0x37 });
        lines = disassembler_.disassembleForward(0x046e, memory_, 1);
        verifyLine(lines[0], 0x046e, { 0xFD,0x37 }, "*SCF");
        initMem(0x0470, { 0xFD,0x38,0xFD });
        lines = disassembler_.disassembleForward(0x0470, memory_, 1);
        verifyLine(lines[0], 0x0470, { 0xFD,0x38,0xFD }, "*JR C, $046F");
        initMem(0x0472, { 0xFD,0x39 });
        lines = disassembler_.disassembleForward(0x0472, memory_, 1);
        verifyLine(lines[0], 0x0472, { 0xFD,0x39 }, "ADD IY,SP");
        initMem(0x0474, { 0xFD,0x3A,0xFD,0x3B });
        lines = disassembler_.disassembleForward(0x0474, memory_, 1);
        verifyLine(lines[0], 0x0474, { 0xFD,0x3A,0xFD,0x3B }, "*LD A, ($3BFD)");
        initMem(0x0476, { 0xFD,0x3B });
        lines = disassembler_.disassembleForward(0x0476, memory_, 1);
        verifyLine(lines[0], 0x0476, { 0xFD,0x3B }, "*DEC SP");
        initMem(0x0478, { 0xFD,0x3C });
        lines = disassembler_.disassembleForward(0x0478, memory_, 1);
        verifyLine(lines[0], 0x0478, { 0xFD,0x3C }, "*INC A");
        initMem(0x047a, { 0xFD,0x3D });
        lines = disassembler_.disassembleForward(0x047a, memory_, 1);
        verifyLine(lines[0], 0x047a, { 0xFD,0x3D }, "*DEC A");
        initMem(0x047c, { 0xFD,0x3E,0xFD });
        lines = disassembler_.disassembleForward(0x047c, memory_, 1);
        verifyLine(lines[0], 0x047c, { 0xFD,0x3E,0xFD }, "*LD A, #$FD");
        initMem(0x047e, { 0xFD,0x3F });
        lines = disassembler_.disassembleForward(0x047e, memory_, 1);
        verifyLine(lines[0], 0x047e, { 0xFD,0x3F }, "*CCF");
        initMem(0x0480, { 0xFD,0x40 });
        lines = disassembler_.disassembleForward(0x0480, memory_, 1);
        verifyLine(lines[0], 0x0480, { 0xFD,0x40 }, "*LD B,B");
        initMem(0x0482, { 0xFD,0x41 });
        lines = disassembler_.disassembleForward(0x0482, memory_, 1);
        verifyLine(lines[0], 0x0482, { 0xFD,0x41 }, "*LD B,C");
        initMem(0x0484, { 0xFD,0x42 });
        lines = disassembler_.disassembleForward(0x0484, memory_, 1);
        verifyLine(lines[0], 0x0484, { 0xFD,0x42 }, "*LD B,D");
        initMem(0x0486, { 0xFD,0x43 });
        lines = disassembler_.disassembleForward(0x0486, memory_, 1);
        verifyLine(lines[0], 0x0486, { 0xFD,0x43 }, "*LD B,E");
        initMem(0x0488, { 0xFD,0x44 });
        lines = disassembler_.disassembleForward(0x0488, memory_, 1);
        verifyLine(lines[0], 0x0488, { 0xFD,0x44 }, "*LD B,IYH");
        initMem(0x048a, { 0xFD,0x45 });
        lines = disassembler_.disassembleForward(0x048a, memory_, 1);
        verifyLine(lines[0], 0x048a, { 0xFD,0x45 }, "*LD B,IYL");
        initMem(0x048c, { 0xFD,0x46,0xFD });
        lines = disassembler_.disassembleForward(0x048c, memory_, 1);
        verifyLine(lines[0], 0x048c, { 0xFD,0x46,0xFD }, "LD B, (IY-$03)");
        initMem(0x048e, { 0xFD,0x47 });
        lines = disassembler_.disassembleForward(0x048e, memory_, 1);
        verifyLine(lines[0], 0x048e, { 0xFD,0x47 }, "*LD B,A");
        initMem(0x0490, { 0xFD,0x48 });
        lines = disassembler_.disassembleForward(0x0490, memory_, 1);
        verifyLine(lines[0], 0x0490, { 0xFD,0x48 }, "*LD C,B");
        initMem(0x0492, { 0xFD,0x49 });
        lines = disassembler_.disassembleForward(0x0492, memory_, 1);
        verifyLine(lines[0], 0x0492, { 0xFD,0x49 }, "*LD C,C");
        initMem(0x0494, { 0xFD,0x4A });
        lines = disassembler_.disassembleForward(0x0494, memory_, 1);
        verifyLine(lines[0], 0x0494, { 0xFD,0x4A }, "*LD C,D");
        initMem(0x0496, { 0xFD,0x4B });
        lines = disassembler_.disassembleForward(0x0496, memory_, 1);
        verifyLine(lines[0], 0x0496, { 0xFD,0x4B }, "*LD C,E");
        initMem(0x0498, { 0xFD,0x4C });
        lines = disassembler_.disassembleForward(0x0498, memory_, 1);
        verifyLine(lines[0], 0x0498, { 0xFD,0x4C }, "*LD C,IYH");
        initMem(0x049a, { 0xFD,0x4D });
        lines = disassembler_.disassembleForward(0x049a, memory_, 1);
        verifyLine(lines[0], 0x049a, { 0xFD,0x4D }, "*LD C,IYL");
        initMem(0x049c, { 0xFD,0x4E,0xFD });
        lines = disassembler_.disassembleForward(0x049c, memory_, 1);
        verifyLine(lines[0], 0x049c, { 0xFD,0x4E,0xFD }, "LD C, (IY-$03)");
        initMem(0x049e, { 0xFD,0x4F });
        lines = disassembler_.disassembleForward(0x049e, memory_, 1);
        verifyLine(lines[0], 0x049e, { 0xFD,0x4F }, "*LD C,A");
        initMem(0x04a0, { 0xFD,0x50 });
        lines = disassembler_.disassembleForward(0x04a0, memory_, 1);
        verifyLine(lines[0], 0x04a0, { 0xFD,0x50 }, "*LD D,B");
        initMem(0x04a2, { 0xFD,0x51 });
        lines = disassembler_.disassembleForward(0x04a2, memory_, 1);
        verifyLine(lines[0], 0x04a2, { 0xFD,0x51 }, "*LD D,C");
        initMem(0x04a4, { 0xFD,0x52 });
        lines = disassembler_.disassembleForward(0x04a4, memory_, 1);
        verifyLine(lines[0], 0x04a4, { 0xFD,0x52 }, "*LD D,D");
        initMem(0x04a6, { 0xFD,0x53 });
        lines = disassembler_.disassembleForward(0x04a6, memory_, 1);
        verifyLine(lines[0], 0x04a6, { 0xFD,0x53 }, "*LD D,E");
        initMem(0x04a8, { 0xFD,0x54 });
        lines = disassembler_.disassembleForward(0x04a8, memory_, 1);
        verifyLine(lines[0], 0x04a8, { 0xFD,0x54 }, "*LD D,IYH");
        initMem(0x04aa, { 0xFD,0x55 });
        lines = disassembler_.disassembleForward(0x04aa, memory_, 1);
        verifyLine(lines[0], 0x04aa, { 0xFD,0x55 }, "*LD D,IY");
        initMem(0x04ac, { 0xFD,0x56,0xFD });
        lines = disassembler_.disassembleForward(0x04ac, memory_, 1);
        verifyLine(lines[0], 0x04ac, { 0xFD,0x56,0xFD }, "LD D, (IY-$03)");
        initMem(0x04ae, { 0xFD,0x57 });
        lines = disassembler_.disassembleForward(0x04ae, memory_, 1);
        verifyLine(lines[0], 0x04ae, { 0xFD,0x57 }, "*LD D,A");
        initMem(0x04b0, { 0xFD,0x58 });
        lines = disassembler_.disassembleForward(0x04b0, memory_, 1);
        verifyLine(lines[0], 0x04b0, { 0xFD,0x58 }, "*LD E,B");
        initMem(0x04b2, { 0xFD,0x59 });
        lines = disassembler_.disassembleForward(0x04b2, memory_, 1);
        verifyLine(lines[0], 0x04b2, { 0xFD,0x59 }, "*LD E,C");
        initMem(0x04b4, { 0xFD,0x5A });
        lines = disassembler_.disassembleForward(0x04b4, memory_, 1);
        verifyLine(lines[0], 0x04b4, { 0xFD,0x5A }, "*LD E,D");
        initMem(0x04b6, { 0xFD,0x5B });
        lines = disassembler_.disassembleForward(0x04b6, memory_, 1);
        verifyLine(lines[0], 0x04b6, { 0xFD,0x5B }, "*LD E,E");
        initMem(0x04b8, { 0xFD,0x5C });
        lines = disassembler_.disassembleForward(0x04b8, memory_, 1);
        verifyLine(lines[0], 0x04b8, { 0xFD,0x5C }, "*LD E,IYH");
        initMem(0x04ba, { 0xFD,0x5D });
        lines = disassembler_.disassembleForward(0x04ba, memory_, 1);
        verifyLine(lines[0], 0x04ba, { 0xFD,0x5D }, "*LD E,IYL");
        initMem(0x04bc, { 0xFD,0x5E,0xFD });
        lines = disassembler_.disassembleForward(0x04bc, memory_, 1);
        verifyLine(lines[0], 0x04bc, { 0xFD,0x5E,0xFD }, "LD E, (IY-$03)");
        initMem(0x04be, { 0xFD,0x5F });
        lines = disassembler_.disassembleForward(0x04be, memory_, 1);
        verifyLine(lines[0], 0x04be, { 0xFD,0x5F }, "*LD E,A");
        initMem(0x04c0, { 0xFD,0x60 });
        lines = disassembler_.disassembleForward(0x04c0, memory_, 1);
        verifyLine(lines[0], 0x04c0, { 0xFD,0x60 }, "*LD IYH,B");
        initMem(0x04c2, { 0xFD,0x61 });
        lines = disassembler_.disassembleForward(0x04c2, memory_, 1);
        verifyLine(lines[0], 0x04c2, { 0xFD,0x61 }, "*LD IYH,C");
        initMem(0x04c4, { 0xFD,0x62 });
        lines = disassembler_.disassembleForward(0x04c4, memory_, 1);
        verifyLine(lines[0], 0x04c4, { 0xFD,0x62 }, "*LD IYH,D");
        initMem(0x04c6, { 0xFD,0x63 });
        lines = disassembler_.disassembleForward(0x04c6, memory_, 1);
        verifyLine(lines[0], 0x04c6, { 0xFD,0x63 }, "*LD IYH,E");
        initMem(0x04c8, { 0xFD,0x64 });
        lines = disassembler_.disassembleForward(0x04c8, memory_, 1);
        verifyLine(lines[0], 0x04c8, { 0xFD,0x64 }, "*LD IYH,IYH");
        initMem(0x04ca, { 0xFD,0x65 });
        lines = disassembler_.disassembleForward(0x04ca, memory_, 1);
        verifyLine(lines[0], 0x04ca, { 0xFD,0x65 }, "*LD IYH,IYL");
        initMem(0x04cc, { 0xFD,0x66,0xFD });
        lines = disassembler_.disassembleForward(0x04cc, memory_, 1);
        verifyLine(lines[0], 0x04cc, { 0xFD,0x66,0xFD }, "LD H, (IY-$03)");
        initMem(0x04ce, { 0xFD,0x67 });
        lines = disassembler_.disassembleForward(0x04ce, memory_, 1);
        verifyLine(lines[0], 0x04ce, { 0xFD,0x67 }, "*LD IYH,A");
        initMem(0x04d0, { 0xFD,0x68 });
        lines = disassembler_.disassembleForward(0x04d0, memory_, 1);
        verifyLine(lines[0], 0x04d0, { 0xFD,0x68 }, "*LD IYL,B");
        initMem(0x04d2, { 0xFD,0x69 });
        lines = disassembler_.disassembleForward(0x04d2, memory_, 1);
        verifyLine(lines[0], 0x04d2, { 0xFD,0x69 }, "*LD IYL,C");
        initMem(0x04d4, { 0xFD,0x6A });
        lines = disassembler_.disassembleForward(0x04d4, memory_, 1);
        verifyLine(lines[0], 0x04d4, { 0xFD,0x6A }, "*LD IYL,D");
        initMem(0x04d6, { 0xFD,0x6B });
        lines = disassembler_.disassembleForward(0x04d6, memory_, 1);
        verifyLine(lines[0], 0x04d6, { 0xFD,0x6B }, "*LD IYL,E");
        initMem(0x04d8, { 0xFD,0x6C });
        lines = disassembler_.disassembleForward(0x04d8, memory_, 1);
        verifyLine(lines[0], 0x04d8, { 0xFD,0x6C }, "*LD IYL,IYH");
        initMem(0x04da, { 0xFD,0x6D });
        lines = disassembler_.disassembleForward(0x04da, memory_, 1);
        verifyLine(lines[0], 0x04da, { 0xFD,0x6D }, "*LD IYL,IYL");
        initMem(0x04dc, { 0xFD,0x6E,0xFD });
        lines = disassembler_.disassembleForward(0x04dc, memory_, 1);
        verifyLine(lines[0], 0x04dc, { 0xFD,0x6E,0xFD }, "LD L, (IY-$03)");
        initMem(0x04de, { 0xFD,0x6F });
        lines = disassembler_.disassembleForward(0x04de, memory_, 1);
        verifyLine(lines[0], 0x04de, { 0xFD,0x6F }, "*LD IYL,A");
        initMem(0x04e0, { 0xFD,0x70,0xFD });
        lines = disassembler_.disassembleForward(0x04e0, memory_, 1);
        verifyLine(lines[0], 0x04e0, { 0xFD,0x70,0xFD }, "LD (IY-$03), B");
        initMem(0x04e2, { 0xFD,0x71,0xFD });
        lines = disassembler_.disassembleForward(0x04e2, memory_, 1);
        verifyLine(lines[0], 0x04e2, { 0xFD,0x71,0xFD }, "LD (IY-$03), C");
        initMem(0x04e4, { 0xFD,0x72,0xFD });
        lines = disassembler_.disassembleForward(0x04e4, memory_, 1);
        verifyLine(lines[0], 0x04e4, { 0xFD,0x72,0xFD }, "LD (IY-$03), D");
        initMem(0x04e6, { 0xFD,0x73,0xFD });
        lines = disassembler_.disassembleForward(0x04e6, memory_, 1);
        verifyLine(lines[0], 0x04e6, { 0xFD,0x73,0xFD }, "LD (IY-$03), E");
        initMem(0x04e8, { 0xFD,0x74,0xFD });
        lines = disassembler_.disassembleForward(0x04e8, memory_, 1);
        verifyLine(lines[0], 0x04e8, { 0xFD,0x74,0xFD }, "LD (IY-$03), H");
        initMem(0x04ea, { 0xFD,0x75,0xFD });
        lines = disassembler_.disassembleForward(0x04ea, memory_, 1);
        verifyLine(lines[0], 0x04ea, { 0xFD,0x75,0xFD }, "LD (IY-$03), L");
        initMem(0x04ec, { 0xFD,0x76 });
        lines = disassembler_.disassembleForward(0x04ec, memory_, 1);
        verifyLine(lines[0], 0x04ec, { 0xFD,0x76 }, "*HALT");
        initMem(0x04ee, { 0xFD,0x77,0xFD });
        lines = disassembler_.disassembleForward(0x04ee, memory_, 1);
        verifyLine(lines[0], 0x04ee, { 0xFD,0x77,0xFD }, "LD (IY-$03), A");
        initMem(0x04f0, { 0xFD,0x78 });
        lines = disassembler_.disassembleForward(0x04f0, memory_, 1);
        verifyLine(lines[0], 0x04f0, { 0xFD,0x78 }, "*LD A,B");
        initMem(0x04f2, { 0xFD,0x79 });
        lines = disassembler_.disassembleForward(0x04f2, memory_, 1);
        verifyLine(lines[0], 0x04f2, { 0xFD,0x79 }, "*LD A,C");
        initMem(0x04f4, { 0xFD,0x7A });
        lines = disassembler_.disassembleForward(0x04f4, memory_, 1);
        verifyLine(lines[0], 0x04f4, { 0xFD,0x7A }, "*LD A,D");
        initMem(0x04f6, { 0xFD,0x7B });
        lines = disassembler_.disassembleForward(0x04f6, memory_, 1);
        verifyLine(lines[0], 0x04f6, { 0xFD,0x7B }, "*LD A,E");
        initMem(0x04f8, { 0xFD,0x7C });
        lines = disassembler_.disassembleForward(0x04f8, memory_, 1);
        verifyLine(lines[0], 0x04f8, { 0xFD,0x7C }, "*LD A,IYH");
        initMem(0x04fa, { 0xFD,0x7D });
        lines = disassembler_.disassembleForward(0x04fa, memory_, 1);
        verifyLine(lines[0], 0x04fa, { 0xFD,0x7D }, "*LD A,IYL");
        initMem(0x04fc, { 0xFD,0x7E,0xFD });
        lines = disassembler_.disassembleForward(0x04fc, memory_, 1);
        verifyLine(lines[0], 0x04fc, { 0xFD,0x7E,0xFD }, "LD A, (IY-$03)");
        initMem(0x04fe, { 0xFD,0x7F });
        lines = disassembler_.disassembleForward(0x04fe, memory_, 1);
        verifyLine(lines[0], 0x04fe, { 0xFD,0x7F }, "*LD A,A");
        initMem(0x0500, { 0xFD,0x80 });
        lines = disassembler_.disassembleForward(0x0500, memory_, 1);
        verifyLine(lines[0], 0x0500, { 0xFD,0x80 }, "*ADD B");
        initMem(0x0502, { 0xFD,0x81 });
        lines = disassembler_.disassembleForward(0x0502, memory_, 1);
        verifyLine(lines[0], 0x0502, { 0xFD,0x81 }, "*ADD C");
        initMem(0x0504, { 0xFD,0x82 });
        lines = disassembler_.disassembleForward(0x0504, memory_, 1);
        verifyLine(lines[0], 0x0504, { 0xFD,0x82 }, "*ADD D");
        initMem(0x0506, { 0xFD,0x83 });
        lines = disassembler_.disassembleForward(0x0506, memory_, 1);
        verifyLine(lines[0], 0x0506, { 0xFD,0x83 }, "*ADD E");
        initMem(0x0508, { 0xFD,0x84 });
        lines = disassembler_.disassembleForward(0x0508, memory_, 1);
        verifyLine(lines[0], 0x0508, { 0xFD,0x84 }, "*ADD IYH");
        initMem(0x050a, { 0xFD,0x85 });
        lines = disassembler_.disassembleForward(0x050a, memory_, 1);
        verifyLine(lines[0], 0x050a, { 0xFD,0x85 }, "*ADD IYL");
        initMem(0x050c, { 0xFD,0x86,0xFD });
        lines = disassembler_.disassembleForward(0x050c, memory_, 1);
        verifyLine(lines[0], 0x050c, { 0xFD,0x86,0xFD }, "ADD (IY-$03)");
        initMem(0x050e, { 0xFD,0x87 });
        lines = disassembler_.disassembleForward(0x050e, memory_, 1);
        verifyLine(lines[0], 0x050e, { 0xFD,0x87 }, "*ADD A");
        initMem(0x0510, { 0xFD,0x88 });
        lines = disassembler_.disassembleForward(0x0510, memory_, 1);
        verifyLine(lines[0], 0x0510, { 0xFD,0x88 }, "*ADC B");
        initMem(0x0512, { 0xFD,0x89 });
        lines = disassembler_.disassembleForward(0x0512, memory_, 1);
        verifyLine(lines[0], 0x0512, { 0xFD,0x89 }, "*ADC C");
        initMem(0x0514, { 0xFD,0x8A });
        lines = disassembler_.disassembleForward(0x0514, memory_, 1);
        verifyLine(lines[0], 0x0514, { 0xFD,0x8A }, "*ADC D");
        initMem(0x0516, { 0xFD,0x8B });
        lines = disassembler_.disassembleForward(0x0516, memory_, 1);
        verifyLine(lines[0], 0x0516, { 0xFD,0x8B }, "*ADC E");
        initMem(0x0518, { 0xFD,0x8C });
        lines = disassembler_.disassembleForward(0x0518, memory_, 1);
        verifyLine(lines[0], 0x0518, { 0xFD,0x8C }, "*ADC IYH");
        initMem(0x051a, { 0xFD,0x8D });
        lines = disassembler_.disassembleForward(0x051a, memory_, 1);
        verifyLine(lines[0], 0x051a, { 0xFD,0x8D }, "*ADC IYL");
        initMem(0x051c, { 0xFD,0x8E,0xFD });
        lines = disassembler_.disassembleForward(0x051c, memory_, 1);
        verifyLine(lines[0], 0x051c, { 0xFD,0x8E,0xFD }, "ADC (IY-$03)");
        initMem(0x051e, { 0xFD,0x8F });
        lines = disassembler_.disassembleForward(0x051e, memory_, 1);
        verifyLine(lines[0], 0x051e, { 0xFD,0x8F }, "*ADC A");
        initMem(0x0520, { 0xFD,0x90 });
        lines = disassembler_.disassembleForward(0x0520, memory_, 1);
        verifyLine(lines[0], 0x0520, { 0xFD,0x90 }, "*SUB B");
        initMem(0x0522, { 0xFD,0x91 });
        lines = disassembler_.disassembleForward(0x0522, memory_, 1);
        verifyLine(lines[0], 0x0522, { 0xFD,0x91 }, "*SUB C");
        initMem(0x0524, { 0xFD,0x92 });
        lines = disassembler_.disassembleForward(0x0524, memory_, 1);
        verifyLine(lines[0], 0x0524, { 0xFD,0x92 }, "*SUB D");
        initMem(0x0526, { 0xFD,0x93 });
        lines = disassembler_.disassembleForward(0x0526, memory_, 1);
        verifyLine(lines[0], 0x0526, { 0xFD,0x93 }, "*SUB E");
        initMem(0x0528, { 0xFD,0x94 });
        lines = disassembler_.disassembleForward(0x0528, memory_, 1);
        verifyLine(lines[0], 0x0528, { 0xFD,0x94 }, "*SUB IYH");
        initMem(0x052a, { 0xFD,0x95 });
        lines = disassembler_.disassembleForward(0x052a, memory_, 1);
        verifyLine(lines[0], 0x052a, { 0xFD,0x95 }, "*SUB IYL");
        initMem(0x052c, { 0xFD,0x96,0xFD });
        lines = disassembler_.disassembleForward(0x052c, memory_, 1);
        verifyLine(lines[0], 0x052c, { 0xFD,0x96,0xFD }, "SUB (IY-$03)");
        initMem(0x052e, { 0xFD,0x97 });
        lines = disassembler_.disassembleForward(0x052e, memory_, 1);
        verifyLine(lines[0], 0x052e, { 0xFD,0x97 }, "*SUB A");
        initMem(0x0530, { 0xFD,0x98 });
        lines = disassembler_.disassembleForward(0x0530, memory_, 1);
        verifyLine(lines[0], 0x0530, { 0xFD,0x98 }, "*SBC B");
        initMem(0x0532, { 0xFD,0x99 });
        lines = disassembler_.disassembleForward(0x0532, memory_, 1);
        verifyLine(lines[0], 0x0532, { 0xFD,0x99 }, "*SBC C");
        initMem(0x0534, { 0xFD,0x9A });
        lines = disassembler_.disassembleForward(0x0534, memory_, 1);
        verifyLine(lines[0], 0x0534, { 0xFD,0x9A }, "*SBC D");
        initMem(0x0536, { 0xFD,0x9B });
        lines = disassembler_.disassembleForward(0x0536, memory_, 1);
        verifyLine(lines[0], 0x0536, { 0xFD,0x9B }, "*SBC E");
        initMem(0x0538, { 0xFD,0x9C });
        lines = disassembler_.disassembleForward(0x0538, memory_, 1);
        verifyLine(lines[0], 0x0538, { 0xFD,0x9C }, "*SBC IYH");
        initMem(0x053a, { 0xFD,0x9D });
        lines = disassembler_.disassembleForward(0x053a, memory_, 1);
        verifyLine(lines[0], 0x053a, { 0xFD,0x9D }, "*SBC IYL");
        initMem(0x053c, { 0xFD,0x9E,0xFD });
        lines = disassembler_.disassembleForward(0x053c, memory_, 1);
        verifyLine(lines[0], 0x053c, { 0xFD,0x9E,0xFD }, "SBC (IY-$03)");
        initMem(0x053e, { 0xFD,0x9F });
        lines = disassembler_.disassembleForward(0x053e, memory_, 1);
        verifyLine(lines[0], 0x053e, { 0xFD,0x9F }, "*SBC A");
        initMem(0x0540, { 0xFD,0xA0 });
        lines = disassembler_.disassembleForward(0x0540, memory_, 1);
        verifyLine(lines[0], 0x0540, { 0xFD,0xA0 }, "*AND B");
        initMem(0x0542, { 0xFD,0xA1 });
        lines = disassembler_.disassembleForward(0x0542, memory_, 1);
        verifyLine(lines[0], 0x0542, { 0xFD,0xA1 }, "*AND C");
        initMem(0x0544, { 0xFD,0xA2 });
        lines = disassembler_.disassembleForward(0x0544, memory_, 1);
        verifyLine(lines[0], 0x0544, { 0xFD,0xA2 }, "*AND D");
        initMem(0x0546, { 0xFD,0xA3 });
        lines = disassembler_.disassembleForward(0x0546, memory_, 1);
        verifyLine(lines[0], 0x0546, { 0xFD,0xA3 }, "*AND E");
        initMem(0x0548, { 0xFD,0xA4 });
        lines = disassembler_.disassembleForward(0x0548, memory_, 1);
        verifyLine(lines[0], 0x0548, { 0xFD,0xA4 }, "*AND IYH");
        initMem(0x054a, { 0xFD,0xA5 });
        lines = disassembler_.disassembleForward(0x054a, memory_, 1);
        verifyLine(lines[0], 0x054a, { 0xFD,0xA5 }, "*AND IYL");
        initMem(0x054c, { 0xFD,0xA6,0xFD });
        lines = disassembler_.disassembleForward(0x054c, memory_, 1);
        verifyLine(lines[0], 0x054c, { 0xFD,0xA6,0xFD }, "AND (IY-$03)");
        initMem(0x054e, { 0xFD,0xA7 });
        lines = disassembler_.disassembleForward(0x054e, memory_, 1);
        verifyLine(lines[0], 0x054e, { 0xFD,0xA7 }, "*AND A");
        initMem(0x0550, { 0xFD,0xA8 });
        lines = disassembler_.disassembleForward(0x0550, memory_, 1);
        verifyLine(lines[0], 0x0550, { 0xFD,0xA8 }, "*XOR B");
        initMem(0x0552, { 0xFD,0xA9 });
        lines = disassembler_.disassembleForward(0x0552, memory_, 1);
        verifyLine(lines[0], 0x0552, { 0xFD,0xA9 }, "*XOR C");
        initMem(0x0554, { 0xFD,0xAA });
        lines = disassembler_.disassembleForward(0x0554, memory_, 1);
        verifyLine(lines[0], 0x0554, { 0xFD,0xAA }, "*XOR D");
        initMem(0x0556, { 0xFD,0xAB });
        lines = disassembler_.disassembleForward(0x0556, memory_, 1);
        verifyLine(lines[0], 0x0556, { 0xFD,0xAB }, "*XOR E");
        initMem(0x0558, { 0xFD,0xAC });
        lines = disassembler_.disassembleForward(0x0558, memory_, 1);
        verifyLine(lines[0], 0x0558, { 0xFD,0xAC }, "*XOR IYH");
        initMem(0x055a, { 0xFD,0xAD });
        lines = disassembler_.disassembleForward(0x055a, memory_, 1);
        verifyLine(lines[0], 0x055a, { 0xFD,0xAD }, "*XOR IYL");
        initMem(0x055c, { 0xFD,0xAE,0xFD });
        lines = disassembler_.disassembleForward(0x055c, memory_, 1);
        verifyLine(lines[0], 0x055c, { 0xFD,0xAE,0xFD }, "XOR (IY-$03)");
        initMem(0x055e, { 0xFD,0xAF });
        lines = disassembler_.disassembleForward(0x055e, memory_, 1);
        verifyLine(lines[0], 0x055e, { 0xFD,0xAF }, "*XOR A");
        initMem(0x0560, { 0xFD,0xB0 });
        lines = disassembler_.disassembleForward(0x0560, memory_, 1);
        verifyLine(lines[0], 0x0560, { 0xFD,0xB0 }, "*OR B");
        initMem(0x0562, { 0xFD,0xB1 });
        lines = disassembler_.disassembleForward(0x0562, memory_, 1);
        verifyLine(lines[0], 0x0562, { 0xFD,0xB1 }, "*OR C");
        initMem(0x0564, { 0xFD,0xB2 });
        lines = disassembler_.disassembleForward(0x0564, memory_, 1);
        verifyLine(lines[0], 0x0564, { 0xFD,0xB2 }, "*OR D");
        initMem(0x0566, { 0xFD,0xB3 });
        lines = disassembler_.disassembleForward(0x0566, memory_, 1);
        verifyLine(lines[0], 0x0566, { 0xFD,0xB3 }, "*OR E");
        initMem(0x0568, { 0xFD,0xB4 });
        lines = disassembler_.disassembleForward(0x0568, memory_, 1);
        verifyLine(lines[0], 0x0568, { 0xFD,0xB4 }, "*OR IYH");
        initMem(0x056a, { 0xFD,0xB5 });
        lines = disassembler_.disassembleForward(0x056a, memory_, 1);
        verifyLine(lines[0], 0x056a, { 0xFD,0xB5 }, "*OR IYL");
        initMem(0x056c, { 0xFD,0xB6,0xFD });
        lines = disassembler_.disassembleForward(0x056c, memory_, 1);
        verifyLine(lines[0], 0x056c, { 0xFD,0xB6,0xFD }, "OR (IY-$03)");
        initMem(0x056e, { 0xFD,0xB7 });
        lines = disassembler_.disassembleForward(0x056e, memory_, 1);
        verifyLine(lines[0], 0x056e, { 0xFD,0xB7 }, "*OR A");
        initMem(0x0570, { 0xFD,0xB8 });
        lines = disassembler_.disassembleForward(0x0570, memory_, 1);
        verifyLine(lines[0], 0x0570, { 0xFD,0xB8 }, "*CP B");
        initMem(0x0572, { 0xFD,0xB9 });
        lines = disassembler_.disassembleForward(0x0572, memory_, 1);
        verifyLine(lines[0], 0x0572, { 0xFD,0xB9 }, "*CP C");
        initMem(0x0574, { 0xFD,0xBA });
        lines = disassembler_.disassembleForward(0x0574, memory_, 1);
        verifyLine(lines[0], 0x0574, { 0xFD,0xBA }, "*CP D");
        initMem(0x0576, { 0xFD,0xBB });
        lines = disassembler_.disassembleForward(0x0576, memory_, 1);
        verifyLine(lines[0], 0x0576, { 0xFD,0xBB }, "*CP E");
        initMem(0x0578, { 0xFD,0xBC });
        lines = disassembler_.disassembleForward(0x0578, memory_, 1);
        verifyLine(lines[0], 0x0578, { 0xFD,0xBC }, "*CP IYH");
        initMem(0x057a, { 0xFD,0xBD });
        lines = disassembler_.disassembleForward(0x057a, memory_, 1);
        verifyLine(lines[0], 0x057a, { 0xFD,0xBD }, "*CP IYL");
        initMem(0x057c, { 0xFD,0xBE,0xFD });
        lines = disassembler_.disassembleForward(0x057c, memory_, 1);
        verifyLine(lines[0], 0x057c, { 0xFD,0xBE,0xFD }, "CP (IY-$03)");
        initMem(0x057e, { 0xFD,0xBF });
        lines = disassembler_.disassembleForward(0x057e, memory_, 1);
        verifyLine(lines[0], 0x057e, { 0xFD,0xBF }, "*CP A");
        initMem(0x0580, { 0xFD,0xC0 });
        lines = disassembler_.disassembleForward(0x0580, memory_, 1);
        verifyLine(lines[0], 0x0580, { 0xFD,0xC0 }, "*RET NZ");
        initMem(0x0582, { 0xFD,0xC1 });
        lines = disassembler_.disassembleForward(0x0582, memory_, 1);
        verifyLine(lines[0], 0x0582, { 0xFD,0xC1 }, "*POP BC");
        initMem(0x0584, { 0xFD,0xC2,0xFD,0xC3 });
        lines = disassembler_.disassembleForward(0x0584, memory_, 1);
        verifyLine(lines[0], 0x0584, { 0xFD,0xC2,0xFD,0xC3 }, "*JP NZ, $C3FD");
        initMem(0x0586, { 0xFD,0xC3,0xFD,0xC4 });
        lines = disassembler_.disassembleForward(0x0586, memory_, 1);
        verifyLine(lines[0], 0x0586, { 0xFD,0xC3,0xFD,0xC4 }, "*JP $C4FD");
        initMem(0x0588, { 0xFD,0xC4,0xFD,0xC5 });
        lines = disassembler_.disassembleForward(0x0588, memory_, 1);
        verifyLine(lines[0], 0x0588, { 0xFD,0xC4,0xFD,0xC5 }, "*CALL NZ, $C5FD");
        initMem(0x058a, { 0xFD,0xC5 });
        lines = disassembler_.disassembleForward(0x058a, memory_, 1);
        verifyLine(lines[0], 0x058a, { 0xFD,0xC5 }, "*PUSH BC");
        initMem(0x058c, { 0xFD,0xC6,0xFD });
        lines = disassembler_.disassembleForward(0x058c, memory_, 1);
        verifyLine(lines[0], 0x058c, { 0xFD,0xC6,0xFD }, "*ADD #$FD");
        initMem(0x058e, { 0xFD,0xC7 });
        lines = disassembler_.disassembleForward(0x058e, memory_, 1);
        verifyLine(lines[0], 0x058e, { 0xFD,0xC7 }, "*RST 00");
        initMem(0x0590, { 0xFD,0xC8 });
        lines = disassembler_.disassembleForward(0x0590, memory_, 1);
        verifyLine(lines[0], 0x0590, { 0xFD,0xC8 }, "*RET Z");
        initMem(0x0592, { 0xFD,0xC9 });
        lines = disassembler_.disassembleForward(0x0592, memory_, 1);
        verifyLine(lines[0], 0x0592, { 0xFD,0xC9 }, "*RET");
        initMem(0x0594, { 0xFD,0xCA,0xFD,0xCB });
        lines = disassembler_.disassembleForward(0x0594, memory_, 1);
        verifyLine(lines[0], 0x0594, { 0xFD,0xCA,0xFD,0xCB }, "*JP Z, $CBFD");
        initMem(0x0598, { 0xFD,0xCC,0xFD,0xCD });
        lines = disassembler_.disassembleForward(0x0598, memory_, 1);
        verifyLine(lines[0], 0x0598, { 0xFD,0xCC,0xFD,0xCD }, "*CALL Z, $CDFD");
        initMem(0x059a, { 0xFD,0xCD,0xFD,0xCE });
        lines = disassembler_.disassembleForward(0x059a, memory_, 1);
        verifyLine(lines[0], 0x059a, { 0xFD,0xCD,0xFD,0xCE }, "*CALL $CEFD");
        initMem(0x059c, { 0xFD,0xCE,0xFD });
        lines = disassembler_.disassembleForward(0x059c, memory_, 1);
        verifyLine(lines[0], 0x059c, { 0xFD,0xCE,0xFD }, "*ADC #$FD");
        initMem(0x059e, { 0xFD,0xCF });
        lines = disassembler_.disassembleForward(0x059e, memory_, 1);
        verifyLine(lines[0], 0x059e, { 0xFD,0xCF }, "*RST 08");
        initMem(0x05a0, { 0xFD,0xD0 });
        lines = disassembler_.disassembleForward(0x05a0, memory_, 1);
        verifyLine(lines[0], 0x05a0, { 0xFD,0xD0 }, "*RET NC");
        initMem(0x05a2, { 0xFD,0xD1 });
        lines = disassembler_.disassembleForward(0x05a2, memory_, 1);
        verifyLine(lines[0], 0x05a2, { 0xFD,0xD1 }, "*POP DE");
        initMem(0x05a4, { 0xFD,0xD2,0xFD,0xD3 });
        lines = disassembler_.disassembleForward(0x05a4, memory_, 1);
        verifyLine(lines[0], 0x05a4, { 0xFD,0xD2,0xFD,0xD3 }, "*JP NC, $D3FD");
        initMem(0x05a6, { 0xFD,0xD3,0xFD });
        lines = disassembler_.disassembleForward(0x05a6, memory_, 1);
        verifyLine(lines[0], 0x05a6, { 0xFD,0xD3,0xFD }, "*OUTA $FD");
        initMem(0x05a8, { 0xFD,0xD4,0xFD,0xD5 });
        lines = disassembler_.disassembleForward(0x05a8, memory_, 1);
        verifyLine(lines[0], 0x05a8, { 0xFD,0xD4,0xFD,0xD5 }, "*CALL NC, $D5FD");
        initMem(0x05aa, { 0xFD,0xD5 });
        lines = disassembler_.disassembleForward(0x05aa, memory_, 1);
        verifyLine(lines[0], 0x05aa, { 0xFD,0xD5 }, "*PUSH DE");
        initMem(0x05ac, { 0xFD,0xD6,0xFD });
        lines = disassembler_.disassembleForward(0x05ac, memory_, 1);
        verifyLine(lines[0], 0x05ac, { 0xFD,0xD6,0xFD }, "*SUB #$FD");
        initMem(0x05ae, { 0xFD,0xD7 });
        lines = disassembler_.disassembleForward(0x05ae, memory_, 1);
        verifyLine(lines[0], 0x05ae, { 0xFD,0xD7 }, "*RST 10");
        initMem(0x05b0, { 0xFD,0xD8 });
        lines = disassembler_.disassembleForward(0x05b0, memory_, 1);
        verifyLine(lines[0], 0x05b0, { 0xFD,0xD8 }, "*RET C");
        initMem(0x05b2, { 0xFD,0xD9 });
        lines = disassembler_.disassembleForward(0x05b2, memory_, 1);
        verifyLine(lines[0], 0x05b2, { 0xFD,0xD9 }, "*EXX");
        initMem(0x05b4, { 0xFD,0xDA,0xFD,0xDB });
        lines = disassembler_.disassembleForward(0x05b4, memory_, 1);
        verifyLine(lines[0], 0x05b4, { 0xFD,0xDA,0xFD,0xDB }, "*JP C, $DBFD");
        initMem(0x05b6, { 0xFD,0xDB,0xFD });
        lines = disassembler_.disassembleForward(0x05b6, memory_, 1);
        verifyLine(lines[0], 0x05b6, { 0xFD,0xDB,0xFD }, "*INA $FD");
        initMem(0x05b8, { 0xFD,0xDC,0xFD,0xDD });
        lines = disassembler_.disassembleForward(0x05b8, memory_, 1);
        verifyLine(lines[0], 0x05b8, { 0xFD,0xDC,0xFD,0xDD }, "*CALL C, $DDFD");
        initMem(0x05ba, { 0xFD,0xDD,0xFD });
        lines = disassembler_.disassembleForward(0x05ba, memory_, 1);
        verifyLine(lines[0], 0x05ba, { 0xFD,0xDD,0xFD }, "*NOP #$FD");
        initMem(0x05bc, { 0xFD,0xDE,0xFD });
        lines = disassembler_.disassembleForward(0x05bc, memory_, 1);
        verifyLine(lines[0], 0x05bc, { 0xFD,0xDE,0xFD }, "*SBC #$FD");
        initMem(0x05be, { 0xFD,0xDF });
        lines = disassembler_.disassembleForward(0x05be, memory_, 1);
        verifyLine(lines[0], 0x05be, { 0xFD,0xDF }, "*RST 18");
        initMem(0x05c0, { 0xFD,0xE0 });
        lines = disassembler_.disassembleForward(0x05c0, memory_, 1);
        verifyLine(lines[0], 0x05c0, { 0xFD,0xE0 }, "*RET PO");
        initMem(0x05c2, { 0xFD,0xE1 });
        lines = disassembler_.disassembleForward(0x05c2, memory_, 1);
        verifyLine(lines[0], 0x05c2, { 0xFD,0xE1 }, "POP IY");
        initMem(0x05c4, { 0xFD,0xE2,0xFD,0xE3 });
        lines = disassembler_.disassembleForward(0x05c4, memory_, 1);
        verifyLine(lines[0], 0x05c4, { 0xFD,0xE2,0xFD,0xE3 }, "*JP PO, $E3FD");
        initMem(0x05c6, { 0xFD,0xE3 });
        lines = disassembler_.disassembleForward(0x05c6, memory_, 1);
        verifyLine(lines[0], 0x05c6, { 0xFD,0xE3 }, "EX (SP),IY");
        initMem(0x05c8, { 0xFD,0xE4,0xFD,0xE5 });
        lines = disassembler_.disassembleForward(0x05c8, memory_, 1);
        verifyLine(lines[0], 0x05c8, { 0xFD,0xE4,0xFD,0xE5 }, "*CALL PO, $E5FD");
        initMem(0x05ca, { 0xFD,0xE5 });
        lines = disassembler_.disassembleForward(0x05ca, memory_, 1);
        verifyLine(lines[0], 0x05ca, { 0xFD,0xE5 }, "PUSH IY");
        initMem(0x05cc, { 0xFD,0xE6,0xFD });
        lines = disassembler_.disassembleForward(0x05cc, memory_, 1);
        verifyLine(lines[0], 0x05cc, { 0xFD,0xE6,0xFD }, "*AND #$FD");
        initMem(0x05ce, { 0xFD,0xE7 });
        lines = disassembler_.disassembleForward(0x05ce, memory_, 1);
        verifyLine(lines[0], 0x05ce, { 0xFD,0xE7 }, "*RST 20");
        initMem(0x05d0, { 0xFD,0xE8 });
        lines = disassembler_.disassembleForward(0x05d0, memory_, 1);
        verifyLine(lines[0], 0x05d0, { 0xFD,0xE8 }, "*RET PE");
        initMem(0x05d2, { 0xFD,0xE9 });
        lines = disassembler_.disassembleForward(0x05d2, memory_, 1);
        verifyLine(lines[0], 0x05d2, { 0xFD,0xE9 }, "JP (IY)");
        initMem(0x05d4, { 0xFD,0xEA,0xFD,0xEB });
        lines = disassembler_.disassembleForward(0x05d4, memory_, 1);
        verifyLine(lines[0], 0x05d4, { 0xFD,0xEA,0xFD,0xEB }, "*JP PE, $EBFD");
        initMem(0x05d6, { 0xFD,0xEB });
        lines = disassembler_.disassembleForward(0x05d6, memory_, 1);
        verifyLine(lines[0], 0x05d6, { 0xFD,0xEB }, "*EX DE,HL");
        initMem(0x05d8, { 0xFD,0xEC,0xFD,0xED });
        lines = disassembler_.disassembleForward(0x05d8, memory_, 1);
        verifyLine(lines[0], 0x05d8, { 0xFD,0xEC,0xFD,0xED }, "*CALL PE, $EDFD");
        initMem(0x05da, { 0xFD,0xED,0xFD });
        lines = disassembler_.disassembleForward(0x05da, memory_, 1);
        verifyLine(lines[0], 0x05da, { 0xFD,0xED,0xFD }, "*PFX_FDED #$FD");
        initMem(0x05dc, { 0xFD,0xEE,0xFD });
        lines = disassembler_.disassembleForward(0x05dc, memory_, 1);
        verifyLine(lines[0], 0x05dc, { 0xFD,0xEE,0xFD }, "*XOR #$FD");
        initMem(0x05de, { 0xFD,0xEF });
        lines = disassembler_.disassembleForward(0x05de, memory_, 1);
        verifyLine(lines[0], 0x05de, { 0xFD,0xEF }, "*RST 28");
        initMem(0x05e0, { 0xFD,0xF0 });
        lines = disassembler_.disassembleForward(0x05e0, memory_, 1);
        verifyLine(lines[0], 0x05e0, { 0xFD,0xF0 }, "*RET P");
        initMem(0x05e2, { 0xFD,0xF1 });
        lines = disassembler_.disassembleForward(0x05e2, memory_, 1);
        verifyLine(lines[0], 0x05e2, { 0xFD,0xF1 }, "*POP AF");
        initMem(0x05e4, { 0xFD,0xF2,0xFD,0xF3 });
        lines = disassembler_.disassembleForward(0x05e4, memory_, 1);
        verifyLine(lines[0], 0x05e4, { 0xFD,0xF2,0xFD,0xF3 }, "*JP P, $F3FD");
        initMem(0x05e6, { 0xFD,0xF3 });
        lines = disassembler_.disassembleForward(0x05e6, memory_, 1);
        verifyLine(lines[0], 0x05e6, { 0xFD,0xF3 }, "*DI");
        initMem(0x05e8, { 0xFD,0xF4,0xFD,0xF5 });
        lines = disassembler_.disassembleForward(0x05e8, memory_, 1);
        verifyLine(lines[0], 0x05e8, { 0xFD,0xF4,0xFD,0xF5 }, "*CALL P, $F5FD");
        initMem(0x05ea, { 0xFD,0xF5 });
        lines = disassembler_.disassembleForward(0x05ea, memory_, 1);
        verifyLine(lines[0], 0x05ea, { 0xFD,0xF5 }, "*PUSH AF");
        initMem(0x05ec, { 0xFD,0xF6,0xFD });
        lines = disassembler_.disassembleForward(0x05ec, memory_, 1);
        verifyLine(lines[0], 0x05ec, { 0xFD,0xF6,0xFD }, "*OR #$FD");
        initMem(0x05ee, { 0xFD,0xF7 });
        lines = disassembler_.disassembleForward(0x05ee, memory_, 1);
        verifyLine(lines[0], 0x05ee, { 0xFD,0xF7 }, "*RST 30");
        initMem(0x05f0, { 0xFD,0xF8 });
        lines = disassembler_.disassembleForward(0x05f0, memory_, 1);
        verifyLine(lines[0], 0x05f0, { 0xFD,0xF8 }, "*RET M");
        initMem(0x05f2, { 0xFD,0xF9 });
        lines = disassembler_.disassembleForward(0x05f2, memory_, 1);
        verifyLine(lines[0], 0x05f2, { 0xFD,0xF9 }, "LD SP,IY");
        initMem(0x05f4, { 0xFD,0xFA,0xFD,0xFB });
        lines = disassembler_.disassembleForward(0x05f4, memory_, 1);
        verifyLine(lines[0], 0x05f4, { 0xFD,0xFA,0xFD,0xFB }, "*JP M, $FBFD");
        initMem(0x05f6, { 0xFD,0xFB });
        lines = disassembler_.disassembleForward(0x05f6, memory_, 1);
        verifyLine(lines[0], 0x05f6, { 0xFD,0xFB }, "*EI");
        initMem(0x05f8, { 0xFD,0xFC,0xFD,0xFD });
        lines = disassembler_.disassembleForward(0x05f8, memory_, 1);
        verifyLine(lines[0], 0x05f8, { 0xFD,0xFC,0xFD,0xFD }, "*CALL M, $FDFD");
        initMem(0x05fa, { 0xFD,0xFD,0xFD });
        lines = disassembler_.disassembleForward(0x05fa, memory_, 1);
        verifyLine(lines[0], 0x05fa, { 0xFD,0xFD,0xFD }, "*NOP #$FD");
        initMem(0x05fc, { 0xFD,0xFE,0xFD });
        lines = disassembler_.disassembleForward(0x05fc, memory_, 1);
        verifyLine(lines[0], 0x05fc, { 0xFD,0xFE,0xFD }, "*CP #$FD");
        initMem(0x05fe, { 0xFD,0xFF });
        lines = disassembler_.disassembleForward(0x05fe, memory_, 1);
        verifyLine(lines[0], 0x05fe, { 0xFD,0xFF }, "*RST 38");
    }

    void TestDisassembleForward_PrefixDDCB() {
        initMem(0x0400, { 0xDD,0xCB,0x23,0x00 });
        auto lines = disassembler_.disassembleForward(0x0400, memory_, 1);
        verifyLine(lines[0], 0x0400, { 0xDD,0xCB,0x23,0x00 }, "*RLC (IX+$23), B");
        initMem(0x0404, { 0xDD,0xCB,0x23,0x01 });
        lines = disassembler_.disassembleForward(0x0404, memory_, 1);
        verifyLine(lines[0], 0x0404, { 0xDD,0xCB,0x23,0x01 }, "*RLC (IX+$23), C");
        initMem(0x0408, { 0xDD,0xCB,0x23,0x02 });
        lines = disassembler_.disassembleForward(0x0408, memory_, 1);
        verifyLine(lines[0], 0x0408, { 0xDD,0xCB,0x23,0x02 }, "*RLC (IX+$23), D");
        initMem(0x040c, { 0xDD,0xCB,0x23,0x03 });
        lines = disassembler_.disassembleForward(0x040c, memory_, 1);
        verifyLine(lines[0], 0x040c, { 0xDD,0xCB,0x23,0x03 }, "*RLC (IX+$23), E");
        initMem(0x0410, { 0xDD,0xCB,0x23,0x04 });
        lines = disassembler_.disassembleForward(0x0410, memory_, 1);
        verifyLine(lines[0], 0x0410, { 0xDD,0xCB,0x23,0x04 }, "*RLC (IX+$23), H");
        initMem(0x0414, { 0xDD,0xCB,0x23,0x05 });
        lines = disassembler_.disassembleForward(0x0414, memory_, 1);
        verifyLine(lines[0], 0x0414, { 0xDD,0xCB,0x23,0x05 }, "*RLC (IX+$23), L");
        initMem(0x0418, { 0xDD,0xCB,0x23,0x06 });
        lines = disassembler_.disassembleForward(0x0418, memory_, 1);
        verifyLine(lines[0], 0x0418, { 0xDD,0xCB,0x23,0x06 }, "RLC (IX+$23)");
        initMem(0x041c, { 0xDD,0xCB,0x23,0x07 });
        lines = disassembler_.disassembleForward(0x041c, memory_, 1);
        verifyLine(lines[0], 0x041c, { 0xDD,0xCB,0x23,0x07 }, "*RLC (IX+$23), A");
        initMem(0x0420, { 0xDD,0xCB,0x23,0x08 });
        lines = disassembler_.disassembleForward(0x0420, memory_, 1);
        verifyLine(lines[0], 0x0420, { 0xDD,0xCB,0x23,0x08 }, "*RRC (IX+$23), B");
        initMem(0x0424, { 0xDD,0xCB,0x23,0x09 });
        lines = disassembler_.disassembleForward(0x0424, memory_, 1);
        verifyLine(lines[0], 0x0424, { 0xDD,0xCB,0x23,0x09 }, "*RRC (IX+$23), C");
        initMem(0x0428, { 0xDD,0xCB,0x23,0x0A });
        lines = disassembler_.disassembleForward(0x0428, memory_, 1);
        verifyLine(lines[0], 0x0428, { 0xDD,0xCB,0x23,0x0A }, "*RRC (IX+$23), D");
        initMem(0x042c, { 0xDD,0xCB,0x23,0x0B });
        lines = disassembler_.disassembleForward(0x042c, memory_, 1);
        verifyLine(lines[0], 0x042c, { 0xDD,0xCB,0x23,0x0B }, "*RRC (IX+$23), E");
        initMem(0x0430, { 0xDD,0xCB,0x23,0x0C });
        lines = disassembler_.disassembleForward(0x0430, memory_, 1);
        verifyLine(lines[0], 0x0430, { 0xDD,0xCB,0x23,0x0C }, "*RRC (IX+$23), H");
        initMem(0x0434, { 0xDD,0xCB,0x23,0x0D });
        lines = disassembler_.disassembleForward(0x0434, memory_, 1);
        verifyLine(lines[0], 0x0434, { 0xDD,0xCB,0x23,0x0D }, "*RRC (IX+$23), L");
        initMem(0x0438, { 0xDD,0xCB,0x23,0x0E });
        lines = disassembler_.disassembleForward(0x0438, memory_, 1);
        verifyLine(lines[0], 0x0438, { 0xDD,0xCB,0x23,0x0E }, "RRC (IX+$23)");
        initMem(0x043c, { 0xDD,0xCB,0x23,0x0F });
        lines = disassembler_.disassembleForward(0x043c, memory_, 1);
        verifyLine(lines[0], 0x043c, { 0xDD,0xCB,0x23,0x0F }, "*RRC (IX+$23), A");
        initMem(0x0440, { 0xDD,0xCB,0x23,0x10 });
        lines = disassembler_.disassembleForward(0x0440, memory_, 1);
        verifyLine(lines[0], 0x0440, { 0xDD,0xCB,0x23,0x10 }, "*RL (IX+$23), B");
        initMem(0x0444, { 0xDD,0xCB,0x23,0x11 });
        lines = disassembler_.disassembleForward(0x0444, memory_, 1);
        verifyLine(lines[0], 0x0444, { 0xDD,0xCB,0x23,0x11 }, "*RL (IX+$23), C");
        initMem(0x0448, { 0xDD,0xCB,0x23,0x12 });
        lines = disassembler_.disassembleForward(0x0448, memory_, 1);
        verifyLine(lines[0], 0x0448, { 0xDD,0xCB,0x23,0x12 }, "*RL (IX+$23), D");
        initMem(0x044c, { 0xDD,0xCB,0x23,0x13 });
        lines = disassembler_.disassembleForward(0x044c, memory_, 1);
        verifyLine(lines[0], 0x044c, { 0xDD,0xCB,0x23,0x13 }, "*RL (IX+$23), E");
        initMem(0x0450, { 0xDD,0xCB,0x23,0x14 });
        lines = disassembler_.disassembleForward(0x0450, memory_, 1);
        verifyLine(lines[0], 0x0450, { 0xDD,0xCB,0x23,0x14 }, "*RL (IX+$23), H");
        initMem(0x0454, { 0xDD,0xCB,0x23,0x15 });
        lines = disassembler_.disassembleForward(0x0454, memory_, 1);
        verifyLine(lines[0], 0x0454, { 0xDD,0xCB,0x23,0x15 }, "*RL (IX+$23), L");
        initMem(0x0458, { 0xDD,0xCB,0x23,0x16 });
        lines = disassembler_.disassembleForward(0x0458, memory_, 1);
        verifyLine(lines[0], 0x0458, { 0xDD,0xCB,0x23,0x16 }, "RL (IX+$23)");
        initMem(0x045c, { 0xDD,0xCB,0x23,0x17 });
        lines = disassembler_.disassembleForward(0x045c, memory_, 1);
        verifyLine(lines[0], 0x045c, { 0xDD,0xCB,0x23,0x17 }, "*RL (IX+$23), A");
        initMem(0x0460, { 0xDD,0xCB,0x23,0x18 });
        lines = disassembler_.disassembleForward(0x0460, memory_, 1);
        verifyLine(lines[0], 0x0460, { 0xDD,0xCB,0x23,0x18 }, "*RR (IX+$23), B");
        initMem(0x0464, { 0xDD,0xCB,0x23,0x19 });
        lines = disassembler_.disassembleForward(0x0464, memory_, 1);
        verifyLine(lines[0], 0x0464, { 0xDD,0xCB,0x23,0x19 }, "*RR (IX+$23), C");
        initMem(0x0468, { 0xDD,0xCB,0x23,0x1A });
        lines = disassembler_.disassembleForward(0x0468, memory_, 1);
        verifyLine(lines[0], 0x0468, { 0xDD,0xCB,0x23,0x1A }, "*RR (IX+$23), D");
        initMem(0x046c, { 0xDD,0xCB,0x23,0x1B });
        lines = disassembler_.disassembleForward(0x046c, memory_, 1);
        verifyLine(lines[0], 0x046c, { 0xDD,0xCB,0x23,0x1B }, "*RR (IX+$23), E");
        initMem(0x0470, { 0xDD,0xCB,0x23,0x1C });
        lines = disassembler_.disassembleForward(0x0470, memory_, 1);
        verifyLine(lines[0], 0x0470, { 0xDD,0xCB,0x23,0x1C }, "*RR (IX+$23), H");
        initMem(0x0474, { 0xDD,0xCB,0x23,0x1D });
        lines = disassembler_.disassembleForward(0x0474, memory_, 1);
        verifyLine(lines[0], 0x0474, { 0xDD,0xCB,0x23,0x1D }, "*RR (IX+$23), L");
        initMem(0x0478, { 0xDD,0xCB,0x23,0x1E });
        lines = disassembler_.disassembleForward(0x0478, memory_, 1);
        verifyLine(lines[0], 0x0478, { 0xDD,0xCB,0x23,0x1E }, "RR (IX+$23)");
        initMem(0x047c, { 0xDD,0xCB,0x23,0x1F });
        lines = disassembler_.disassembleForward(0x047c, memory_, 1);
        verifyLine(lines[0], 0x047c, { 0xDD,0xCB,0x23,0x1F }, "*RR (IX+$23), A");
        initMem(0x0480, { 0xDD,0xCB,0x23,0x20 });
        lines = disassembler_.disassembleForward(0x0480, memory_, 1);
        verifyLine(lines[0], 0x0480, { 0xDD,0xCB,0x23,0x20 }, "*SLA (IX+$23), B");
        initMem(0x0484, { 0xDD,0xCB,0x23,0x21 });
        lines = disassembler_.disassembleForward(0x0484, memory_, 1);
        verifyLine(lines[0], 0x0484, { 0xDD,0xCB,0x23,0x21 }, "*SLA (IX+$23), C");
        initMem(0x0488, { 0xDD,0xCB,0x23,0x22 });
        lines = disassembler_.disassembleForward(0x0488, memory_, 1);
        verifyLine(lines[0], 0x0488, { 0xDD,0xCB,0x23,0x22 }, "*SLA (IX+$23), D");
        initMem(0x048c, { 0xDD,0xCB,0x23,0x23 });
        lines = disassembler_.disassembleForward(0x048c, memory_, 1);
        verifyLine(lines[0], 0x048c, { 0xDD,0xCB,0x23,0x23 }, "*SLA (IX+$23), E");
        initMem(0x0490, { 0xDD,0xCB,0x23,0x24 });
        lines = disassembler_.disassembleForward(0x0490, memory_, 1);
        verifyLine(lines[0], 0x0490, { 0xDD,0xCB,0x23,0x24 }, "*SLA (IX+$23), H");
        initMem(0x0494, { 0xDD,0xCB,0x23,0x25 });
        lines = disassembler_.disassembleForward(0x0494, memory_, 1);
        verifyLine(lines[0], 0x0494, { 0xDD,0xCB,0x23,0x25 }, "*SLA (IX+$23), L");
        initMem(0x0498, { 0xDD,0xCB,0x23,0x26 });
        lines = disassembler_.disassembleForward(0x0498, memory_, 1);
        verifyLine(lines[0], 0x0498, { 0xDD,0xCB,0x23,0x26 }, "SLA (IX+$23)");
        initMem(0x049c, { 0xDD,0xCB,0x23,0x27 });
        lines = disassembler_.disassembleForward(0x049c, memory_, 1);
        verifyLine(lines[0], 0x049c, { 0xDD,0xCB,0x23,0x27 }, "*SLA (IX+$23), A");
        initMem(0x04a0, { 0xDD,0xCB,0x23,0x28 });
        lines = disassembler_.disassembleForward(0x04a0, memory_, 1);
        verifyLine(lines[0], 0x04a0, { 0xDD,0xCB,0x23,0x28 }, "*SRA (IX+$23), B");
        initMem(0x04a4, { 0xDD,0xCB,0x23,0x29 });
        lines = disassembler_.disassembleForward(0x04a4, memory_, 1);
        verifyLine(lines[0], 0x04a4, { 0xDD,0xCB,0x23,0x29 }, "*SRA (IX+$23), C");
        initMem(0x04a8, { 0xDD,0xCB,0x23,0x2A });
        lines = disassembler_.disassembleForward(0x04a8, memory_, 1);
        verifyLine(lines[0], 0x04a8, { 0xDD,0xCB,0x23,0x2A }, "*SRA (IX+$23), D");
        initMem(0x04ac, { 0xDD,0xCB,0x23,0x2B });
        lines = disassembler_.disassembleForward(0x04ac, memory_, 1);
        verifyLine(lines[0], 0x04ac, { 0xDD,0xCB,0x23,0x2B }, "*SRA (IX+$23), E");
        initMem(0x04b0, { 0xDD,0xCB,0x23,0x2C });
        lines = disassembler_.disassembleForward(0x04b0, memory_, 1);
        verifyLine(lines[0], 0x04b0, { 0xDD,0xCB,0x23,0x2C }, "*SRA (IX+$23), H");
        initMem(0x04b4, { 0xDD,0xCB,0x23,0x2D });
        lines = disassembler_.disassembleForward(0x04b4, memory_, 1);
        verifyLine(lines[0], 0x04b4, { 0xDD,0xCB,0x23,0x2D }, "*SRA (IX+$23), L");
        initMem(0x04b8, { 0xDD,0xCB,0x23,0x2E });
        lines = disassembler_.disassembleForward(0x04b8, memory_, 1);
        verifyLine(lines[0], 0x04b8, { 0xDD,0xCB,0x23,0x2E }, "SRA (IX+$23)");
        initMem(0x04bc, { 0xDD,0xCB,0x23,0x2F });
        lines = disassembler_.disassembleForward(0x04bc, memory_, 1);
        verifyLine(lines[0], 0x04bc, { 0xDD,0xCB,0x23,0x2F }, "*SRA (IX+$23), A");
        initMem(0x04c0, { 0xDD,0xCB,0x23,0x30 });
        lines = disassembler_.disassembleForward(0x04c0, memory_, 1);
        verifyLine(lines[0], 0x04c0, { 0xDD,0xCB,0x23,0x30 }, "*SLL (IX+$23), B");
        initMem(0x04c4, { 0xDD,0xCB,0x23,0x31 });
        lines = disassembler_.disassembleForward(0x04c4, memory_, 1);
        verifyLine(lines[0], 0x04c4, { 0xDD,0xCB,0x23,0x31 }, "*SLL (IX+$23), C");
        initMem(0x04c8, { 0xDD,0xCB,0x23,0x32 });
        lines = disassembler_.disassembleForward(0x04c8, memory_, 1);
        verifyLine(lines[0], 0x04c8, { 0xDD,0xCB,0x23,0x32 }, "*SLL (IX+$23), D");
        initMem(0x04cc, { 0xDD,0xCB,0x23,0x33 });
        lines = disassembler_.disassembleForward(0x04cc, memory_, 1);
        verifyLine(lines[0], 0x04cc, { 0xDD,0xCB,0x23,0x33 }, "*SLL (IX+$23), E");
        initMem(0x04d0, { 0xDD,0xCB,0x23,0x34 });
        lines = disassembler_.disassembleForward(0x04d0, memory_, 1);
        verifyLine(lines[0], 0x04d0, { 0xDD,0xCB,0x23,0x34 }, "*SLL (IX+$23), H");
        initMem(0x04d4, { 0xDD,0xCB,0x23,0x35 });
        lines = disassembler_.disassembleForward(0x04d4, memory_, 1);
        verifyLine(lines[0], 0x04d4, { 0xDD,0xCB,0x23,0x35 }, "*SLL (IX+$23), L");
        initMem(0x04d8, { 0xDD,0xCB,0x23,0x36 });
        lines = disassembler_.disassembleForward(0x04d8, memory_, 1);
        verifyLine(lines[0], 0x04d8, { 0xDD,0xCB,0x23,0x36 }, "*SLL (IX+$23)");
        initMem(0x04dc, { 0xDD,0xCB,0x23,0x37 });
        lines = disassembler_.disassembleForward(0x04dc, memory_, 1);
        verifyLine(lines[0], 0x04dc, { 0xDD,0xCB,0x23,0x37 }, "*SLL (IX+$23), A");
        initMem(0x04e0, { 0xDD,0xCB,0x23,0x38 });
        lines = disassembler_.disassembleForward(0x04e0, memory_, 1);
        verifyLine(lines[0], 0x04e0, { 0xDD,0xCB,0x23,0x38 }, "*SRL (IX+$23), B");
        initMem(0x04e4, { 0xDD,0xCB,0x23,0x39 });
        lines = disassembler_.disassembleForward(0x04e4, memory_, 1);
        verifyLine(lines[0], 0x04e4, { 0xDD,0xCB,0x23,0x39 }, "*SRL (IX+$23), C");
        initMem(0x04e8, { 0xDD,0xCB,0x23,0x3A });
        lines = disassembler_.disassembleForward(0x04e8, memory_, 1);
        verifyLine(lines[0], 0x04e8, { 0xDD,0xCB,0x23,0x3A }, "*SRL (IX+$23), D");
        initMem(0x04ec, { 0xDD,0xCB,0x23,0x3B });
        lines = disassembler_.disassembleForward(0x04ec, memory_, 1);
        verifyLine(lines[0], 0x04ec, { 0xDD,0xCB,0x23,0x3B }, "*SRL (IX+$23), E");
        initMem(0x04f0, { 0xDD,0xCB,0x23,0x3C });
        lines = disassembler_.disassembleForward(0x04f0, memory_, 1);
        verifyLine(lines[0], 0x04f0, { 0xDD,0xCB,0x23,0x3C }, "*SRL (IX+$23), H");
        initMem(0x04f4, { 0xDD,0xCB,0x23,0x3D });
        lines = disassembler_.disassembleForward(0x04f4, memory_, 1);
        verifyLine(lines[0], 0x04f4, { 0xDD,0xCB,0x23,0x3D }, "*SRL (IX+$23), L");
        initMem(0x04f8, { 0xDD,0xCB,0x23,0x3E });
        lines = disassembler_.disassembleForward(0x04f8, memory_, 1);
        verifyLine(lines[0], 0x04f8, { 0xDD,0xCB,0x23,0x3E }, "SRL (IX+$23)");
        initMem(0x04fc, { 0xDD,0xCB,0x23,0x3F });
        lines = disassembler_.disassembleForward(0x04fc, memory_, 1);
        verifyLine(lines[0], 0x04fc, { 0xDD,0xCB,0x23,0x3F }, "*SRL (IX+$23), A");
        initMem(0x0500, { 0xDD,0xCB,0x23,0x40 });
        lines = disassembler_.disassembleForward(0x0500, memory_, 1);
        verifyLine(lines[0], 0x0500, { 0xDD,0xCB,0x23,0x40 }, "*BIT 0, (IX+$23)");
        initMem(0x0504, { 0xDD,0xCB,0x23,0x41 });
        lines = disassembler_.disassembleForward(0x0504, memory_, 1);
        verifyLine(lines[0], 0x0504, { 0xDD,0xCB,0x23,0x41 }, "*BIT 0, (IX+$23)");
        initMem(0x0508, { 0xDD,0xCB,0x23,0x42 });
        lines = disassembler_.disassembleForward(0x0508, memory_, 1);
        verifyLine(lines[0], 0x0508, { 0xDD,0xCB,0x23,0x42 }, "*BIT 0, (IX+$23)");
        initMem(0x050c, { 0xDD,0xCB,0x23,0x43 });
        lines = disassembler_.disassembleForward(0x050c, memory_, 1);
        verifyLine(lines[0], 0x050c, { 0xDD,0xCB,0x23,0x43 }, "*BIT 0, (IX+$23)");
        initMem(0x0510, { 0xDD,0xCB,0x23,0x44 });
        lines = disassembler_.disassembleForward(0x0510, memory_, 1);
        verifyLine(lines[0], 0x0510, { 0xDD,0xCB,0x23,0x44 }, "*BIT 0, (IX+$23)");
        initMem(0x0514, { 0xDD,0xCB,0x23,0x45 });
        lines = disassembler_.disassembleForward(0x0514, memory_, 1);
        verifyLine(lines[0], 0x0514, { 0xDD,0xCB,0x23,0x45 }, "*BIT 0, (IX+$23)");
        initMem(0x0518, { 0xDD,0xCB,0x23,0x46 });
        lines = disassembler_.disassembleForward(0x0518, memory_, 1);
        verifyLine(lines[0], 0x0518, { 0xDD,0xCB,0x23,0x46 }, "BIT 0, (IX+$23)");
        initMem(0x051c, { 0xDD,0xCB,0x23,0x47 });
        lines = disassembler_.disassembleForward(0x051c, memory_, 1);
        verifyLine(lines[0], 0x051c, { 0xDD,0xCB,0x23,0x47 }, "*BIT 0, (IX+$23)");
        initMem(0x0520, { 0xDD,0xCB,0x23,0x48 });
        lines = disassembler_.disassembleForward(0x0520, memory_, 1);
        verifyLine(lines[0], 0x0520, { 0xDD,0xCB,0x23,0x48 }, "*BIT 1, (IX+$23)");
        initMem(0x0524, { 0xDD,0xCB,0x23,0x49 });
        lines = disassembler_.disassembleForward(0x0524, memory_, 1);
        verifyLine(lines[0], 0x0524, { 0xDD,0xCB,0x23,0x49 }, "*BIT 1, (IX+$23)");
        initMem(0x0528, { 0xDD,0xCB,0x23,0x4A });
        lines = disassembler_.disassembleForward(0x0528, memory_, 1);
        verifyLine(lines[0], 0x0528, { 0xDD,0xCB,0x23,0x4A }, "*BIT 1, (IX+$23)");
        initMem(0x052c, { 0xDD,0xCB,0x23,0x4B });
        lines = disassembler_.disassembleForward(0x052c, memory_, 1);
        verifyLine(lines[0], 0x052c, { 0xDD,0xCB,0x23,0x4B }, "*BIT 1, (IX+$23)");
        initMem(0x0530, { 0xDD,0xCB,0x23,0x4C });
        lines = disassembler_.disassembleForward(0x0530, memory_, 1);
        verifyLine(lines[0], 0x0530, { 0xDD,0xCB,0x23,0x4C }, "*BIT 1, (IX+$23)");
        initMem(0x0534, { 0xDD,0xCB,0x23,0x4D });
        lines = disassembler_.disassembleForward(0x0534, memory_, 1);
        verifyLine(lines[0], 0x0534, { 0xDD,0xCB,0x23,0x4D }, "*BIT 1, (IX+$23)");
        initMem(0x0538, { 0xDD,0xCB,0x23,0x4E });
        lines = disassembler_.disassembleForward(0x0538, memory_, 1);
        verifyLine(lines[0], 0x0538, { 0xDD,0xCB,0x23,0x4E }, "BIT 1, (IX+$23)");
        initMem(0x053c, { 0xDD,0xCB,0x23,0x4F });
        lines = disassembler_.disassembleForward(0x053c, memory_, 1);
        verifyLine(lines[0], 0x053c, { 0xDD,0xCB,0x23,0x4F }, "*BIT 1, (IX+$23)");
        initMem(0x0540, { 0xDD,0xCB,0x23,0x50 });
        lines = disassembler_.disassembleForward(0x0540, memory_, 1);
        verifyLine(lines[0], 0x0540, { 0xDD,0xCB,0x23,0x50 }, "*BIT 2, (IX+$23)");
        initMem(0x0544, { 0xDD,0xCB,0x23,0x51 });
        lines = disassembler_.disassembleForward(0x0544, memory_, 1);
        verifyLine(lines[0], 0x0544, { 0xDD,0xCB,0x23,0x51 }, "*BIT 2, (IX+$23)");
        initMem(0x0548, { 0xDD,0xCB,0x23,0x52 });
        lines = disassembler_.disassembleForward(0x0548, memory_, 1);
        verifyLine(lines[0], 0x0548, { 0xDD,0xCB,0x23,0x52 }, "*BIT 2, (IX+$23)");
        initMem(0x054c, { 0xDD,0xCB,0x23,0x53 });
        lines = disassembler_.disassembleForward(0x054c, memory_, 1);
        verifyLine(lines[0], 0x054c, { 0xDD,0xCB,0x23,0x53 }, "*BIT 2, (IX+$23)");
        initMem(0x0550, { 0xDD,0xCB,0x23,0x54 });
        lines = disassembler_.disassembleForward(0x0550, memory_, 1);
        verifyLine(lines[0], 0x0550, { 0xDD,0xCB,0x23,0x54 }, "*BIT 2, (IX+$23)");
        initMem(0x0554, { 0xDD,0xCB,0x23,0x55 });
        lines = disassembler_.disassembleForward(0x0554, memory_, 1);
        verifyLine(lines[0], 0x0554, { 0xDD,0xCB,0x23,0x55 }, "*BIT 2, (IX+$23)");
        initMem(0x0558, { 0xDD,0xCB,0x23,0x56 });
        lines = disassembler_.disassembleForward(0x0558, memory_, 1);
        verifyLine(lines[0], 0x0558, { 0xDD,0xCB,0x23,0x56 }, "BIT 2, (IX+$23)");
        initMem(0x055c, { 0xDD,0xCB,0x23,0x57 });
        lines = disassembler_.disassembleForward(0x055c, memory_, 1);
        verifyLine(lines[0], 0x055c, { 0xDD,0xCB,0x23,0x57 }, "*BIT 2, (IX+$23)");
        initMem(0x0560, { 0xDD,0xCB,0x23,0x58 });
        lines = disassembler_.disassembleForward(0x0560, memory_, 1);
        verifyLine(lines[0], 0x0560, { 0xDD,0xCB,0x23,0x58 }, "*BIT 3, (IX+$23)");
        initMem(0x0564, { 0xDD,0xCB,0x23,0x59 });
        lines = disassembler_.disassembleForward(0x0564, memory_, 1);
        verifyLine(lines[0], 0x0564, { 0xDD,0xCB,0x23,0x59 }, "*BIT 3, (IX+$23)");
        initMem(0x0568, { 0xDD,0xCB,0x23,0x5A });
        lines = disassembler_.disassembleForward(0x0568, memory_, 1);
        verifyLine(lines[0], 0x0568, { 0xDD,0xCB,0x23,0x5A }, "*BIT 3, (IX+$23)");
        initMem(0x056c, { 0xDD,0xCB,0x23,0x5B });
        lines = disassembler_.disassembleForward(0x056c, memory_, 1);
        verifyLine(lines[0], 0x056c, { 0xDD,0xCB,0x23,0x5B }, "*BIT 3, (IX+$23)");
        initMem(0x0570, { 0xDD,0xCB,0x23,0x5C });
        lines = disassembler_.disassembleForward(0x0570, memory_, 1);
        verifyLine(lines[0], 0x0570, { 0xDD,0xCB,0x23,0x5C }, "*BIT 3, (IX+$23)");
        initMem(0x0574, { 0xDD,0xCB,0x23,0x5D });
        lines = disassembler_.disassembleForward(0x0574, memory_, 1);
        verifyLine(lines[0], 0x0574, { 0xDD,0xCB,0x23,0x5D }, "*BIT 3, (IX+$23)");
        initMem(0x0578, { 0xDD,0xCB,0x23,0x5E });
        lines = disassembler_.disassembleForward(0x0578, memory_, 1);
        verifyLine(lines[0], 0x0578, { 0xDD,0xCB,0x23,0x5E }, "BIT 3, (IX+$23)");
        initMem(0x057c, { 0xDD,0xCB,0x23,0x5F });
        lines = disassembler_.disassembleForward(0x057c, memory_, 1);
        verifyLine(lines[0], 0x057c, { 0xDD,0xCB,0x23,0x5F }, "*BIT 3, (IX+$23)");
        initMem(0x0580, { 0xDD,0xCB,0x23,0x60 });
        lines = disassembler_.disassembleForward(0x0580, memory_, 1);
        verifyLine(lines[0], 0x0580, { 0xDD,0xCB,0x23,0x60 }, "*BIT 4, (IX+$23)");
        initMem(0x0584, { 0xDD,0xCB,0x23,0x61 });
        lines = disassembler_.disassembleForward(0x0584, memory_, 1);
        verifyLine(lines[0], 0x0584, { 0xDD,0xCB,0x23,0x61 }, "*BIT 4, (IX+$23)");
        initMem(0x0588, { 0xDD,0xCB,0x23,0x62 });
        lines = disassembler_.disassembleForward(0x0588, memory_, 1);
        verifyLine(lines[0], 0x0588, { 0xDD,0xCB,0x23,0x62 }, "*BIT 4, (IX+$23)");
        initMem(0x058c, { 0xDD,0xCB,0x23,0x63 });
        lines = disassembler_.disassembleForward(0x058c, memory_, 1);
        verifyLine(lines[0], 0x058c, { 0xDD,0xCB,0x23,0x63 }, "*BIT 4, (IX+$23)");
        initMem(0x0590, { 0xDD,0xCB,0x23,0x64 });
        lines = disassembler_.disassembleForward(0x0590, memory_, 1);
        verifyLine(lines[0], 0x0590, { 0xDD,0xCB,0x23,0x64 }, "*BIT 4, (IX+$23)");
        initMem(0x0594, { 0xDD,0xCB,0x23,0x65 });
        lines = disassembler_.disassembleForward(0x0594, memory_, 1);
        verifyLine(lines[0], 0x0594, { 0xDD,0xCB,0x23,0x65 }, "*BIT 4, (IX+$23)");
        initMem(0x0598, { 0xDD,0xCB,0x23,0x66 });
        lines = disassembler_.disassembleForward(0x0598, memory_, 1);
        verifyLine(lines[0], 0x0598, { 0xDD,0xCB,0x23,0x66 }, "BIT 4, (IX+$23)");
        initMem(0x059c, { 0xDD,0xCB,0x23,0x67 });
        lines = disassembler_.disassembleForward(0x059c, memory_, 1);
        verifyLine(lines[0], 0x059c, { 0xDD,0xCB,0x23,0x67 }, "*BIT 4, (IX+$23)");
        initMem(0x05a0, { 0xDD,0xCB,0x23,0x68 });
        lines = disassembler_.disassembleForward(0x05a0, memory_, 1);
        verifyLine(lines[0], 0x05a0, { 0xDD,0xCB,0x23,0x68 }, "*BIT 5, (IX+$23)");
        initMem(0x05a4, { 0xDD,0xCB,0x23,0x69 });
        lines = disassembler_.disassembleForward(0x05a4, memory_, 1);
        verifyLine(lines[0], 0x05a4, { 0xDD,0xCB,0x23,0x69 }, "*BIT 5, (IX+$23)");
        initMem(0x05a8, { 0xDD,0xCB,0x23,0x6A });
        lines = disassembler_.disassembleForward(0x05a8, memory_, 1);
        verifyLine(lines[0], 0x05a8, { 0xDD,0xCB,0x23,0x6A }, "*BIT 5, (IX+$23)");
        initMem(0x05ac, { 0xDD,0xCB,0x23,0x6B });
        lines = disassembler_.disassembleForward(0x05ac, memory_, 1);
        verifyLine(lines[0], 0x05ac, { 0xDD,0xCB,0x23,0x6B }, "*BIT 5, (IX+$23)");
        initMem(0x05b0, { 0xDD,0xCB,0x23,0x6C });
        lines = disassembler_.disassembleForward(0x05b0, memory_, 1);
        verifyLine(lines[0], 0x05b0, { 0xDD,0xCB,0x23,0x6C }, "*BIT 5, (IX+$23)");
        initMem(0x05b4, { 0xDD,0xCB,0x23,0x6D });
        lines = disassembler_.disassembleForward(0x05b4, memory_, 1);
        verifyLine(lines[0], 0x05b4, { 0xDD,0xCB,0x23,0x6D }, "*BIT 5, (IX+$23)");
        initMem(0x05b8, { 0xDD,0xCB,0x23,0x6E });
        lines = disassembler_.disassembleForward(0x05b8, memory_, 1);
        verifyLine(lines[0], 0x05b8, { 0xDD,0xCB,0x23,0x6E }, "BIT 5, (IX+$23)");
        initMem(0x05bc, { 0xDD,0xCB,0x23,0x6F });
        lines = disassembler_.disassembleForward(0x05bc, memory_, 1);
        verifyLine(lines[0], 0x05bc, { 0xDD,0xCB,0x23,0x6F }, "*BIT 5, (IX+$23)");
        initMem(0x05c0, { 0xDD,0xCB,0x23,0x70 });
        lines = disassembler_.disassembleForward(0x05c0, memory_, 1);
        verifyLine(lines[0], 0x05c0, { 0xDD,0xCB,0x23,0x70 }, "*BIT 6, (IX+$23)");
        initMem(0x05c4, { 0xDD,0xCB,0x23,0x71 });
        lines = disassembler_.disassembleForward(0x05c4, memory_, 1);
        verifyLine(lines[0], 0x05c4, { 0xDD,0xCB,0x23,0x71 }, "*BIT 6, (IX+$23)");
        initMem(0x05c8, { 0xDD,0xCB,0x23,0x72 });
        lines = disassembler_.disassembleForward(0x05c8, memory_, 1);
        verifyLine(lines[0], 0x05c8, { 0xDD,0xCB,0x23,0x72 }, "*BIT 6, (IX+$23)");
        initMem(0x05cc, { 0xDD,0xCB,0x23,0x73 });
        lines = disassembler_.disassembleForward(0x05cc, memory_, 1);
        verifyLine(lines[0], 0x05cc, { 0xDD,0xCB,0x23,0x73 }, "*BIT 6, (IX+$23)");
        initMem(0x05d0, { 0xDD,0xCB,0x23,0x74 });
        lines = disassembler_.disassembleForward(0x05d0, memory_, 1);
        verifyLine(lines[0], 0x05d0, { 0xDD,0xCB,0x23,0x74 }, "*BIT 6, (IX+$23)");
        initMem(0x05d4, { 0xDD,0xCB,0x23,0x75 });
        lines = disassembler_.disassembleForward(0x05d4, memory_, 1);
        verifyLine(lines[0], 0x05d4, { 0xDD,0xCB,0x23,0x75 }, "*BIT 6, (IX+$23)");
        initMem(0x05d8, { 0xDD,0xCB,0x23,0x76 });
        lines = disassembler_.disassembleForward(0x05d8, memory_, 1);
        verifyLine(lines[0], 0x05d8, { 0xDD,0xCB,0x23,0x76 }, "BIT 6, (IX+$23)");
        initMem(0x05dc, { 0xDD,0xCB,0x23,0x77 });
        lines = disassembler_.disassembleForward(0x05dc, memory_, 1);
        verifyLine(lines[0], 0x05dc, { 0xDD,0xCB,0x23,0x77 }, "*BIT 6, (IX+$23)");
        initMem(0x05e0, { 0xDD,0xCB,0x23,0x78 });
        lines = disassembler_.disassembleForward(0x05e0, memory_, 1);
        verifyLine(lines[0], 0x05e0, { 0xDD,0xCB,0x23,0x78 }, "*BIT 7, (IX+$23)");
        initMem(0x05e4, { 0xDD,0xCB,0x23,0x79 });
        lines = disassembler_.disassembleForward(0x05e4, memory_, 1);
        verifyLine(lines[0], 0x05e4, { 0xDD,0xCB,0x23,0x79 }, "*BIT 7, (IX+$23)");
        initMem(0x05e8, { 0xDD,0xCB,0x23,0x7A });
        lines = disassembler_.disassembleForward(0x05e8, memory_, 1);
        verifyLine(lines[0], 0x05e8, { 0xDD,0xCB,0x23,0x7A }, "*BIT 7, (IX+$23)");
        initMem(0x05ec, { 0xDD,0xCB,0x23,0x7B });
        lines = disassembler_.disassembleForward(0x05ec, memory_, 1);
        verifyLine(lines[0], 0x05ec, { 0xDD,0xCB,0x23,0x7B }, "*BIT 7, (IX+$23)");
        initMem(0x05f0, { 0xDD,0xCB,0x23,0x7C });
        lines = disassembler_.disassembleForward(0x05f0, memory_, 1);
        verifyLine(lines[0], 0x05f0, { 0xDD,0xCB,0x23,0x7C }, "*BIT 7, (IX+$23)");
        initMem(0x05f4, { 0xDD,0xCB,0x23,0x7D });
        lines = disassembler_.disassembleForward(0x05f4, memory_, 1);
        verifyLine(lines[0], 0x05f4, { 0xDD,0xCB,0x23,0x7D }, "*BIT 7, (IX+$23)");
        initMem(0x05f8, { 0xDD,0xCB,0x23,0x7E });
        lines = disassembler_.disassembleForward(0x05f8, memory_, 1);
        verifyLine(lines[0], 0x05f8, { 0xDD,0xCB,0x23,0x7E }, "BIT 7, (IX+$23)");
        initMem(0x05fc, { 0xDD,0xCB,0x23,0x7F });
        lines = disassembler_.disassembleForward(0x05fc, memory_, 1);
        verifyLine(lines[0], 0x05fc, { 0xDD,0xCB,0x23,0x7F }, "*BIT 7, (IX+$23)");
        initMem(0x0600, { 0xDD,0xCB,0x23,0x80 });
        lines = disassembler_.disassembleForward(0x0600, memory_, 1);
        verifyLine(lines[0], 0x0600, { 0xDD,0xCB,0x23,0x80 }, "*RES 0, (IX+$23), B");
        initMem(0x0604, { 0xDD,0xCB,0x23,0x81 });
        lines = disassembler_.disassembleForward(0x0604, memory_, 1);
        verifyLine(lines[0], 0x0604, { 0xDD,0xCB,0x23,0x81 }, "*RES 0, (IX+$23), C");
        initMem(0x0608, { 0xDD,0xCB,0x23,0x82 });
        lines = disassembler_.disassembleForward(0x0608, memory_, 1);
        verifyLine(lines[0], 0x0608, { 0xDD,0xCB,0x23,0x82 }, "*RES 0, (IX+$23), D");
        initMem(0x060c, { 0xDD,0xCB,0x23,0x83 });
        lines = disassembler_.disassembleForward(0x060c, memory_, 1);
        verifyLine(lines[0], 0x060c, { 0xDD,0xCB,0x23,0x83 }, "*RES 0, (IX+$23), E");
        initMem(0x0610, { 0xDD,0xCB,0x23,0x84 });
        lines = disassembler_.disassembleForward(0x0610, memory_, 1);
        verifyLine(lines[0], 0x0610, { 0xDD,0xCB,0x23,0x84 }, "*RES 0, (IX+$23), H");
        initMem(0x0614, { 0xDD,0xCB,0x23,0x85 });
        lines = disassembler_.disassembleForward(0x0614, memory_, 1);
        verifyLine(lines[0], 0x0614, { 0xDD,0xCB,0x23,0x85 }, "*RES 0, (IX+$23), L");
        initMem(0x0618, { 0xDD,0xCB,0x23,0x86 });
        lines = disassembler_.disassembleForward(0x0618, memory_, 1);
        verifyLine(lines[0], 0x0618, { 0xDD,0xCB,0x23,0x86 }, "RES 0, (IX+$23)");
        initMem(0x061c, { 0xDD,0xCB,0x23,0x87 });
        lines = disassembler_.disassembleForward(0x061c, memory_, 1);
        verifyLine(lines[0], 0x061c, { 0xDD,0xCB,0x23,0x87 }, "*RES 0, (IX+$23), A");
        initMem(0x0620, { 0xDD,0xCB,0x23,0x88 });
        lines = disassembler_.disassembleForward(0x0620, memory_, 1);
        verifyLine(lines[0], 0x0620, { 0xDD,0xCB,0x23,0x88 }, "*RES 1, (IX+$23), B");
        initMem(0x0624, { 0xDD,0xCB,0x23,0x89 });
        lines = disassembler_.disassembleForward(0x0624, memory_, 1);
        verifyLine(lines[0], 0x0624, { 0xDD,0xCB,0x23,0x89 }, "*RES 1, (IX+$23), C");
        initMem(0x0628, { 0xDD,0xCB,0x23,0x8A });
        lines = disassembler_.disassembleForward(0x0628, memory_, 1);
        verifyLine(lines[0], 0x0628, { 0xDD,0xCB,0x23,0x8A }, "*RES 1, (IX+$23), D");
        initMem(0x062c, { 0xDD,0xCB,0x23,0x8B });
        lines = disassembler_.disassembleForward(0x062c, memory_, 1);
        verifyLine(lines[0], 0x062c, { 0xDD,0xCB,0x23,0x8B }, "*RES 1, (IX+$23), E");
        initMem(0x0630, { 0xDD,0xCB,0x23,0x8C });
        lines = disassembler_.disassembleForward(0x0630, memory_, 1);
        verifyLine(lines[0], 0x0630, { 0xDD,0xCB,0x23,0x8C }, "*RES 1, (IX+$23), H");
        initMem(0x0634, { 0xDD,0xCB,0x23,0x8D });
        lines = disassembler_.disassembleForward(0x0634, memory_, 1);
        verifyLine(lines[0], 0x0634, { 0xDD,0xCB,0x23,0x8D }, "*RES 1, (IX+$23), L");
        initMem(0x0638, { 0xDD,0xCB,0x23,0x8E });
        lines = disassembler_.disassembleForward(0x0638, memory_, 1);
        verifyLine(lines[0], 0x0638, { 0xDD,0xCB,0x23,0x8E }, "RES 1, (IX+$23)");
        initMem(0x063c, { 0xDD,0xCB,0x23,0x8F });
        lines = disassembler_.disassembleForward(0x063c, memory_, 1);
        verifyLine(lines[0], 0x063c, { 0xDD,0xCB,0x23,0x8F }, "*RES 1, (IX+$23), A");
        initMem(0x0640, { 0xDD,0xCB,0x23,0x90 });
        lines = disassembler_.disassembleForward(0x0640, memory_, 1);
        verifyLine(lines[0], 0x0640, { 0xDD,0xCB,0x23,0x90 }, "*RES 2, (IX+$23), B");
        initMem(0x0644, { 0xDD,0xCB,0x23,0x91 });
        lines = disassembler_.disassembleForward(0x0644, memory_, 1);
        verifyLine(lines[0], 0x0644, { 0xDD,0xCB,0x23,0x91 }, "*RES 2, (IX+$23), C");
        initMem(0x0648, { 0xDD,0xCB,0x23,0x92 });
        lines = disassembler_.disassembleForward(0x0648, memory_, 1);
        verifyLine(lines[0], 0x0648, { 0xDD,0xCB,0x23,0x92 }, "*RES 2, (IX+$23), D");
        initMem(0x064c, { 0xDD,0xCB,0x23,0x93 });
        lines = disassembler_.disassembleForward(0x064c, memory_, 1);
        verifyLine(lines[0], 0x064c, { 0xDD,0xCB,0x23,0x93 }, "*RES 2, (IX+$23), E");
        initMem(0x0650, { 0xDD,0xCB,0x23,0x94 });
        lines = disassembler_.disassembleForward(0x0650, memory_, 1);
        verifyLine(lines[0], 0x0650, { 0xDD,0xCB,0x23,0x94 }, "*RES 2, (IX+$23), H");
        initMem(0x0654, { 0xDD,0xCB,0x23,0x95 });
        lines = disassembler_.disassembleForward(0x0654, memory_, 1);
        verifyLine(lines[0], 0x0654, { 0xDD,0xCB,0x23,0x95 }, "*RES 2, (IX+$23), L");
        initMem(0x0658, { 0xDD,0xCB,0x23,0x96 });
        lines = disassembler_.disassembleForward(0x0658, memory_, 1);
        verifyLine(lines[0], 0x0658, { 0xDD,0xCB,0x23,0x96 }, "RES 2, (IX+$23)");
        initMem(0x065c, { 0xDD,0xCB,0x23,0x97 });
        lines = disassembler_.disassembleForward(0x065c, memory_, 1);
        verifyLine(lines[0], 0x065c, { 0xDD,0xCB,0x23,0x97 }, "*RES 2, (IX+$23), A");
        initMem(0x0660, { 0xDD,0xCB,0x23,0x98 });
        lines = disassembler_.disassembleForward(0x0660, memory_, 1);
        verifyLine(lines[0], 0x0660, { 0xDD,0xCB,0x23,0x98 }, "*RES 3, (IX+$23), B");
        initMem(0x0664, { 0xDD,0xCB,0x23,0x99 });
        lines = disassembler_.disassembleForward(0x0664, memory_, 1);
        verifyLine(lines[0], 0x0664, { 0xDD,0xCB,0x23,0x99 }, "*RES 3, (IX+$23), C");
        initMem(0x0668, { 0xDD,0xCB,0x23,0x9A });
        lines = disassembler_.disassembleForward(0x0668, memory_, 1);
        verifyLine(lines[0], 0x0668, { 0xDD,0xCB,0x23,0x9A }, "*RES 3, (IX+$23), D");
        initMem(0x066c, { 0xDD,0xCB,0x23,0x9B });
        lines = disassembler_.disassembleForward(0x066c, memory_, 1);
        verifyLine(lines[0], 0x066c, { 0xDD,0xCB,0x23,0x9B }, "*RES 3, (IX+$23), E");
        initMem(0x0670, { 0xDD,0xCB,0x23,0x9C });
        lines = disassembler_.disassembleForward(0x0670, memory_, 1);
        verifyLine(lines[0], 0x0670, { 0xDD,0xCB,0x23,0x9C }, "*RES 3, (IX+$23), H");
        initMem(0x0674, { 0xDD,0xCB,0x23,0x9D });
        lines = disassembler_.disassembleForward(0x0674, memory_, 1);
        verifyLine(lines[0], 0x0674, { 0xDD,0xCB,0x23,0x9D }, "*RES 3, (IX+$23), L");
        initMem(0x0678, { 0xDD,0xCB,0x23,0x9E });
        lines = disassembler_.disassembleForward(0x0678, memory_, 1);
        verifyLine(lines[0], 0x0678, { 0xDD,0xCB,0x23,0x9E }, "RES 3, (IX+$23)");
        initMem(0x067c, { 0xDD,0xCB,0x23,0x9F });
        lines = disassembler_.disassembleForward(0x067c, memory_, 1);
        verifyLine(lines[0], 0x067c, { 0xDD,0xCB,0x23,0x9F }, "*RES 3, (IX+$23), A");
        initMem(0x0680, { 0xDD,0xCB,0x23,0xA0 });
        lines = disassembler_.disassembleForward(0x0680, memory_, 1);
        verifyLine(lines[0], 0x0680, { 0xDD,0xCB,0x23,0xA0 }, "*RES 4, (IX+$23), B");
        initMem(0x0684, { 0xDD,0xCB,0x23,0xA1 });
        lines = disassembler_.disassembleForward(0x0684, memory_, 1);
        verifyLine(lines[0], 0x0684, { 0xDD,0xCB,0x23,0xA1 }, "*RES 4, (IX+$23), C");
        initMem(0x0688, { 0xDD,0xCB,0x23,0xA2 });
        lines = disassembler_.disassembleForward(0x0688, memory_, 1);
        verifyLine(lines[0], 0x0688, { 0xDD,0xCB,0x23,0xA2 }, "*RES 4, (IX+$23), D");
        initMem(0x068c, { 0xDD,0xCB,0x23,0xA3 });
        lines = disassembler_.disassembleForward(0x068c, memory_, 1);
        verifyLine(lines[0], 0x068c, { 0xDD,0xCB,0x23,0xA3 }, "*RES 4, (IX+$23), E");
        initMem(0x0690, { 0xDD,0xCB,0x23,0xA4 });
        lines = disassembler_.disassembleForward(0x0690, memory_, 1);
        verifyLine(lines[0], 0x0690, { 0xDD,0xCB,0x23,0xA4 }, "*RES 4, (IX+$23), H");
        initMem(0x0694, { 0xDD,0xCB,0x23,0xA5 });
        lines = disassembler_.disassembleForward(0x0694, memory_, 1);
        verifyLine(lines[0], 0x0694, { 0xDD,0xCB,0x23,0xA5 }, "*RES 4, (IX+$23), L");
        initMem(0x0698, { 0xDD,0xCB,0x23,0xA6 });
        lines = disassembler_.disassembleForward(0x0698, memory_, 1);
        verifyLine(lines[0], 0x0698, { 0xDD,0xCB,0x23,0xA6 }, "RES 4, (IX+$23)");
        initMem(0x069c, { 0xDD,0xCB,0x23,0xA7 });
        lines = disassembler_.disassembleForward(0x069c, memory_, 1);
        verifyLine(lines[0], 0x069c, { 0xDD,0xCB,0x23,0xA7 }, "*RES 4, (IX+$23), A");
        initMem(0x06a0, { 0xDD,0xCB,0x23,0xA8 });
        lines = disassembler_.disassembleForward(0x06a0, memory_, 1);
        verifyLine(lines[0], 0x06a0, { 0xDD,0xCB,0x23,0xA8 }, "*RES 5, (IX+$23), B");
        initMem(0x06a4, { 0xDD,0xCB,0x23,0xA9 });
        lines = disassembler_.disassembleForward(0x06a4, memory_, 1);
        verifyLine(lines[0], 0x06a4, { 0xDD,0xCB,0x23,0xA9 }, "*RES 5, (IX+$23), C");
        initMem(0x06a8, { 0xDD,0xCB,0x23,0xAA });
        lines = disassembler_.disassembleForward(0x06a8, memory_, 1);
        verifyLine(lines[0], 0x06a8, { 0xDD,0xCB,0x23,0xAA }, "*RES 5, (IX+$23), D");
        initMem(0x06ac, { 0xDD,0xCB,0x23,0xAB });
        lines = disassembler_.disassembleForward(0x06ac, memory_, 1);
        verifyLine(lines[0], 0x06ac, { 0xDD,0xCB,0x23,0xAB }, "*RES 5, (IX+$23), E");
        initMem(0x06b0, { 0xDD,0xCB,0x23,0xAC });
        lines = disassembler_.disassembleForward(0x06b0, memory_, 1);
        verifyLine(lines[0], 0x06b0, { 0xDD,0xCB,0x23,0xAC }, "*RES 5, (IX+$23), H");
        initMem(0x06b4, { 0xDD,0xCB,0x23,0xAD });
        lines = disassembler_.disassembleForward(0x06b4, memory_, 1);
        verifyLine(lines[0], 0x06b4, { 0xDD,0xCB,0x23,0xAD }, "*RES 5, (IX+$23), L");
        initMem(0x06b8, { 0xDD,0xCB,0x23,0xAE });
        lines = disassembler_.disassembleForward(0x06b8, memory_, 1);
        verifyLine(lines[0], 0x06b8, { 0xDD,0xCB,0x23,0xAE }, "RES 5, (IX+$23)");
        initMem(0x06bc, { 0xDD,0xCB,0x23,0xAF });
        lines = disassembler_.disassembleForward(0x06bc, memory_, 1);
        verifyLine(lines[0], 0x06bc, { 0xDD,0xCB,0x23,0xAF }, "*RES 5, (IX+$23), A");
        initMem(0x06c0, { 0xDD,0xCB,0x23,0xB0 });
        lines = disassembler_.disassembleForward(0x06c0, memory_, 1);
        verifyLine(lines[0], 0x06c0, { 0xDD,0xCB,0x23,0xB0 }, "*RES 6, (IX+$23), B");
        initMem(0x06c4, { 0xDD,0xCB,0x23,0xB1 });
        lines = disassembler_.disassembleForward(0x06c4, memory_, 1);
        verifyLine(lines[0], 0x06c4, { 0xDD,0xCB,0x23,0xB1 }, "*RES 6, (IX+$23), C");
        initMem(0x06c8, { 0xDD,0xCB,0x23,0xB2 });
        lines = disassembler_.disassembleForward(0x06c8, memory_, 1);
        verifyLine(lines[0], 0x06c8, { 0xDD,0xCB,0x23,0xB2 }, "*RES 6, (IX+$23), D");
        initMem(0x06cc, { 0xDD,0xCB,0x23,0xB3 });
        lines = disassembler_.disassembleForward(0x06cc, memory_, 1);
        verifyLine(lines[0], 0x06cc, { 0xDD,0xCB,0x23,0xB3 }, "*RES 6, (IX+$23), E");
        initMem(0x06d0, { 0xDD,0xCB,0x23,0xB4 });
        lines = disassembler_.disassembleForward(0x06d0, memory_, 1);
        verifyLine(lines[0], 0x06d0, { 0xDD,0xCB,0x23,0xB4 }, "*RES 6, (IX+$23), H");
        initMem(0x06d4, { 0xDD,0xCB,0x23,0xB5 });
        lines = disassembler_.disassembleForward(0x06d4, memory_, 1);
        verifyLine(lines[0], 0x06d4, { 0xDD,0xCB,0x23,0xB5 }, "*RES 6, (IX+$23), L");
        initMem(0x06d8, { 0xDD,0xCB,0x23,0xB6 });
        lines = disassembler_.disassembleForward(0x06d8, memory_, 1);
        verifyLine(lines[0], 0x06d8, { 0xDD,0xCB,0x23,0xB6 }, "RES 6, (IX+$23)");
        initMem(0x06dc, { 0xDD,0xCB,0x23,0xB7 });
        lines = disassembler_.disassembleForward(0x06dc, memory_, 1);
        verifyLine(lines[0], 0x06dc, { 0xDD,0xCB,0x23,0xB7 }, "*RES 6, (IX+$23), A");
        initMem(0x06e0, { 0xDD,0xCB,0x23,0xB8 });
        lines = disassembler_.disassembleForward(0x06e0, memory_, 1);
        verifyLine(lines[0], 0x06e0, { 0xDD,0xCB,0x23,0xB8 }, "*RES 7, (IX+$23), B");
        initMem(0x06e4, { 0xDD,0xCB,0x23,0xB9 });
        lines = disassembler_.disassembleForward(0x06e4, memory_, 1);
        verifyLine(lines[0], 0x06e4, { 0xDD,0xCB,0x23,0xB9 }, "*RES 7, (IX+$23), C");
        initMem(0x06e8, { 0xDD,0xCB,0x23,0xBA });
        lines = disassembler_.disassembleForward(0x06e8, memory_, 1);
        verifyLine(lines[0], 0x06e8, { 0xDD,0xCB,0x23,0xBA }, "*RES 7, (IX+$23), D");
        initMem(0x06ec, { 0xDD,0xCB,0x23,0xBB });
        lines = disassembler_.disassembleForward(0x06ec, memory_, 1);
        verifyLine(lines[0], 0x06ec, { 0xDD,0xCB,0x23,0xBB }, "*RES 7, (IX+$23), E");
        initMem(0x06f0, { 0xDD,0xCB,0x23,0xBC });
        lines = disassembler_.disassembleForward(0x06f0, memory_, 1);
        verifyLine(lines[0], 0x06f0, { 0xDD,0xCB,0x23,0xBC }, "*RES 7, (IX+$23), H");
        initMem(0x06f4, { 0xDD,0xCB,0x23,0xBD });
        lines = disassembler_.disassembleForward(0x06f4, memory_, 1);
        verifyLine(lines[0], 0x06f4, { 0xDD,0xCB,0x23,0xBD }, "*RES 7, (IX+$23), L");
        initMem(0x06f8, { 0xDD,0xCB,0x23,0xBE });
        lines = disassembler_.disassembleForward(0x06f8, memory_, 1);
        verifyLine(lines[0], 0x06f8, { 0xDD,0xCB,0x23,0xBE }, "RES 7, (IX+$23)");
        initMem(0x06fc, { 0xDD,0xCB,0x23,0xBF });
        lines = disassembler_.disassembleForward(0x06fc, memory_, 1);
        verifyLine(lines[0], 0x06fc, { 0xDD,0xCB,0x23,0xBF }, "*RES 7, (IX+$23), A");
        initMem(0x0700, { 0xDD,0xCB,0x23,0xC0 });
        lines = disassembler_.disassembleForward(0x0700, memory_, 1);
        verifyLine(lines[0], 0x0700, { 0xDD,0xCB,0x23,0xC0 }, "*SET 0, (IX+$23), B");
        initMem(0x0704, { 0xDD,0xCB,0x23,0xC1 });
        lines = disassembler_.disassembleForward(0x0704, memory_, 1);
        verifyLine(lines[0], 0x0704, { 0xDD,0xCB,0x23,0xC1 }, "*SET 0, (IX+$23), C");
        initMem(0x0708, { 0xDD,0xCB,0x23,0xC2 });
        lines = disassembler_.disassembleForward(0x0708, memory_, 1);
        verifyLine(lines[0], 0x0708, { 0xDD,0xCB,0x23,0xC2 }, "*SET 0, (IX+$23), D");
        initMem(0x070c, { 0xDD,0xCB,0x23,0xC3 });
        lines = disassembler_.disassembleForward(0x070c, memory_, 1);
        verifyLine(lines[0], 0x070c, { 0xDD,0xCB,0x23,0xC3 }, "*SET 0, (IX+$23), E");
        initMem(0x0710, { 0xDD,0xCB,0x23,0xC4 });
        lines = disassembler_.disassembleForward(0x0710, memory_, 1);
        verifyLine(lines[0], 0x0710, { 0xDD,0xCB,0x23,0xC4 }, "*SET 0, (IX+$23), H");
        initMem(0x0714, { 0xDD,0xCB,0x23,0xC5 });
        lines = disassembler_.disassembleForward(0x0714, memory_, 1);
        verifyLine(lines[0], 0x0714, { 0xDD,0xCB,0x23,0xC5 }, "*SET 0, (IX+$23), L");
        initMem(0x0718, { 0xDD,0xCB,0x23,0xC6 });
        lines = disassembler_.disassembleForward(0x0718, memory_, 1);
        verifyLine(lines[0], 0x0718, { 0xDD,0xCB,0x23,0xC6 }, "SET 0, (IX+$23)");
        initMem(0x071c, { 0xDD,0xCB,0x23,0xC7 });
        lines = disassembler_.disassembleForward(0x071c, memory_, 1);
        verifyLine(lines[0], 0x071c, { 0xDD,0xCB,0x23,0xC7 }, "*SET 0, (IX+$23), A");
        initMem(0x0720, { 0xDD,0xCB,0x23,0xC8 });
        lines = disassembler_.disassembleForward(0x0720, memory_, 1);
        verifyLine(lines[0], 0x0720, { 0xDD,0xCB,0x23,0xC8 }, "*SET 1, (IX+$23), B");
        initMem(0x0724, { 0xDD,0xCB,0x23,0xC9 });
        lines = disassembler_.disassembleForward(0x0724, memory_, 1);
        verifyLine(lines[0], 0x0724, { 0xDD,0xCB,0x23,0xC9 }, "*SET 1, (IX+$23), C");
        initMem(0x0728, { 0xDD,0xCB,0x23,0xCA });
        lines = disassembler_.disassembleForward(0x0728, memory_, 1);
        verifyLine(lines[0], 0x0728, { 0xDD,0xCB,0x23,0xCA }, "*SET 1, (IX+$23), D");
        initMem(0x072c, { 0xDD,0xCB,0x23,0xCB });
        lines = disassembler_.disassembleForward(0x072c, memory_, 1);
        verifyLine(lines[0], 0x072c, { 0xDD,0xCB,0x23,0xCB }, "*SET 1, (IX+$23), E");
        initMem(0x0730, { 0xDD,0xCB,0x23,0xCC });
        lines = disassembler_.disassembleForward(0x0730, memory_, 1);
        verifyLine(lines[0], 0x0730, { 0xDD,0xCB,0x23,0xCC }, "*SET 1, (IX+$23), H");
        initMem(0x0734, { 0xDD,0xCB,0x23,0xCD });
        lines = disassembler_.disassembleForward(0x0734, memory_, 1);
        verifyLine(lines[0], 0x0734, { 0xDD,0xCB,0x23,0xCD }, "*SET 1, (IX+$23), L");
        initMem(0x0738, { 0xDD,0xCB,0x23,0xCE });
        lines = disassembler_.disassembleForward(0x0738, memory_, 1);
        verifyLine(lines[0], 0x0738, { 0xDD,0xCB,0x23,0xCE }, "SET 1, (IX+$23)");
        initMem(0x073c, { 0xDD,0xCB,0x23,0xCF });
        lines = disassembler_.disassembleForward(0x073c, memory_, 1);
        verifyLine(lines[0], 0x073c, { 0xDD,0xCB,0x23,0xCF }, "*SET 1, (IX+$23), A");
        initMem(0x0740, { 0xDD,0xCB,0x23,0xD0 });
        lines = disassembler_.disassembleForward(0x0740, memory_, 1);
        verifyLine(lines[0], 0x0740, { 0xDD,0xCB,0x23,0xD0 }, "*SET 2, (IX+$23), B");
        initMem(0x0744, { 0xDD,0xCB,0x23,0xD1 });
        lines = disassembler_.disassembleForward(0x0744, memory_, 1);
        verifyLine(lines[0], 0x0744, { 0xDD,0xCB,0x23,0xD1 }, "*SET 2, (IX+$23), C");
        initMem(0x0748, { 0xDD,0xCB,0x23,0xD2 });
        lines = disassembler_.disassembleForward(0x0748, memory_, 1);
        verifyLine(lines[0], 0x0748, { 0xDD,0xCB,0x23,0xD2 }, "*SET 2, (IX+$23), D");
        initMem(0x074c, { 0xDD,0xCB,0x23,0xD3 });
        lines = disassembler_.disassembleForward(0x074c, memory_, 1);
        verifyLine(lines[0], 0x074c, { 0xDD,0xCB,0x23,0xD3 }, "*SET 2, (IX+$23), E");
        initMem(0x0750, { 0xDD,0xCB,0x23,0xD4 });
        lines = disassembler_.disassembleForward(0x0750, memory_, 1);
        verifyLine(lines[0], 0x0750, { 0xDD,0xCB,0x23,0xD4 }, "*SET 2, (IX+$23), H");
        initMem(0x0754, { 0xDD,0xCB,0x23,0xD5 });
        lines = disassembler_.disassembleForward(0x0754, memory_, 1);
        verifyLine(lines[0], 0x0754, { 0xDD,0xCB,0x23,0xD5 }, "*SET 2, (IX+$23), L");
        initMem(0x0758, { 0xDD,0xCB,0x23,0xD6 });
        lines = disassembler_.disassembleForward(0x0758, memory_, 1);
        verifyLine(lines[0], 0x0758, { 0xDD,0xCB,0x23,0xD6 }, "SET 2, (IX+$23)");
        initMem(0x075c, { 0xDD,0xCB,0x23,0xD7 });
        lines = disassembler_.disassembleForward(0x075c, memory_, 1);
        verifyLine(lines[0], 0x075c, { 0xDD,0xCB,0x23,0xD7 }, "*SET 2, (IX+$23), A");
        initMem(0x0760, { 0xDD,0xCB,0x23,0xD8 });
        lines = disassembler_.disassembleForward(0x0760, memory_, 1);
        verifyLine(lines[0], 0x0760, { 0xDD,0xCB,0x23,0xD8 }, "*SET 3, (IX+$23), B");
        initMem(0x0764, { 0xDD,0xCB,0x23,0xD9 });
        lines = disassembler_.disassembleForward(0x0764, memory_, 1);
        verifyLine(lines[0], 0x0764, { 0xDD,0xCB,0x23,0xD9 }, "*SET 3, (IX+$23), C");
        initMem(0x0768, { 0xDD,0xCB,0x23,0xDA });
        lines = disassembler_.disassembleForward(0x0768, memory_, 1);
        verifyLine(lines[0], 0x0768, { 0xDD,0xCB,0x23,0xDA }, "*SET 3, (IX+$23), D");
        initMem(0x076c, { 0xDD,0xCB,0x23,0xDB });
        lines = disassembler_.disassembleForward(0x076c, memory_, 1);
        verifyLine(lines[0], 0x076c, { 0xDD,0xCB,0x23,0xDB }, "*SET 3, (IX+$23), E");
        initMem(0x0770, { 0xDD,0xCB,0x23,0xDC });
        lines = disassembler_.disassembleForward(0x0770, memory_, 1);
        verifyLine(lines[0], 0x0770, { 0xDD,0xCB,0x23,0xDC }, "*SET 3, (IX+$23), H");
        initMem(0x0774, { 0xDD,0xCB,0x23,0xDD });
        lines = disassembler_.disassembleForward(0x0774, memory_, 1);
        verifyLine(lines[0], 0x0774, { 0xDD,0xCB,0x23,0xDD }, "*SET 3, (IX+$23), L");
        initMem(0x0778, { 0xDD,0xCB,0x23,0xDE });
        lines = disassembler_.disassembleForward(0x0778, memory_, 1);
        verifyLine(lines[0], 0x0778, { 0xDD,0xCB,0x23,0xDE }, "SET 3, (IX+$23)");
        initMem(0x077c, { 0xDD,0xCB,0x23,0xDF });
        lines = disassembler_.disassembleForward(0x077c, memory_, 1);
        verifyLine(lines[0], 0x077c, { 0xDD,0xCB,0x23,0xDF }, "*SET 3, (IX+$23), A");
        initMem(0x0780, { 0xDD,0xCB,0x23,0xE0 });
        lines = disassembler_.disassembleForward(0x0780, memory_, 1);
        verifyLine(lines[0], 0x0780, { 0xDD,0xCB,0x23,0xE0 }, "*SET 4, (IX+$23), B");
        initMem(0x0784, { 0xDD,0xCB,0x23,0xE1 });
        lines = disassembler_.disassembleForward(0x0784, memory_, 1);
        verifyLine(lines[0], 0x0784, { 0xDD,0xCB,0x23,0xE1 }, "*SET 4, (IX+$23), C");
        initMem(0x0788, { 0xDD,0xCB,0x23,0xE2 });
        lines = disassembler_.disassembleForward(0x0788, memory_, 1);
        verifyLine(lines[0], 0x0788, { 0xDD,0xCB,0x23,0xE2 }, "*SET 4, (IX+$23), D");
        initMem(0x078c, { 0xDD,0xCB,0x23,0xE3 });
        lines = disassembler_.disassembleForward(0x078c, memory_, 1);
        verifyLine(lines[0], 0x078c, { 0xDD,0xCB,0x23,0xE3 }, "*SET 4, (IX+$23), E");
        initMem(0x0790, { 0xDD,0xCB,0x23,0xE4 });
        lines = disassembler_.disassembleForward(0x0790, memory_, 1);
        verifyLine(lines[0], 0x0790, { 0xDD,0xCB,0x23,0xE4 }, "*SET 4, (IX+$23), H");
        initMem(0x0794, { 0xDD,0xCB,0x23,0xE5 });
        lines = disassembler_.disassembleForward(0x0794, memory_, 1);
        verifyLine(lines[0], 0x0794, { 0xDD,0xCB,0x23,0xE5 }, "*SET 4, (IX+$23), L");
        initMem(0x0798, { 0xDD,0xCB,0x23,0xE6 });
        lines = disassembler_.disassembleForward(0x0798, memory_, 1);
        verifyLine(lines[0], 0x0798, { 0xDD,0xCB,0x23,0xE6 }, "SET 4, (IX+$23)");
        initMem(0x079c, { 0xDD,0xCB,0x23,0xE7 });
        lines = disassembler_.disassembleForward(0x079c, memory_, 1);
        verifyLine(lines[0], 0x079c, { 0xDD,0xCB,0x23,0xE7 }, "*SET 4, (IX+$23), A");
        initMem(0x07a0, { 0xDD,0xCB,0x23,0xE8 });
        lines = disassembler_.disassembleForward(0x07a0, memory_, 1);
        verifyLine(lines[0], 0x07a0, { 0xDD,0xCB,0x23,0xE8 }, "*SET 5, (IX+$23), B");
        initMem(0x07a4, { 0xDD,0xCB,0x23,0xE9 });
        lines = disassembler_.disassembleForward(0x07a4, memory_, 1);
        verifyLine(lines[0], 0x07a4, { 0xDD,0xCB,0x23,0xE9 }, "*SET 5, (IX+$23), C");
        initMem(0x07a8, { 0xDD,0xCB,0x23,0xEA });
        lines = disassembler_.disassembleForward(0x07a8, memory_, 1);
        verifyLine(lines[0], 0x07a8, { 0xDD,0xCB,0x23,0xEA }, "*SET 5, (IX+$23), D");
        initMem(0x07ac, { 0xDD,0xCB,0x23,0xEB });
        lines = disassembler_.disassembleForward(0x07ac, memory_, 1);
        verifyLine(lines[0], 0x07ac, { 0xDD,0xCB,0x23,0xEB }, "*SET 5, (IX+$23), E");
        initMem(0x07b0, { 0xDD,0xCB,0x23,0xEC });
        lines = disassembler_.disassembleForward(0x07b0, memory_, 1);
        verifyLine(lines[0], 0x07b0, { 0xDD,0xCB,0x23,0xEC }, "*SET 5, (IX+$23), H");
        initMem(0x07b4, { 0xDD,0xCB,0x23,0xED });
        lines = disassembler_.disassembleForward(0x07b4, memory_, 1);
        verifyLine(lines[0], 0x07b4, { 0xDD,0xCB,0x23,0xED }, "*SET 5, (IX+$23), L");
        initMem(0x07b8, { 0xDD,0xCB,0x23,0xEE });
        lines = disassembler_.disassembleForward(0x07b8, memory_, 1);
        verifyLine(lines[0], 0x07b8, { 0xDD,0xCB,0x23,0xEE }, "SET 5, (IX+$23)");
        initMem(0x07bc, { 0xDD,0xCB,0x23,0xEF });
        lines = disassembler_.disassembleForward(0x07bc, memory_, 1);
        verifyLine(lines[0], 0x07bc, { 0xDD,0xCB,0x23,0xEF }, "*SET 5, (IX+$23), A");
        initMem(0x07c0, { 0xDD,0xCB,0x23,0xF0 });
        lines = disassembler_.disassembleForward(0x07c0, memory_, 1);
        verifyLine(lines[0], 0x07c0, { 0xDD,0xCB,0x23,0xF0 }, "*SET 6, (IX+$23), B");
        initMem(0x07c4, { 0xDD,0xCB,0x23,0xF1 });
        lines = disassembler_.disassembleForward(0x07c4, memory_, 1);
        verifyLine(lines[0], 0x07c4, { 0xDD,0xCB,0x23,0xF1 }, "*SET 6, (IX+$23), C");
        initMem(0x07c8, { 0xDD,0xCB,0x23,0xF2 });
        lines = disassembler_.disassembleForward(0x07c8, memory_, 1);
        verifyLine(lines[0], 0x07c8, { 0xDD,0xCB,0x23,0xF2 }, "*SET 6, (IX+$23), D");
        initMem(0x07cc, { 0xDD,0xCB,0x23,0xF3 });
        lines = disassembler_.disassembleForward(0x07cc, memory_, 1);
        verifyLine(lines[0], 0x07cc, { 0xDD,0xCB,0x23,0xF3 }, "*SET 6, (IX+$23), E");
        initMem(0x07d0, { 0xDD,0xCB,0x23,0xF4 });
        lines = disassembler_.disassembleForward(0x07d0, memory_, 1);
        verifyLine(lines[0], 0x07d0, { 0xDD,0xCB,0x23,0xF4 }, "*SET 6, (IX+$23), H");
        initMem(0x07d4, { 0xDD,0xCB,0x23,0xF5 });
        lines = disassembler_.disassembleForward(0x07d4, memory_, 1);
        verifyLine(lines[0], 0x07d4, { 0xDD,0xCB,0x23,0xF5 }, "*SET 6, (IX+$23), L");
        initMem(0x07d8, { 0xDD,0xCB,0x23,0xF6 });
        lines = disassembler_.disassembleForward(0x07d8, memory_, 1);
        verifyLine(lines[0], 0x07d8, { 0xDD,0xCB,0x23,0xF6 }, "SET 6, (IX+$23)");
        initMem(0x07dc, { 0xDD,0xCB,0x23,0xF7 });
        lines = disassembler_.disassembleForward(0x07dc, memory_, 1);
        verifyLine(lines[0], 0x07dc, { 0xDD,0xCB,0x23,0xF7 }, "*SET 6, (IX+$23), A");
        initMem(0x07e0, { 0xDD,0xCB,0x23,0xF8 });
        lines = disassembler_.disassembleForward(0x07e0, memory_, 1);
        verifyLine(lines[0], 0x07e0, { 0xDD,0xCB,0x23,0xF8 }, "*SET 7, (IX+$23), B");
        initMem(0x07e4, { 0xDD,0xCB,0x23,0xF9 });
        lines = disassembler_.disassembleForward(0x07e4, memory_, 1);
        verifyLine(lines[0], 0x07e4, { 0xDD,0xCB,0x23,0xF9 }, "*SET 7, (IX+$23), C");
        initMem(0x07e8, { 0xDD,0xCB,0x23,0xFA });
        lines = disassembler_.disassembleForward(0x07e8, memory_, 1);
        verifyLine(lines[0], 0x07e8, { 0xDD,0xCB,0x23,0xFA }, "*SET 7, (IX+$23), D");
        initMem(0x07ec, { 0xDD,0xCB,0x23,0xFB });
        lines = disassembler_.disassembleForward(0x07ec, memory_, 1);
        verifyLine(lines[0], 0x07ec, { 0xDD,0xCB,0x23,0xFB }, "*SET 7, (IX+$23), E");
        initMem(0x07f0, { 0xDD,0xCB,0x23,0xFC });
        lines = disassembler_.disassembleForward(0x07f0, memory_, 1);
        verifyLine(lines[0], 0x07f0, { 0xDD,0xCB,0x23,0xFC }, "*SET 7, (IX+$23), H");
        initMem(0x07f4, { 0xDD,0xCB,0x23,0xFD });
        lines = disassembler_.disassembleForward(0x07f4, memory_, 1);
        verifyLine(lines[0], 0x07f4, { 0xDD,0xCB,0x23,0xFD }, "*SET 7, (IX+$23), L");
        initMem(0x07f8, { 0xDD,0xCB,0x23,0xFE });
        lines = disassembler_.disassembleForward(0x07f8, memory_, 1);
        verifyLine(lines[0], 0x07f8, { 0xDD,0xCB,0x23,0xFE }, "SET 7, (IX+$23)");
        initMem(0x07fc, { 0xDD,0xCB,0x23,0xFF });
        lines = disassembler_.disassembleForward(0x07fc, memory_, 1);
        verifyLine(lines[0], 0x07fc, { 0xDD,0xCB,0x23,0xFF }, "*SET 7, (IX+$23), A");
    }

    void TestDisassembleForward_PrefixFDCB() {
        initMem(0x0400, { 0xFD,0xCB,0x23,0x00 });
        auto lines = disassembler_.disassembleForward(0x0400, memory_, 1);
        verifyLine(lines[0], 0x0400, { 0xFD,0xCB,0x23,0x00 }, "*RLC (IY+$23), B");
        initMem(0x0404, { 0xFD,0xCB,0x23,0x01 });
        lines = disassembler_.disassembleForward(0x0404, memory_, 1);
        verifyLine(lines[0], 0x0404, { 0xFD,0xCB,0x23,0x01 }, "*RLC (IY+$23), C");
        initMem(0x0408, { 0xFD,0xCB,0x23,0x02 });
        lines = disassembler_.disassembleForward(0x0408, memory_, 1);
        verifyLine(lines[0], 0x0408, { 0xFD,0xCB,0x23,0x02 }, "*RLC (IY+$23), D");
        initMem(0x040c, { 0xFD,0xCB,0x23,0x03 });
        lines = disassembler_.disassembleForward(0x040c, memory_, 1);
        verifyLine(lines[0], 0x040c, { 0xFD,0xCB,0x23,0x03 }, "*RLC (IY+$23), E");
        initMem(0x0410, { 0xFD,0xCB,0x23,0x04 });
        lines = disassembler_.disassembleForward(0x0410, memory_, 1);
        verifyLine(lines[0], 0x0410, { 0xFD,0xCB,0x23,0x04 }, "*RLC (IY+$23), H");
        initMem(0x0414, { 0xFD,0xCB,0x23,0x05 });
        lines = disassembler_.disassembleForward(0x0414, memory_, 1);
        verifyLine(lines[0], 0x0414, { 0xFD,0xCB,0x23,0x05 }, "*RLC (IY+$23), L");
        initMem(0x0418, { 0xFD,0xCB,0x23,0x06 });
        lines = disassembler_.disassembleForward(0x0418, memory_, 1);
        verifyLine(lines[0], 0x0418, { 0xFD,0xCB,0x23,0x06 }, "RLC (IY+$23)");
        initMem(0x041c, { 0xFD,0xCB,0x23,0x07 });
        lines = disassembler_.disassembleForward(0x041c, memory_, 1);
        verifyLine(lines[0], 0x041c, { 0xFD,0xCB,0x23,0x07 }, "*RLC (IY+$23), A");
        initMem(0x0420, { 0xFD,0xCB,0x23,0x08 });
        lines = disassembler_.disassembleForward(0x0420, memory_, 1);
        verifyLine(lines[0], 0x0420, { 0xFD,0xCB,0x23,0x08 }, "*RRC (IY+$23), B");
        initMem(0x0424, { 0xFD,0xCB,0x23,0x09 });
        lines = disassembler_.disassembleForward(0x0424, memory_, 1);
        verifyLine(lines[0], 0x0424, { 0xFD,0xCB,0x23,0x09 }, "*RRC (IY+$23), C");
        initMem(0x0428, { 0xFD,0xCB,0x23,0x0A });
        lines = disassembler_.disassembleForward(0x0428, memory_, 1);
        verifyLine(lines[0], 0x0428, { 0xFD,0xCB,0x23,0x0A }, "*RRC (IY+$23), D");
        initMem(0x042c, { 0xFD,0xCB,0x23,0x0B });
        lines = disassembler_.disassembleForward(0x042c, memory_, 1);
        verifyLine(lines[0], 0x042c, { 0xFD,0xCB,0x23,0x0B }, "*RRC (IY+$23), E");
        initMem(0x0430, { 0xFD,0xCB,0x23,0x0C });
        lines = disassembler_.disassembleForward(0x0430, memory_, 1);
        verifyLine(lines[0], 0x0430, { 0xFD,0xCB,0x23,0x0C }, "*RRC (IY+$23), H");
        initMem(0x0434, { 0xFD,0xCB,0x23,0x0D });
        lines = disassembler_.disassembleForward(0x0434, memory_, 1);
        verifyLine(lines[0], 0x0434, { 0xFD,0xCB,0x23,0x0D }, "*RRC (IY+$23), L");
        initMem(0x0438, { 0xFD,0xCB,0x23,0x0E });
        lines = disassembler_.disassembleForward(0x0438, memory_, 1);
        verifyLine(lines[0], 0x0438, { 0xFD,0xCB,0x23,0x0E }, "RRC (IY+$23)");
        initMem(0x043c, { 0xFD,0xCB,0x23,0x0F });
        lines = disassembler_.disassembleForward(0x043c, memory_, 1);
        verifyLine(lines[0], 0x043c, { 0xFD,0xCB,0x23,0x0F }, "*RRC (IY+$23), A");
        initMem(0x0440, { 0xFD,0xCB,0x23,0x10 });
        lines = disassembler_.disassembleForward(0x0440, memory_, 1);
        verifyLine(lines[0], 0x0440, { 0xFD,0xCB,0x23,0x10 }, "*RL (IY+$23), B");
        initMem(0x0444, { 0xFD,0xCB,0x23,0x11 });
        lines = disassembler_.disassembleForward(0x0444, memory_, 1);
        verifyLine(lines[0], 0x0444, { 0xFD,0xCB,0x23,0x11 }, "*RL (IY+$23), C");
        initMem(0x0448, { 0xFD,0xCB,0x23,0x12 });
        lines = disassembler_.disassembleForward(0x0448, memory_, 1);
        verifyLine(lines[0], 0x0448, { 0xFD,0xCB,0x23,0x12 }, "*RL (IY+$23), D");
        initMem(0x044c, { 0xFD,0xCB,0x23,0x13 });
        lines = disassembler_.disassembleForward(0x044c, memory_, 1);
        verifyLine(lines[0], 0x044c, { 0xFD,0xCB,0x23,0x13 }, "*RL (IY+$23), E");
        initMem(0x0450, { 0xFD,0xCB,0x23,0x14 });
        lines = disassembler_.disassembleForward(0x0450, memory_, 1);
        verifyLine(lines[0], 0x0450, { 0xFD,0xCB,0x23,0x14 }, "*RL (IY+$23), H");
        initMem(0x0454, { 0xFD,0xCB,0x23,0x15 });
        lines = disassembler_.disassembleForward(0x0454, memory_, 1);
        verifyLine(lines[0], 0x0454, { 0xFD,0xCB,0x23,0x15 }, "*RL (IY+$23), L");
        initMem(0x0458, { 0xFD,0xCB,0x23,0x16 });
        lines = disassembler_.disassembleForward(0x0458, memory_, 1);
        verifyLine(lines[0], 0x0458, { 0xFD,0xCB,0x23,0x16 }, "RL (IY+$23)");
        initMem(0x045c, { 0xFD,0xCB,0x23,0x17 });
        lines = disassembler_.disassembleForward(0x045c, memory_, 1);
        verifyLine(lines[0], 0x045c, { 0xFD,0xCB,0x23,0x17 }, "*RL (IY+$23), A");
        initMem(0x0460, { 0xFD,0xCB,0x23,0x18 });
        lines = disassembler_.disassembleForward(0x0460, memory_, 1);
        verifyLine(lines[0], 0x0460, { 0xFD,0xCB,0x23,0x18 }, "*RR (IY+$23), B");
        initMem(0x0464, { 0xFD,0xCB,0x23,0x19 });
        lines = disassembler_.disassembleForward(0x0464, memory_, 1);
        verifyLine(lines[0], 0x0464, { 0xFD,0xCB,0x23,0x19 }, "*RR (IY+$23), C");
        initMem(0x0468, { 0xFD,0xCB,0x23,0x1A });
        lines = disassembler_.disassembleForward(0x0468, memory_, 1);
        verifyLine(lines[0], 0x0468, { 0xFD,0xCB,0x23,0x1A }, "*RR (IY+$23), D");
        initMem(0x046c, { 0xFD,0xCB,0x23,0x1B });
        lines = disassembler_.disassembleForward(0x046c, memory_, 1);
        verifyLine(lines[0], 0x046c, { 0xFD,0xCB,0x23,0x1B }, "*RR (IY+$23), E");
        initMem(0x0470, { 0xFD,0xCB,0x23,0x1C });
        lines = disassembler_.disassembleForward(0x0470, memory_, 1);
        verifyLine(lines[0], 0x0470, { 0xFD,0xCB,0x23,0x1C }, "*RR (IY+$23), H");
        initMem(0x0474, { 0xFD,0xCB,0x23,0x1D });
        lines = disassembler_.disassembleForward(0x0474, memory_, 1);
        verifyLine(lines[0], 0x0474, { 0xFD,0xCB,0x23,0x1D }, "*RR (IY+$23), L");
        initMem(0x0478, { 0xFD,0xCB,0x23,0x1E });
        lines = disassembler_.disassembleForward(0x0478, memory_, 1);
        verifyLine(lines[0], 0x0478, { 0xFD,0xCB,0x23,0x1E }, "RR (IY+$23)");
        initMem(0x047c, { 0xFD,0xCB,0x23,0x1F });
        lines = disassembler_.disassembleForward(0x047c, memory_, 1);
        verifyLine(lines[0], 0x047c, { 0xFD,0xCB,0x23,0x1F }, "*RR (IY+$23), A");
        initMem(0x0480, { 0xFD,0xCB,0x23,0x20 });
        lines = disassembler_.disassembleForward(0x0480, memory_, 1);
        verifyLine(lines[0], 0x0480, { 0xFD,0xCB,0x23,0x20 }, "*SLA (IY+$23), B");
        initMem(0x0484, { 0xFD,0xCB,0x23,0x21 });
        lines = disassembler_.disassembleForward(0x0484, memory_, 1);
        verifyLine(lines[0], 0x0484, { 0xFD,0xCB,0x23,0x21 }, "*SLA (IY+$23), C");
        initMem(0x0488, { 0xFD,0xCB,0x23,0x22 });
        lines = disassembler_.disassembleForward(0x0488, memory_, 1);
        verifyLine(lines[0], 0x0488, { 0xFD,0xCB,0x23,0x22 }, "*SLA (IY+$23), D");
        initMem(0x048c, { 0xFD,0xCB,0x23,0x23 });
        lines = disassembler_.disassembleForward(0x048c, memory_, 1);
        verifyLine(lines[0], 0x048c, { 0xFD,0xCB,0x23,0x23 }, "*SLA (IY+$23), E");
        initMem(0x0490, { 0xFD,0xCB,0x23,0x24 });
        lines = disassembler_.disassembleForward(0x0490, memory_, 1);
        verifyLine(lines[0], 0x0490, { 0xFD,0xCB,0x23,0x24 }, "*SLA (IY+$23), H");
        initMem(0x0494, { 0xFD,0xCB,0x23,0x25 });
        lines = disassembler_.disassembleForward(0x0494, memory_, 1);
        verifyLine(lines[0], 0x0494, { 0xFD,0xCB,0x23,0x25 }, "*SLA (IY+$23), L");
        initMem(0x0498, { 0xFD,0xCB,0x23,0x26 });
        lines = disassembler_.disassembleForward(0x0498, memory_, 1);
        verifyLine(lines[0], 0x0498, { 0xFD,0xCB,0x23,0x26 }, "SLA (IY+$23)");
        initMem(0x049c, { 0xFD,0xCB,0x23,0x27 });
        lines = disassembler_.disassembleForward(0x049c, memory_, 1);
        verifyLine(lines[0], 0x049c, { 0xFD,0xCB,0x23,0x27 }, "*SLA (IY+$23), A");
        initMem(0x04a0, { 0xFD,0xCB,0x23,0x28 });
        lines = disassembler_.disassembleForward(0x04a0, memory_, 1);
        verifyLine(lines[0], 0x04a0, { 0xFD,0xCB,0x23,0x28 }, "*SRA (IY+$23), B");
        initMem(0x04a4, { 0xFD,0xCB,0x23,0x29 });
        lines = disassembler_.disassembleForward(0x04a4, memory_, 1);
        verifyLine(lines[0], 0x04a4, { 0xFD,0xCB,0x23,0x29 }, "*SRA (IY+$23), C");
        initMem(0x04a8, { 0xFD,0xCB,0x23,0x2A });
        lines = disassembler_.disassembleForward(0x04a8, memory_, 1);
        verifyLine(lines[0], 0x04a8, { 0xFD,0xCB,0x23,0x2A }, "*SRA (IY+$23), D");
        initMem(0x04ac, { 0xFD,0xCB,0x23,0x2B });
        lines = disassembler_.disassembleForward(0x04ac, memory_, 1);
        verifyLine(lines[0], 0x04ac, { 0xFD,0xCB,0x23,0x2B }, "*SRA (IY+$23), E");
        initMem(0x04b0, { 0xFD,0xCB,0x23,0x2C });
        lines = disassembler_.disassembleForward(0x04b0, memory_, 1);
        verifyLine(lines[0], 0x04b0, { 0xFD,0xCB,0x23,0x2C }, "*SRA (IY+$23), H");
        initMem(0x04b4, { 0xFD,0xCB,0x23,0x2D });
        lines = disassembler_.disassembleForward(0x04b4, memory_, 1);
        verifyLine(lines[0], 0x04b4, { 0xFD,0xCB,0x23,0x2D }, "*SRA (IY+$23), L");
        initMem(0x04b8, { 0xFD,0xCB,0x23,0x2E });
        lines = disassembler_.disassembleForward(0x04b8, memory_, 1);
        verifyLine(lines[0], 0x04b8, { 0xFD,0xCB,0x23,0x2E }, "SRA (IY+$23)");
        initMem(0x04bc, { 0xFD,0xCB,0x23,0x2F });
        lines = disassembler_.disassembleForward(0x04bc, memory_, 1);
        verifyLine(lines[0], 0x04bc, { 0xFD,0xCB,0x23,0x2F }, "*SRA (IY+$23), A");
        initMem(0x04c0, { 0xFD,0xCB,0x23,0x30 });
        lines = disassembler_.disassembleForward(0x04c0, memory_, 1);
        verifyLine(lines[0], 0x04c0, { 0xFD,0xCB,0x23,0x30 }, "*SLL (IY+$23), B");
        initMem(0x04c4, { 0xFD,0xCB,0x23,0x31 });
        lines = disassembler_.disassembleForward(0x04c4, memory_, 1);
        verifyLine(lines[0], 0x04c4, { 0xFD,0xCB,0x23,0x31 }, "*SLL (IY+$23), C");
        initMem(0x04c8, { 0xFD,0xCB,0x23,0x32 });
        lines = disassembler_.disassembleForward(0x04c8, memory_, 1);
        verifyLine(lines[0], 0x04c8, { 0xFD,0xCB,0x23,0x32 }, "*SLL (IY+$23), D");
        initMem(0x04cc, { 0xFD,0xCB,0x23,0x33 });
        lines = disassembler_.disassembleForward(0x04cc, memory_, 1);
        verifyLine(lines[0], 0x04cc, { 0xFD,0xCB,0x23,0x33 }, "*SLL (IY+$23), E");
        initMem(0x04d0, { 0xFD,0xCB,0x23,0x34 });
        lines = disassembler_.disassembleForward(0x04d0, memory_, 1);
        verifyLine(lines[0], 0x04d0, { 0xFD,0xCB,0x23,0x34 }, "*SLL (IY+$23), H");
        initMem(0x04d4, { 0xFD,0xCB,0x23,0x35 });
        lines = disassembler_.disassembleForward(0x04d4, memory_, 1);
        verifyLine(lines[0], 0x04d4, { 0xFD,0xCB,0x23,0x35 }, "*SLL (IY+$23), L");
        initMem(0x04d8, { 0xFD,0xCB,0x23,0x36 });
        lines = disassembler_.disassembleForward(0x04d8, memory_, 1);
        verifyLine(lines[0], 0x04d8, { 0xFD,0xCB,0x23,0x36 }, "*SLL (IY+$23)");
        initMem(0x04dc, { 0xFD,0xCB,0x23,0x37 });
        lines = disassembler_.disassembleForward(0x04dc, memory_, 1);
        verifyLine(lines[0], 0x04dc, { 0xFD,0xCB,0x23,0x37 }, "*SLL (IY+$23), A");
        initMem(0x04e0, { 0xFD,0xCB,0x23,0x38 });
        lines = disassembler_.disassembleForward(0x04e0, memory_, 1);
        verifyLine(lines[0], 0x04e0, { 0xFD,0xCB,0x23,0x38 }, "*SRL (IY+$23), B");
        initMem(0x04e4, { 0xFD,0xCB,0x23,0x39 });
        lines = disassembler_.disassembleForward(0x04e4, memory_, 1);
        verifyLine(lines[0], 0x04e4, { 0xFD,0xCB,0x23,0x39 }, "*SRL (IY+$23), C");
        initMem(0x04e8, { 0xFD,0xCB,0x23,0x3A });
        lines = disassembler_.disassembleForward(0x04e8, memory_, 1);
        verifyLine(lines[0], 0x04e8, { 0xFD,0xCB,0x23,0x3A }, "*SRL (IY+$23), D");
        initMem(0x04ec, { 0xFD,0xCB,0x23,0x3B });
        lines = disassembler_.disassembleForward(0x04ec, memory_, 1);
        verifyLine(lines[0], 0x04ec, { 0xFD,0xCB,0x23,0x3B }, "*SRL (IY+$23), E");
        initMem(0x04f0, { 0xFD,0xCB,0x23,0x3C });
        lines = disassembler_.disassembleForward(0x04f0, memory_, 1);
        verifyLine(lines[0], 0x04f0, { 0xFD,0xCB,0x23,0x3C }, "*SRL (IY+$23), H");
        initMem(0x04f4, { 0xFD,0xCB,0x23,0x3D });
        lines = disassembler_.disassembleForward(0x04f4, memory_, 1);
        verifyLine(lines[0], 0x04f4, { 0xFD,0xCB,0x23,0x3D }, "*SRL (IY+$23), L");
        initMem(0x04f8, { 0xFD,0xCB,0x23,0x3E });
        lines = disassembler_.disassembleForward(0x04f8, memory_, 1);
        verifyLine(lines[0], 0x04f8, { 0xFD,0xCB,0x23,0x3E }, "SRL (IY+$23)");
        initMem(0x04fc, { 0xFD,0xCB,0x23,0x3F });
        lines = disassembler_.disassembleForward(0x04fc, memory_, 1);
        verifyLine(lines[0], 0x04fc, { 0xFD,0xCB,0x23,0x3F }, "*SRL (IY+$23), A");
        initMem(0x0500, { 0xFD,0xCB,0x23,0x40 });
        lines = disassembler_.disassembleForward(0x0500, memory_, 1);
        verifyLine(lines[0], 0x0500, { 0xFD,0xCB,0x23,0x40 }, "*BIT 0, (IY+$23)");
        initMem(0x0504, { 0xFD,0xCB,0x23,0x41 });
        lines = disassembler_.disassembleForward(0x0504, memory_, 1);
        verifyLine(lines[0], 0x0504, { 0xFD,0xCB,0x23,0x41 }, "*BIT 0, (IY+$23)");
        initMem(0x0508, { 0xFD,0xCB,0x23,0x42 });
        lines = disassembler_.disassembleForward(0x0508, memory_, 1);
        verifyLine(lines[0], 0x0508, { 0xFD,0xCB,0x23,0x42 }, "*BIT 0, (IY+$23)");
        initMem(0x050c, { 0xFD,0xCB,0x23,0x43 });
        lines = disassembler_.disassembleForward(0x050c, memory_, 1);
        verifyLine(lines[0], 0x050c, { 0xFD,0xCB,0x23,0x43 }, "*BIT 0, (IY+$23)");
        initMem(0x0510, { 0xFD,0xCB,0x23,0x44 });
        lines = disassembler_.disassembleForward(0x0510, memory_, 1);
        verifyLine(lines[0], 0x0510, { 0xFD,0xCB,0x23,0x44 }, "*BIT 0, (IY+$23)");
        initMem(0x0514, { 0xFD,0xCB,0x23,0x45 });
        lines = disassembler_.disassembleForward(0x0514, memory_, 1);
        verifyLine(lines[0], 0x0514, { 0xFD,0xCB,0x23,0x45 }, "*BIT 0, (IY+$23)");
        initMem(0x0518, { 0xFD,0xCB,0x23,0x46 });
        lines = disassembler_.disassembleForward(0x0518, memory_, 1);
        verifyLine(lines[0], 0x0518, { 0xFD,0xCB,0x23,0x46 }, "BIT 0, (IY+$23)");
        initMem(0x051c, { 0xFD,0xCB,0x23,0x47 });
        lines = disassembler_.disassembleForward(0x051c, memory_, 1);
        verifyLine(lines[0], 0x051c, { 0xFD,0xCB,0x23,0x47 }, "*BIT 0, (IY+$23)");
        initMem(0x0520, { 0xFD,0xCB,0x23,0x48 });
        lines = disassembler_.disassembleForward(0x0520, memory_, 1);
        verifyLine(lines[0], 0x0520, { 0xFD,0xCB,0x23,0x48 }, "*BIT 1, (IY+$23)");
        initMem(0x0524, { 0xFD,0xCB,0x23,0x49 });
        lines = disassembler_.disassembleForward(0x0524, memory_, 1);
        verifyLine(lines[0], 0x0524, { 0xFD,0xCB,0x23,0x49 }, "*BIT 1, (IY+$23)");
        initMem(0x0528, { 0xFD,0xCB,0x23,0x4A });
        lines = disassembler_.disassembleForward(0x0528, memory_, 1);
        verifyLine(lines[0], 0x0528, { 0xFD,0xCB,0x23,0x4A }, "*BIT 1, (IY+$23)");
        initMem(0x052c, { 0xFD,0xCB,0x23,0x4B });
        lines = disassembler_.disassembleForward(0x052c, memory_, 1);
        verifyLine(lines[0], 0x052c, { 0xFD,0xCB,0x23,0x4B }, "*BIT 1, (IY+$23)");
        initMem(0x0530, { 0xFD,0xCB,0x23,0x4C });
        lines = disassembler_.disassembleForward(0x0530, memory_, 1);
        verifyLine(lines[0], 0x0530, { 0xFD,0xCB,0x23,0x4C }, "*BIT 1, (IY+$23)");
        initMem(0x0534, { 0xFD,0xCB,0x23,0x4D });
        lines = disassembler_.disassembleForward(0x0534, memory_, 1);
        verifyLine(lines[0], 0x0534, { 0xFD,0xCB,0x23,0x4D }, "*BIT 1, (IY+$23)");
        initMem(0x0538, { 0xFD,0xCB,0x23,0x4E });
        lines = disassembler_.disassembleForward(0x0538, memory_, 1);
        verifyLine(lines[0], 0x0538, { 0xFD,0xCB,0x23,0x4E }, "BIT 1, (IY+$23)");
        initMem(0x053c, { 0xFD,0xCB,0x23,0x4F });
        lines = disassembler_.disassembleForward(0x053c, memory_, 1);
        verifyLine(lines[0], 0x053c, { 0xFD,0xCB,0x23,0x4F }, "*BIT 1, (IY+$23)");
        initMem(0x0540, { 0xFD,0xCB,0x23,0x50 });
        lines = disassembler_.disassembleForward(0x0540, memory_, 1);
        verifyLine(lines[0], 0x0540, { 0xFD,0xCB,0x23,0x50 }, "*BIT 2, (IY+$23)");
        initMem(0x0544, { 0xFD,0xCB,0x23,0x51 });
        lines = disassembler_.disassembleForward(0x0544, memory_, 1);
        verifyLine(lines[0], 0x0544, { 0xFD,0xCB,0x23,0x51 }, "*BIT 2, (IY+$23)");
        initMem(0x0548, { 0xFD,0xCB,0x23,0x52 });
        lines = disassembler_.disassembleForward(0x0548, memory_, 1);
        verifyLine(lines[0], 0x0548, { 0xFD,0xCB,0x23,0x52 }, "*BIT 2, (IY+$23)");
        initMem(0x054c, { 0xFD,0xCB,0x23,0x53 });
        lines = disassembler_.disassembleForward(0x054c, memory_, 1);
        verifyLine(lines[0], 0x054c, { 0xFD,0xCB,0x23,0x53 }, "*BIT 2, (IY+$23)");
        initMem(0x0550, { 0xFD,0xCB,0x23,0x54 });
        lines = disassembler_.disassembleForward(0x0550, memory_, 1);
        verifyLine(lines[0], 0x0550, { 0xFD,0xCB,0x23,0x54 }, "*BIT 2, (IY+$23)");
        initMem(0x0554, { 0xFD,0xCB,0x23,0x55 });
        lines = disassembler_.disassembleForward(0x0554, memory_, 1);
        verifyLine(lines[0], 0x0554, { 0xFD,0xCB,0x23,0x55 }, "*BIT 2, (IY+$23)");
        initMem(0x0558, { 0xFD,0xCB,0x23,0x56 });
        lines = disassembler_.disassembleForward(0x0558, memory_, 1);
        verifyLine(lines[0], 0x0558, { 0xFD,0xCB,0x23,0x56 }, "BIT 2, (IY+$23)");
        initMem(0x055c, { 0xFD,0xCB,0x23,0x57 });
        lines = disassembler_.disassembleForward(0x055c, memory_, 1);
        verifyLine(lines[0], 0x055c, { 0xFD,0xCB,0x23,0x57 }, "*BIT 2, (IY+$23)");
        initMem(0x0560, { 0xFD,0xCB,0x23,0x58 });
        lines = disassembler_.disassembleForward(0x0560, memory_, 1);
        verifyLine(lines[0], 0x0560, { 0xFD,0xCB,0x23,0x58 }, "*BIT 3, (IY+$23)");
        initMem(0x0564, { 0xFD,0xCB,0x23,0x59 });
        lines = disassembler_.disassembleForward(0x0564, memory_, 1);
        verifyLine(lines[0], 0x0564, { 0xFD,0xCB,0x23,0x59 }, "*BIT 3, (IY+$23)");
        initMem(0x0568, { 0xFD,0xCB,0x23,0x5A });
        lines = disassembler_.disassembleForward(0x0568, memory_, 1);
        verifyLine(lines[0], 0x0568, { 0xFD,0xCB,0x23,0x5A }, "*BIT 3, (IY+$23)");
        initMem(0x056c, { 0xFD,0xCB,0x23,0x5B });
        lines = disassembler_.disassembleForward(0x056c, memory_, 1);
        verifyLine(lines[0], 0x056c, { 0xFD,0xCB,0x23,0x5B }, "*BIT 3, (IY+$23)");
        initMem(0x0570, { 0xFD,0xCB,0x23,0x5C });
        lines = disassembler_.disassembleForward(0x0570, memory_, 1);
        verifyLine(lines[0], 0x0570, { 0xFD,0xCB,0x23,0x5C }, "*BIT 3, (IY+$23)");
        initMem(0x0574, { 0xFD,0xCB,0x23,0x5D });
        lines = disassembler_.disassembleForward(0x0574, memory_, 1);
        verifyLine(lines[0], 0x0574, { 0xFD,0xCB,0x23,0x5D }, "*BIT 3, (IY+$23)");
        initMem(0x0578, { 0xFD,0xCB,0x23,0x5E });
        lines = disassembler_.disassembleForward(0x0578, memory_, 1);
        verifyLine(lines[0], 0x0578, { 0xFD,0xCB,0x23,0x5E }, "BIT 3, (IY+$23)");
        initMem(0x057c, { 0xFD,0xCB,0x23,0x5F });
        lines = disassembler_.disassembleForward(0x057c, memory_, 1);
        verifyLine(lines[0], 0x057c, { 0xFD,0xCB,0x23,0x5F }, "*BIT 3, (IY+$23)");
        initMem(0x0580, { 0xFD,0xCB,0x23,0x60 });
        lines = disassembler_.disassembleForward(0x0580, memory_, 1);
        verifyLine(lines[0], 0x0580, { 0xFD,0xCB,0x23,0x60 }, "*BIT 4, (IY+$23)");
        initMem(0x0584, { 0xFD,0xCB,0x23,0x61 });
        lines = disassembler_.disassembleForward(0x0584, memory_, 1);
        verifyLine(lines[0], 0x0584, { 0xFD,0xCB,0x23,0x61 }, "*BIT 4, (IY+$23)");
        initMem(0x0588, { 0xFD,0xCB,0x23,0x62 });
        lines = disassembler_.disassembleForward(0x0588, memory_, 1);
        verifyLine(lines[0], 0x0588, { 0xFD,0xCB,0x23,0x62 }, "*BIT 4, (IY+$23)");
        initMem(0x058c, { 0xFD,0xCB,0x23,0x63 });
        lines = disassembler_.disassembleForward(0x058c, memory_, 1);
        verifyLine(lines[0], 0x058c, { 0xFD,0xCB,0x23,0x63 }, "*BIT 4, (IY+$23)");
        initMem(0x0590, { 0xFD,0xCB,0x23,0x64 });
        lines = disassembler_.disassembleForward(0x0590, memory_, 1);
        verifyLine(lines[0], 0x0590, { 0xFD,0xCB,0x23,0x64 }, "*BIT 4, (IY+$23)");
        initMem(0x0594, { 0xFD,0xCB,0x23,0x65 });
        lines = disassembler_.disassembleForward(0x0594, memory_, 1);
        verifyLine(lines[0], 0x0594, { 0xFD,0xCB,0x23,0x65 }, "*BIT 4, (IY+$23)");
        initMem(0x0598, { 0xFD,0xCB,0x23,0x66 });
        lines = disassembler_.disassembleForward(0x0598, memory_, 1);
        verifyLine(lines[0], 0x0598, { 0xFD,0xCB,0x23,0x66 }, "BIT 4, (IY+$23)");
        initMem(0x059c, { 0xFD,0xCB,0x23,0x67 });
        lines = disassembler_.disassembleForward(0x059c, memory_, 1);
        verifyLine(lines[0], 0x059c, { 0xFD,0xCB,0x23,0x67 }, "*BIT 4, (IY+$23)");
        initMem(0x05a0, { 0xFD,0xCB,0x23,0x68 });
        lines = disassembler_.disassembleForward(0x05a0, memory_, 1);
        verifyLine(lines[0], 0x05a0, { 0xFD,0xCB,0x23,0x68 }, "*BIT 5, (IY+$23)");
        initMem(0x05a4, { 0xFD,0xCB,0x23,0x69 });
        lines = disassembler_.disassembleForward(0x05a4, memory_, 1);
        verifyLine(lines[0], 0x05a4, { 0xFD,0xCB,0x23,0x69 }, "*BIT 5, (IY+$23)");
        initMem(0x05a8, { 0xFD,0xCB,0x23,0x6A });
        lines = disassembler_.disassembleForward(0x05a8, memory_, 1);
        verifyLine(lines[0], 0x05a8, { 0xFD,0xCB,0x23,0x6A }, "*BIT 5, (IY+$23)");
        initMem(0x05ac, { 0xFD,0xCB,0x23,0x6B });
        lines = disassembler_.disassembleForward(0x05ac, memory_, 1);
        verifyLine(lines[0], 0x05ac, { 0xFD,0xCB,0x23,0x6B }, "*BIT 5, (IY+$23)");
        initMem(0x05b0, { 0xFD,0xCB,0x23,0x6C });
        lines = disassembler_.disassembleForward(0x05b0, memory_, 1);
        verifyLine(lines[0], 0x05b0, { 0xFD,0xCB,0x23,0x6C }, "*BIT 5, (IY+$23)");
        initMem(0x05b4, { 0xFD,0xCB,0x23,0x6D });
        lines = disassembler_.disassembleForward(0x05b4, memory_, 1);
        verifyLine(lines[0], 0x05b4, { 0xFD,0xCB,0x23,0x6D }, "*BIT 5, (IY+$23)");
        initMem(0x05b8, { 0xFD,0xCB,0x23,0x6E });
        lines = disassembler_.disassembleForward(0x05b8, memory_, 1);
        verifyLine(lines[0], 0x05b8, { 0xFD,0xCB,0x23,0x6E }, "BIT 5, (IY+$23)");
        initMem(0x05bc, { 0xFD,0xCB,0x23,0x6F });
        lines = disassembler_.disassembleForward(0x05bc, memory_, 1);
        verifyLine(lines[0], 0x05bc, { 0xFD,0xCB,0x23,0x6F }, "*BIT 5, (IY+$23)");
        initMem(0x05c0, { 0xFD,0xCB,0x23,0x70 });
        lines = disassembler_.disassembleForward(0x05c0, memory_, 1);
        verifyLine(lines[0], 0x05c0, { 0xFD,0xCB,0x23,0x70 }, "*BIT 6, (IY+$23)");
        initMem(0x05c4, { 0xFD,0xCB,0x23,0x71 });
        lines = disassembler_.disassembleForward(0x05c4, memory_, 1);
        verifyLine(lines[0], 0x05c4, { 0xFD,0xCB,0x23,0x71 }, "*BIT 6, (IY+$23)");
        initMem(0x05c8, { 0xFD,0xCB,0x23,0x72 });
        lines = disassembler_.disassembleForward(0x05c8, memory_, 1);
        verifyLine(lines[0], 0x05c8, { 0xFD,0xCB,0x23,0x72 }, "*BIT 6, (IY+$23)");
        initMem(0x05cc, { 0xFD,0xCB,0x23,0x73 });
        lines = disassembler_.disassembleForward(0x05cc, memory_, 1);
        verifyLine(lines[0], 0x05cc, { 0xFD,0xCB,0x23,0x73 }, "*BIT 6, (IY+$23)");
        initMem(0x05d0, { 0xFD,0xCB,0x23,0x74 });
        lines = disassembler_.disassembleForward(0x05d0, memory_, 1);
        verifyLine(lines[0], 0x05d0, { 0xFD,0xCB,0x23,0x74 }, "*BIT 6, (IY+$23)");
        initMem(0x05d4, { 0xFD,0xCB,0x23,0x75 });
        lines = disassembler_.disassembleForward(0x05d4, memory_, 1);
        verifyLine(lines[0], 0x05d4, { 0xFD,0xCB,0x23,0x75 }, "*BIT 6, (IY+$23)");
        initMem(0x05d8, { 0xFD,0xCB,0x23,0x76 });
        lines = disassembler_.disassembleForward(0x05d8, memory_, 1);
        verifyLine(lines[0], 0x05d8, { 0xFD,0xCB,0x23,0x76 }, "BIT 6, (IY+$23)");
        initMem(0x05dc, { 0xFD,0xCB,0x23,0x77 });
        lines = disassembler_.disassembleForward(0x05dc, memory_, 1);
        verifyLine(lines[0], 0x05dc, { 0xFD,0xCB,0x23,0x77 }, "*BIT 6, (IY+$23)");
        initMem(0x05e0, { 0xFD,0xCB,0x23,0x78 });
        lines = disassembler_.disassembleForward(0x05e0, memory_, 1);
        verifyLine(lines[0], 0x05e0, { 0xFD,0xCB,0x23,0x78 }, "*BIT 7, (IY+$23)");
        initMem(0x05e4, { 0xFD,0xCB,0x23,0x79 });
        lines = disassembler_.disassembleForward(0x05e4, memory_, 1);
        verifyLine(lines[0], 0x05e4, { 0xFD,0xCB,0x23,0x79 }, "*BIT 7, (IY+$23)");
        initMem(0x05e8, { 0xFD,0xCB,0x23,0x7A });
        lines = disassembler_.disassembleForward(0x05e8, memory_, 1);
        verifyLine(lines[0], 0x05e8, { 0xFD,0xCB,0x23,0x7A }, "*BIT 7, (IY+$23)");
        initMem(0x05ec, { 0xFD,0xCB,0x23,0x7B });
        lines = disassembler_.disassembleForward(0x05ec, memory_, 1);
        verifyLine(lines[0], 0x05ec, { 0xFD,0xCB,0x23,0x7B }, "*BIT 7, (IY+$23)");
        initMem(0x05f0, { 0xFD,0xCB,0x23,0x7C });
        lines = disassembler_.disassembleForward(0x05f0, memory_, 1);
        verifyLine(lines[0], 0x05f0, { 0xFD,0xCB,0x23,0x7C }, "*BIT 7, (IY+$23)");
        initMem(0x05f4, { 0xFD,0xCB,0x23,0x7D });
        lines = disassembler_.disassembleForward(0x05f4, memory_, 1);
        verifyLine(lines[0], 0x05f4, { 0xFD,0xCB,0x23,0x7D }, "*BIT 7, (IY+$23)");
        initMem(0x05f8, { 0xFD,0xCB,0x23,0x7E });
        lines = disassembler_.disassembleForward(0x05f8, memory_, 1);
        verifyLine(lines[0], 0x05f8, { 0xFD,0xCB,0x23,0x7E }, "BIT 7, (IY+$23)");
        initMem(0x05fc, { 0xFD,0xCB,0x23,0x7F });
        lines = disassembler_.disassembleForward(0x05fc, memory_, 1);
        verifyLine(lines[0], 0x05fc, { 0xFD,0xCB,0x23,0x7F }, "*BIT 7, (IY+$23)");
        initMem(0x0600, { 0xFD,0xCB,0x23,0x80 });
        lines = disassembler_.disassembleForward(0x0600, memory_, 1);
        verifyLine(lines[0], 0x0600, { 0xFD,0xCB,0x23,0x80 }, "*RES 0, (IY+$23), B");
        initMem(0x0604, { 0xFD,0xCB,0x23,0x81 });
        lines = disassembler_.disassembleForward(0x0604, memory_, 1);
        verifyLine(lines[0], 0x0604, { 0xFD,0xCB,0x23,0x81 }, "*RES 0, (IY+$23), C");
        initMem(0x0608, { 0xFD,0xCB,0x23,0x82 });
        lines = disassembler_.disassembleForward(0x0608, memory_, 1);
        verifyLine(lines[0], 0x0608, { 0xFD,0xCB,0x23,0x82 }, "*RES 0, (IY+$23), D");
        initMem(0x060c, { 0xFD,0xCB,0x23,0x83 });
        lines = disassembler_.disassembleForward(0x060c, memory_, 1);
        verifyLine(lines[0], 0x060c, { 0xFD,0xCB,0x23,0x83 }, "*RES 0, (IY+$23), E");
        initMem(0x0610, { 0xFD,0xCB,0x23,0x84 });
        lines = disassembler_.disassembleForward(0x0610, memory_, 1);
        verifyLine(lines[0], 0x0610, { 0xFD,0xCB,0x23,0x84 }, "*RES 0, (IY+$23), H");
        initMem(0x0614, { 0xFD,0xCB,0x23,0x85 });
        lines = disassembler_.disassembleForward(0x0614, memory_, 1);
        verifyLine(lines[0], 0x0614, { 0xFD,0xCB,0x23,0x85 }, "*RES 0, (IY+$23), L");
        initMem(0x0618, { 0xFD,0xCB,0x23,0x86 });
        lines = disassembler_.disassembleForward(0x0618, memory_, 1);
        verifyLine(lines[0], 0x0618, { 0xFD,0xCB,0x23,0x86 }, "RES 0, (IY+$23)");
        initMem(0x061c, { 0xFD,0xCB,0x23,0x87 });
        lines = disassembler_.disassembleForward(0x061c, memory_, 1);
        verifyLine(lines[0], 0x061c, { 0xFD,0xCB,0x23,0x87 }, "*RES 0, (IY+$23), A");
        initMem(0x0620, { 0xFD,0xCB,0x23,0x88 });
        lines = disassembler_.disassembleForward(0x0620, memory_, 1);
        verifyLine(lines[0], 0x0620, { 0xFD,0xCB,0x23,0x88 }, "*RES 1, (IY+$23), B");
        initMem(0x0624, { 0xFD,0xCB,0x23,0x89 });
        lines = disassembler_.disassembleForward(0x0624, memory_, 1);
        verifyLine(lines[0], 0x0624, { 0xFD,0xCB,0x23,0x89 }, "*RES 1, (IY+$23), C");
        initMem(0x0628, { 0xFD,0xCB,0x23,0x8A });
        lines = disassembler_.disassembleForward(0x0628, memory_, 1);
        verifyLine(lines[0], 0x0628, { 0xFD,0xCB,0x23,0x8A }, "*RES 1, (IY+$23), D");
        initMem(0x062c, { 0xFD,0xCB,0x23,0x8B });
        lines = disassembler_.disassembleForward(0x062c, memory_, 1);
        verifyLine(lines[0], 0x062c, { 0xFD,0xCB,0x23,0x8B }, "*RES 1, (IY+$23), E");
        initMem(0x0630, { 0xFD,0xCB,0x23,0x8C });
        lines = disassembler_.disassembleForward(0x0630, memory_, 1);
        verifyLine(lines[0], 0x0630, { 0xFD,0xCB,0x23,0x8C }, "*RES 1, (IY+$23), H");
        initMem(0x0634, { 0xFD,0xCB,0x23,0x8D });
        lines = disassembler_.disassembleForward(0x0634, memory_, 1);
        verifyLine(lines[0], 0x0634, { 0xFD,0xCB,0x23,0x8D }, "*RES 1, (IY+$23), L");
        initMem(0x0638, { 0xFD,0xCB,0x23,0x8E });
        lines = disassembler_.disassembleForward(0x0638, memory_, 1);
        verifyLine(lines[0], 0x0638, { 0xFD,0xCB,0x23,0x8E }, "RES 1, (IY+$23)");
        initMem(0x063c, { 0xFD,0xCB,0x23,0x8F });
        lines = disassembler_.disassembleForward(0x063c, memory_, 1);
        verifyLine(lines[0], 0x063c, { 0xFD,0xCB,0x23,0x8F }, "*RES 1, (IY+$23), A");
        initMem(0x0640, { 0xFD,0xCB,0x23,0x90 });
        lines = disassembler_.disassembleForward(0x0640, memory_, 1);
        verifyLine(lines[0], 0x0640, { 0xFD,0xCB,0x23,0x90 }, "*RES 2, (IY+$23), B");
        initMem(0x0644, { 0xFD,0xCB,0x23,0x91 });
        lines = disassembler_.disassembleForward(0x0644, memory_, 1);
        verifyLine(lines[0], 0x0644, { 0xFD,0xCB,0x23,0x91 }, "*RES 2, (IY+$23), C");
        initMem(0x0648, { 0xFD,0xCB,0x23,0x92 });
        lines = disassembler_.disassembleForward(0x0648, memory_, 1);
        verifyLine(lines[0], 0x0648, { 0xFD,0xCB,0x23,0x92 }, "*RES 2, (IY+$23), D");
        initMem(0x064c, { 0xFD,0xCB,0x23,0x93 });
        lines = disassembler_.disassembleForward(0x064c, memory_, 1);
        verifyLine(lines[0], 0x064c, { 0xFD,0xCB,0x23,0x93 }, "*RES 2, (IY+$23), E");
        initMem(0x0650, { 0xFD,0xCB,0x23,0x94 });
        lines = disassembler_.disassembleForward(0x0650, memory_, 1);
        verifyLine(lines[0], 0x0650, { 0xFD,0xCB,0x23,0x94 }, "*RES 2, (IY+$23), H");
        initMem(0x0654, { 0xFD,0xCB,0x23,0x95 });
        lines = disassembler_.disassembleForward(0x0654, memory_, 1);
        verifyLine(lines[0], 0x0654, { 0xFD,0xCB,0x23,0x95 }, "*RES 2, (IY+$23), L");
        initMem(0x0658, { 0xFD,0xCB,0x23,0x96 });
        lines = disassembler_.disassembleForward(0x0658, memory_, 1);
        verifyLine(lines[0], 0x0658, { 0xFD,0xCB,0x23,0x96 }, "RES 2, (IY+$23)");
        initMem(0x065c, { 0xFD,0xCB,0x23,0x97 });
        lines = disassembler_.disassembleForward(0x065c, memory_, 1);
        verifyLine(lines[0], 0x065c, { 0xFD,0xCB,0x23,0x97 }, "*RES 2, (IY+$23), A");
        initMem(0x0660, { 0xFD,0xCB,0x23,0x98 });
        lines = disassembler_.disassembleForward(0x0660, memory_, 1);
        verifyLine(lines[0], 0x0660, { 0xFD,0xCB,0x23,0x98 }, "*RES 3, (IY+$23), B");
        initMem(0x0664, { 0xFD,0xCB,0x23,0x99 });
        lines = disassembler_.disassembleForward(0x0664, memory_, 1);
        verifyLine(lines[0], 0x0664, { 0xFD,0xCB,0x23,0x99 }, "*RES 3, (IY+$23), C");
        initMem(0x0668, { 0xFD,0xCB,0x23,0x9A });
        lines = disassembler_.disassembleForward(0x0668, memory_, 1);
        verifyLine(lines[0], 0x0668, { 0xFD,0xCB,0x23,0x9A }, "*RES 3, (IY+$23), D");
        initMem(0x066c, { 0xFD,0xCB,0x23,0x9B });
        lines = disassembler_.disassembleForward(0x066c, memory_, 1);
        verifyLine(lines[0], 0x066c, { 0xFD,0xCB,0x23,0x9B }, "*RES 3, (IY+$23), E");
        initMem(0x0670, { 0xFD,0xCB,0x23,0x9C });
        lines = disassembler_.disassembleForward(0x0670, memory_, 1);
        verifyLine(lines[0], 0x0670, { 0xFD,0xCB,0x23,0x9C }, "*RES 3, (IY+$23), H");
        initMem(0x0674, { 0xFD,0xCB,0x23,0x9D });
        lines = disassembler_.disassembleForward(0x0674, memory_, 1);
        verifyLine(lines[0], 0x0674, { 0xFD,0xCB,0x23,0x9D }, "*RES 3, (IY+$23), L");
        initMem(0x0678, { 0xFD,0xCB,0x23,0x9E });
        lines = disassembler_.disassembleForward(0x0678, memory_, 1);
        verifyLine(lines[0], 0x0678, { 0xFD,0xCB,0x23,0x9E }, "RES 3, (IY+$23)");
        initMem(0x067c, { 0xFD,0xCB,0x23,0x9F });
        lines = disassembler_.disassembleForward(0x067c, memory_, 1);
        verifyLine(lines[0], 0x067c, { 0xFD,0xCB,0x23,0x9F }, "*RES 3, (IY+$23), A");
        initMem(0x0680, { 0xFD,0xCB,0x23,0xA0 });
        lines = disassembler_.disassembleForward(0x0680, memory_, 1);
        verifyLine(lines[0], 0x0680, { 0xFD,0xCB,0x23,0xA0 }, "*RES 4, (IY+$23), B");
        initMem(0x0684, { 0xFD,0xCB,0x23,0xA1 });
        lines = disassembler_.disassembleForward(0x0684, memory_, 1);
        verifyLine(lines[0], 0x0684, { 0xFD,0xCB,0x23,0xA1 }, "*RES 4, (IY+$23), C");
        initMem(0x0688, { 0xFD,0xCB,0x23,0xA2 });
        lines = disassembler_.disassembleForward(0x0688, memory_, 1);
        verifyLine(lines[0], 0x0688, { 0xFD,0xCB,0x23,0xA2 }, "*RES 4, (IY+$23), D");
        initMem(0x068c, { 0xFD,0xCB,0x23,0xA3 });
        lines = disassembler_.disassembleForward(0x068c, memory_, 1);
        verifyLine(lines[0], 0x068c, { 0xFD,0xCB,0x23,0xA3 }, "*RES 4, (IY+$23), E");
        initMem(0x0690, { 0xFD,0xCB,0x23,0xA4 });
        lines = disassembler_.disassembleForward(0x0690, memory_, 1);
        verifyLine(lines[0], 0x0690, { 0xFD,0xCB,0x23,0xA4 }, "*RES 4, (IY+$23), H");
        initMem(0x0694, { 0xFD,0xCB,0x23,0xA5 });
        lines = disassembler_.disassembleForward(0x0694, memory_, 1);
        verifyLine(lines[0], 0x0694, { 0xFD,0xCB,0x23,0xA5 }, "*RES 4, (IY+$23), L");
        initMem(0x0698, { 0xFD,0xCB,0x23,0xA6 });
        lines = disassembler_.disassembleForward(0x0698, memory_, 1);
        verifyLine(lines[0], 0x0698, { 0xFD,0xCB,0x23,0xA6 }, "RES 4, (IY+$23)");
        initMem(0x069c, { 0xFD,0xCB,0x23,0xA7 });
        lines = disassembler_.disassembleForward(0x069c, memory_, 1);
        verifyLine(lines[0], 0x069c, { 0xFD,0xCB,0x23,0xA7 }, "*RES 4, (IY+$23), A");
        initMem(0x06a0, { 0xFD,0xCB,0x23,0xA8 });
        lines = disassembler_.disassembleForward(0x06a0, memory_, 1);
        verifyLine(lines[0], 0x06a0, { 0xFD,0xCB,0x23,0xA8 }, "*RES 5, (IY+$23), B");
        initMem(0x06a4, { 0xFD,0xCB,0x23,0xA9 });
        lines = disassembler_.disassembleForward(0x06a4, memory_, 1);
        verifyLine(lines[0], 0x06a4, { 0xFD,0xCB,0x23,0xA9 }, "*RES 5, (IY+$23), C");
        initMem(0x06a8, { 0xFD,0xCB,0x23,0xAA });
        lines = disassembler_.disassembleForward(0x06a8, memory_, 1);
        verifyLine(lines[0], 0x06a8, { 0xFD,0xCB,0x23,0xAA }, "*RES 5, (IY+$23), D");
        initMem(0x06ac, { 0xFD,0xCB,0x23,0xAB });
        lines = disassembler_.disassembleForward(0x06ac, memory_, 1);
        verifyLine(lines[0], 0x06ac, { 0xFD,0xCB,0x23,0xAB }, "*RES 5, (IY+$23), E");
        initMem(0x06b0, { 0xFD,0xCB,0x23,0xAC });
        lines = disassembler_.disassembleForward(0x06b0, memory_, 1);
        verifyLine(lines[0], 0x06b0, { 0xFD,0xCB,0x23,0xAC }, "*RES 5, (IY+$23), H");
        initMem(0x06b4, { 0xFD,0xCB,0x23,0xAD });
        lines = disassembler_.disassembleForward(0x06b4, memory_, 1);
        verifyLine(lines[0], 0x06b4, { 0xFD,0xCB,0x23,0xAD }, "*RES 5, (IY+$23), L");
        initMem(0x06b8, { 0xFD,0xCB,0x23,0xAE });
        lines = disassembler_.disassembleForward(0x06b8, memory_, 1);
        verifyLine(lines[0], 0x06b8, { 0xFD,0xCB,0x23,0xAE }, "RES 5, (IY+$23)");
        initMem(0x06bc, { 0xFD,0xCB,0x23,0xAF });
        lines = disassembler_.disassembleForward(0x06bc, memory_, 1);
        verifyLine(lines[0], 0x06bc, { 0xFD,0xCB,0x23,0xAF }, "*RES 5, (IY+$23), A");
        initMem(0x06c0, { 0xFD,0xCB,0x23,0xB0 });
        lines = disassembler_.disassembleForward(0x06c0, memory_, 1);
        verifyLine(lines[0], 0x06c0, { 0xFD,0xCB,0x23,0xB0 }, "*RES 6, (IY+$23), B");
        initMem(0x06c4, { 0xFD,0xCB,0x23,0xB1 });
        lines = disassembler_.disassembleForward(0x06c4, memory_, 1);
        verifyLine(lines[0], 0x06c4, { 0xFD,0xCB,0x23,0xB1 }, "*RES 6, (IY+$23), C");
        initMem(0x06c8, { 0xFD,0xCB,0x23,0xB2 });
        lines = disassembler_.disassembleForward(0x06c8, memory_, 1);
        verifyLine(lines[0], 0x06c8, { 0xFD,0xCB,0x23,0xB2 }, "*RES 6, (IY+$23), D");
        initMem(0x06cc, { 0xFD,0xCB,0x23,0xB3 });
        lines = disassembler_.disassembleForward(0x06cc, memory_, 1);
        verifyLine(lines[0], 0x06cc, { 0xFD,0xCB,0x23,0xB3 }, "*RES 6, (IY+$23), E");
        initMem(0x06d0, { 0xFD,0xCB,0x23,0xB4 });
        lines = disassembler_.disassembleForward(0x06d0, memory_, 1);
        verifyLine(lines[0], 0x06d0, { 0xFD,0xCB,0x23,0xB4 }, "*RES 6, (IY+$23), H");
        initMem(0x06d4, { 0xFD,0xCB,0x23,0xB5 });
        lines = disassembler_.disassembleForward(0x06d4, memory_, 1);
        verifyLine(lines[0], 0x06d4, { 0xFD,0xCB,0x23,0xB5 }, "*RES 6, (IY+$23), L");
        initMem(0x06d8, { 0xFD,0xCB,0x23,0xB6 });
        lines = disassembler_.disassembleForward(0x06d8, memory_, 1);
        verifyLine(lines[0], 0x06d8, { 0xFD,0xCB,0x23,0xB6 }, "RES 6, (IY+$23)");
        initMem(0x06dc, { 0xFD,0xCB,0x23,0xB7 });
        lines = disassembler_.disassembleForward(0x06dc, memory_, 1);
        verifyLine(lines[0], 0x06dc, { 0xFD,0xCB,0x23,0xB7 }, "*RES 6, (IY+$23), A");
        initMem(0x06e0, { 0xFD,0xCB,0x23,0xB8 });
        lines = disassembler_.disassembleForward(0x06e0, memory_, 1);
        verifyLine(lines[0], 0x06e0, { 0xFD,0xCB,0x23,0xB8 }, "*RES 7, (IY+$23), B");
        initMem(0x06e4, { 0xFD,0xCB,0x23,0xB9 });
        lines = disassembler_.disassembleForward(0x06e4, memory_, 1);
        verifyLine(lines[0], 0x06e4, { 0xFD,0xCB,0x23,0xB9 }, "*RES 7, (IY+$23), C");
        initMem(0x06e8, { 0xFD,0xCB,0x23,0xBA });
        lines = disassembler_.disassembleForward(0x06e8, memory_, 1);
        verifyLine(lines[0], 0x06e8, { 0xFD,0xCB,0x23,0xBA }, "*RES 7, (IY+$23), D");
        initMem(0x06ec, { 0xFD,0xCB,0x23,0xBB });
        lines = disassembler_.disassembleForward(0x06ec, memory_, 1);
        verifyLine(lines[0], 0x06ec, { 0xFD,0xCB,0x23,0xBB }, "*RES 7, (IY+$23), E");
        initMem(0x06f0, { 0xFD,0xCB,0x23,0xBC });
        lines = disassembler_.disassembleForward(0x06f0, memory_, 1);
        verifyLine(lines[0], 0x06f0, { 0xFD,0xCB,0x23,0xBC }, "*RES 7, (IY+$23), H");
        initMem(0x06f4, { 0xFD,0xCB,0x23,0xBD });
        lines = disassembler_.disassembleForward(0x06f4, memory_, 1);
        verifyLine(lines[0], 0x06f4, { 0xFD,0xCB,0x23,0xBD }, "*RES 7, (IY+$23), L");
        initMem(0x06f8, { 0xFD,0xCB,0x23,0xBE });
        lines = disassembler_.disassembleForward(0x06f8, memory_, 1);
        verifyLine(lines[0], 0x06f8, { 0xFD,0xCB,0x23,0xBE }, "RES 7, (IY+$23)");
        initMem(0x06fc, { 0xFD,0xCB,0x23,0xBF });
        lines = disassembler_.disassembleForward(0x06fc, memory_, 1);
        verifyLine(lines[0], 0x06fc, { 0xFD,0xCB,0x23,0xBF }, "*RES 7, (IY+$23), A");
        initMem(0x0700, { 0xFD,0xCB,0x23,0xC0 });
        lines = disassembler_.disassembleForward(0x0700, memory_, 1);
        verifyLine(lines[0], 0x0700, { 0xFD,0xCB,0x23,0xC0 }, "*SET 0, (IY+$23), B");
        initMem(0x0704, { 0xFD,0xCB,0x23,0xC1 });
        lines = disassembler_.disassembleForward(0x0704, memory_, 1);
        verifyLine(lines[0], 0x0704, { 0xFD,0xCB,0x23,0xC1 }, "*SET 0, (IY+$23), C");
        initMem(0x0708, { 0xFD,0xCB,0x23,0xC2 });
        lines = disassembler_.disassembleForward(0x0708, memory_, 1);
        verifyLine(lines[0], 0x0708, { 0xFD,0xCB,0x23,0xC2 }, "*SET 0, (IY+$23), D");
        initMem(0x070c, { 0xFD,0xCB,0x23,0xC3 });
        lines = disassembler_.disassembleForward(0x070c, memory_, 1);
        verifyLine(lines[0], 0x070c, { 0xFD,0xCB,0x23,0xC3 }, "*SET 0, (IY+$23), E");
        initMem(0x0710, { 0xFD,0xCB,0x23,0xC4 });
        lines = disassembler_.disassembleForward(0x0710, memory_, 1);
        verifyLine(lines[0], 0x0710, { 0xFD,0xCB,0x23,0xC4 }, "*SET 0, (IY+$23), H");
        initMem(0x0714, { 0xFD,0xCB,0x23,0xC5 });
        lines = disassembler_.disassembleForward(0x0714, memory_, 1);
        verifyLine(lines[0], 0x0714, { 0xFD,0xCB,0x23,0xC5 }, "*SET 0, (IY+$23), L");
        initMem(0x0718, { 0xFD,0xCB,0x23,0xC6 });
        lines = disassembler_.disassembleForward(0x0718, memory_, 1);
        verifyLine(lines[0], 0x0718, { 0xFD,0xCB,0x23,0xC6 }, "SET 0, (IY+$23)");
        initMem(0x071c, { 0xFD,0xCB,0x23,0xC7 });
        lines = disassembler_.disassembleForward(0x071c, memory_, 1);
        verifyLine(lines[0], 0x071c, { 0xFD,0xCB,0x23,0xC7 }, "*SET 0, (IY+$23), A");
        initMem(0x0720, { 0xFD,0xCB,0x23,0xC8 });
        lines = disassembler_.disassembleForward(0x0720, memory_, 1);
        verifyLine(lines[0], 0x0720, { 0xFD,0xCB,0x23,0xC8 }, "*SET 1, (IY+$23), B");
        initMem(0x0724, { 0xFD,0xCB,0x23,0xC9 });
        lines = disassembler_.disassembleForward(0x0724, memory_, 1);
        verifyLine(lines[0], 0x0724, { 0xFD,0xCB,0x23,0xC9 }, "*SET 1, (IY+$23), C");
        initMem(0x0728, { 0xFD,0xCB,0x23,0xCA });
        lines = disassembler_.disassembleForward(0x0728, memory_, 1);
        verifyLine(lines[0], 0x0728, { 0xFD,0xCB,0x23,0xCA }, "*SET 1, (IY+$23), D");
        initMem(0x072c, { 0xFD,0xCB,0x23,0xCB });
        lines = disassembler_.disassembleForward(0x072c, memory_, 1);
        verifyLine(lines[0], 0x072c, { 0xFD,0xCB,0x23,0xCB }, "*SET 1, (IY+$23), E");
        initMem(0x0730, { 0xFD,0xCB,0x23,0xCC });
        lines = disassembler_.disassembleForward(0x0730, memory_, 1);
        verifyLine(lines[0], 0x0730, { 0xFD,0xCB,0x23,0xCC }, "*SET 1, (IY+$23), H");
        initMem(0x0734, { 0xFD,0xCB,0x23,0xCD });
        lines = disassembler_.disassembleForward(0x0734, memory_, 1);
        verifyLine(lines[0], 0x0734, { 0xFD,0xCB,0x23,0xCD }, "*SET 1, (IY+$23), L");
        initMem(0x0738, { 0xFD,0xCB,0x23,0xCE });
        lines = disassembler_.disassembleForward(0x0738, memory_, 1);
        verifyLine(lines[0], 0x0738, { 0xFD,0xCB,0x23,0xCE }, "SET 1, (IY+$23)");
        initMem(0x073c, { 0xFD,0xCB,0x23,0xCF });
        lines = disassembler_.disassembleForward(0x073c, memory_, 1);
        verifyLine(lines[0], 0x073c, { 0xFD,0xCB,0x23,0xCF }, "*SET 1, (IY+$23), A");
        initMem(0x0740, { 0xFD,0xCB,0x23,0xD0 });
        lines = disassembler_.disassembleForward(0x0740, memory_, 1);
        verifyLine(lines[0], 0x0740, { 0xFD,0xCB,0x23,0xD0 }, "*SET 2, (IY+$23), B");
        initMem(0x0744, { 0xFD,0xCB,0x23,0xD1 });
        lines = disassembler_.disassembleForward(0x0744, memory_, 1);
        verifyLine(lines[0], 0x0744, { 0xFD,0xCB,0x23,0xD1 }, "*SET 2, (IY+$23), C");
        initMem(0x0748, { 0xFD,0xCB,0x23,0xD2 });
        lines = disassembler_.disassembleForward(0x0748, memory_, 1);
        verifyLine(lines[0], 0x0748, { 0xFD,0xCB,0x23,0xD2 }, "*SET 2, (IY+$23), D");
        initMem(0x074c, { 0xFD,0xCB,0x23,0xD3 });
        lines = disassembler_.disassembleForward(0x074c, memory_, 1);
        verifyLine(lines[0], 0x074c, { 0xFD,0xCB,0x23,0xD3 }, "*SET 2, (IY+$23), E");
        initMem(0x0750, { 0xFD,0xCB,0x23,0xD4 });
        lines = disassembler_.disassembleForward(0x0750, memory_, 1);
        verifyLine(lines[0], 0x0750, { 0xFD,0xCB,0x23,0xD4 }, "*SET 2, (IY+$23), H");
        initMem(0x0754, { 0xFD,0xCB,0x23,0xD5 });
        lines = disassembler_.disassembleForward(0x0754, memory_, 1);
        verifyLine(lines[0], 0x0754, { 0xFD,0xCB,0x23,0xD5 }, "*SET 2, (IY+$23), L");
        initMem(0x0758, { 0xFD,0xCB,0x23,0xD6 });
        lines = disassembler_.disassembleForward(0x0758, memory_, 1);
        verifyLine(lines[0], 0x0758, { 0xFD,0xCB,0x23,0xD6 }, "SET 2, (IY+$23)");
        initMem(0x075c, { 0xFD,0xCB,0x23,0xD7 });
        lines = disassembler_.disassembleForward(0x075c, memory_, 1);
        verifyLine(lines[0], 0x075c, { 0xFD,0xCB,0x23,0xD7 }, "*SET 2, (IY+$23), A");
        initMem(0x0760, { 0xFD,0xCB,0x23,0xD8 });
        lines = disassembler_.disassembleForward(0x0760, memory_, 1);
        verifyLine(lines[0], 0x0760, { 0xFD,0xCB,0x23,0xD8 }, "*SET 3, (IY+$23), B");
        initMem(0x0764, { 0xFD,0xCB,0x23,0xD9 });
        lines = disassembler_.disassembleForward(0x0764, memory_, 1);
        verifyLine(lines[0], 0x0764, { 0xFD,0xCB,0x23,0xD9 }, "*SET 3, (IY+$23), C");
        initMem(0x0768, { 0xFD,0xCB,0x23,0xDA });
        lines = disassembler_.disassembleForward(0x0768, memory_, 1);
        verifyLine(lines[0], 0x0768, { 0xFD,0xCB,0x23,0xDA }, "*SET 3, (IY+$23), D");
        initMem(0x076c, { 0xFD,0xCB,0x23,0xDB });
        lines = disassembler_.disassembleForward(0x076c, memory_, 1);
        verifyLine(lines[0], 0x076c, { 0xFD,0xCB,0x23,0xDB }, "*SET 3, (IY+$23), E");
        initMem(0x0770, { 0xFD,0xCB,0x23,0xDC });
        lines = disassembler_.disassembleForward(0x0770, memory_, 1);
        verifyLine(lines[0], 0x0770, { 0xFD,0xCB,0x23,0xDC }, "*SET 3, (IY+$23), H");
        initMem(0x0774, { 0xFD,0xCB,0x23,0xDD });
        lines = disassembler_.disassembleForward(0x0774, memory_, 1);
        verifyLine(lines[0], 0x0774, { 0xFD,0xCB,0x23,0xDD }, "*SET 3, (IY+$23), L");
        initMem(0x0778, { 0xFD,0xCB,0x23,0xDE });
        lines = disassembler_.disassembleForward(0x0778, memory_, 1);
        verifyLine(lines[0], 0x0778, { 0xFD,0xCB,0x23,0xDE }, "SET 3, (IY+$23)");
        initMem(0x077c, { 0xFD,0xCB,0x23,0xDF });
        lines = disassembler_.disassembleForward(0x077c, memory_, 1);
        verifyLine(lines[0], 0x077c, { 0xFD,0xCB,0x23,0xDF }, "*SET 3, (IY+$23), A");
        initMem(0x0780, { 0xFD,0xCB,0x23,0xE0 });
        lines = disassembler_.disassembleForward(0x0780, memory_, 1);
        verifyLine(lines[0], 0x0780, { 0xFD,0xCB,0x23,0xE0 }, "*SET 4, (IY+$23), B");
        initMem(0x0784, { 0xFD,0xCB,0x23,0xE1 });
        lines = disassembler_.disassembleForward(0x0784, memory_, 1);
        verifyLine(lines[0], 0x0784, { 0xFD,0xCB,0x23,0xE1 }, "*SET 4, (IY+$23), C");
        initMem(0x0788, { 0xFD,0xCB,0x23,0xE2 });
        lines = disassembler_.disassembleForward(0x0788, memory_, 1);
        verifyLine(lines[0], 0x0788, { 0xFD,0xCB,0x23,0xE2 }, "*SET 4, (IY+$23), D");
        initMem(0x078c, { 0xFD,0xCB,0x23,0xE3 });
        lines = disassembler_.disassembleForward(0x078c, memory_, 1);
        verifyLine(lines[0], 0x078c, { 0xFD,0xCB,0x23,0xE3 }, "*SET 4, (IY+$23), E");
        initMem(0x0790, { 0xFD,0xCB,0x23,0xE4 });
        lines = disassembler_.disassembleForward(0x0790, memory_, 1);
        verifyLine(lines[0], 0x0790, { 0xFD,0xCB,0x23,0xE4 }, "*SET 4, (IY+$23), H");
        initMem(0x0794, { 0xFD,0xCB,0x23,0xE5 });
        lines = disassembler_.disassembleForward(0x0794, memory_, 1);
        verifyLine(lines[0], 0x0794, { 0xFD,0xCB,0x23,0xE5 }, "*SET 4, (IY+$23), L");
        initMem(0x0798, { 0xFD,0xCB,0x23,0xE6 });
        lines = disassembler_.disassembleForward(0x0798, memory_, 1);
        verifyLine(lines[0], 0x0798, { 0xFD,0xCB,0x23,0xE6 }, "SET 4, (IY+$23)");
        initMem(0x079c, { 0xFD,0xCB,0x23,0xE7 });
        lines = disassembler_.disassembleForward(0x079c, memory_, 1);
        verifyLine(lines[0], 0x079c, { 0xFD,0xCB,0x23,0xE7 }, "*SET 4, (IY+$23), A");
        initMem(0x07a0, { 0xFD,0xCB,0x23,0xE8 });
        lines = disassembler_.disassembleForward(0x07a0, memory_, 1);
        verifyLine(lines[0], 0x07a0, { 0xFD,0xCB,0x23,0xE8 }, "*SET 5, (IY+$23), B");
        initMem(0x07a4, { 0xFD,0xCB,0x23,0xE9 });
        lines = disassembler_.disassembleForward(0x07a4, memory_, 1);
        verifyLine(lines[0], 0x07a4, { 0xFD,0xCB,0x23,0xE9 }, "*SET 5, (IY+$23), C");
        initMem(0x07a8, { 0xFD,0xCB,0x23,0xEA });
        lines = disassembler_.disassembleForward(0x07a8, memory_, 1);
        verifyLine(lines[0], 0x07a8, { 0xFD,0xCB,0x23,0xEA }, "*SET 5, (IY+$23), D");
        initMem(0x07ac, { 0xFD,0xCB,0x23,0xEB });
        lines = disassembler_.disassembleForward(0x07ac, memory_, 1);
        verifyLine(lines[0], 0x07ac, { 0xFD,0xCB,0x23,0xEB }, "*SET 5, (IY+$23), E");
        initMem(0x07b0, { 0xFD,0xCB,0x23,0xEC });
        lines = disassembler_.disassembleForward(0x07b0, memory_, 1);
        verifyLine(lines[0], 0x07b0, { 0xFD,0xCB,0x23,0xEC }, "*SET 5, (IY+$23), H");
        initMem(0x07b4, { 0xFD,0xCB,0x23,0xED });
        lines = disassembler_.disassembleForward(0x07b4, memory_, 1);
        verifyLine(lines[0], 0x07b4, { 0xFD,0xCB,0x23,0xED }, "*SET 5, (IY+$23), L");
        initMem(0x07b8, { 0xFD,0xCB,0x23,0xEE });
        lines = disassembler_.disassembleForward(0x07b8, memory_, 1);
        verifyLine(lines[0], 0x07b8, { 0xFD,0xCB,0x23,0xEE }, "SET 5, (IY+$23)");
        initMem(0x07bc, { 0xFD,0xCB,0x23,0xEF });
        lines = disassembler_.disassembleForward(0x07bc, memory_, 1);
        verifyLine(lines[0], 0x07bc, { 0xFD,0xCB,0x23,0xEF }, "*SET 5, (IY+$23), A");
        initMem(0x07c0, { 0xFD,0xCB,0x23,0xF0 });
        lines = disassembler_.disassembleForward(0x07c0, memory_, 1);
        verifyLine(lines[0], 0x07c0, { 0xFD,0xCB,0x23,0xF0 }, "*SET 6, (IY+$23), B");
        initMem(0x07c4, { 0xFD,0xCB,0x23,0xF1 });
        lines = disassembler_.disassembleForward(0x07c4, memory_, 1);
        verifyLine(lines[0], 0x07c4, { 0xFD,0xCB,0x23,0xF1 }, "*SET 6, (IY+$23), C");
        initMem(0x07c8, { 0xFD,0xCB,0x23,0xF2 });
        lines = disassembler_.disassembleForward(0x07c8, memory_, 1);
        verifyLine(lines[0], 0x07c8, { 0xFD,0xCB,0x23,0xF2 }, "*SET 6, (IY+$23), D");
        initMem(0x07cc, { 0xFD,0xCB,0x23,0xF3 });
        lines = disassembler_.disassembleForward(0x07cc, memory_, 1);
        verifyLine(lines[0], 0x07cc, { 0xFD,0xCB,0x23,0xF3 }, "*SET 6, (IY+$23), E");
        initMem(0x07d0, { 0xFD,0xCB,0x23,0xF4 });
        lines = disassembler_.disassembleForward(0x07d0, memory_, 1);
        verifyLine(lines[0], 0x07d0, { 0xFD,0xCB,0x23,0xF4 }, "*SET 6, (IY+$23), H");
        initMem(0x07d4, { 0xFD,0xCB,0x23,0xF5 });
        lines = disassembler_.disassembleForward(0x07d4, memory_, 1);
        verifyLine(lines[0], 0x07d4, { 0xFD,0xCB,0x23,0xF5 }, "*SET 6, (IY+$23), L");
        initMem(0x07d8, { 0xFD,0xCB,0x23,0xF6 });
        lines = disassembler_.disassembleForward(0x07d8, memory_, 1);
        verifyLine(lines[0], 0x07d8, { 0xFD,0xCB,0x23,0xF6 }, "SET 6, (IY+$23)");
        initMem(0x07dc, { 0xFD,0xCB,0x23,0xF7 });
        lines = disassembler_.disassembleForward(0x07dc, memory_, 1);
        verifyLine(lines[0], 0x07dc, { 0xFD,0xCB,0x23,0xF7 }, "*SET 6, (IY+$23), A");
        initMem(0x07e0, { 0xFD,0xCB,0x23,0xF8 });
        lines = disassembler_.disassembleForward(0x07e0, memory_, 1);
        verifyLine(lines[0], 0x07e0, { 0xFD,0xCB,0x23,0xF8 }, "*SET 7, (IY+$23), B");
        initMem(0x07e4, { 0xFD,0xCB,0x23,0xF9 });
        lines = disassembler_.disassembleForward(0x07e4, memory_, 1);
        verifyLine(lines[0], 0x07e4, { 0xFD,0xCB,0x23,0xF9 }, "*SET 7, (IY+$23), C");
        initMem(0x07e8, { 0xFD,0xCB,0x23,0xFA });
        lines = disassembler_.disassembleForward(0x07e8, memory_, 1);
        verifyLine(lines[0], 0x07e8, { 0xFD,0xCB,0x23,0xFA }, "*SET 7, (IY+$23), D");
        initMem(0x07ec, { 0xFD,0xCB,0x23,0xFB });
        lines = disassembler_.disassembleForward(0x07ec, memory_, 1);
        verifyLine(lines[0], 0x07ec, { 0xFD,0xCB,0x23,0xFB }, "*SET 7, (IY+$23), E");
        initMem(0x07f0, { 0xFD,0xCB,0x23,0xFC });
        lines = disassembler_.disassembleForward(0x07f0, memory_, 1);
        verifyLine(lines[0], 0x07f0, { 0xFD,0xCB,0x23,0xFC }, "*SET 7, (IY+$23), H");
        initMem(0x07f4, { 0xFD,0xCB,0x23,0xFD });
        lines = disassembler_.disassembleForward(0x07f4, memory_, 1);
        verifyLine(lines[0], 0x07f4, { 0xFD,0xCB,0x23,0xFD }, "*SET 7, (IY+$23), L");
        initMem(0x07f8, { 0xFD,0xCB,0x23,0xFE });
        lines = disassembler_.disassembleForward(0x07f8, memory_, 1);
        verifyLine(lines[0], 0x07f8, { 0xFD,0xCB,0x23,0xFE }, "SET 7, (IY+$23)");
        initMem(0x07fc, { 0xFD,0xCB,0x23,0xFF });
        lines = disassembler_.disassembleForward(0x07fc, memory_, 1);
        verifyLine(lines[0], 0x07fc, { 0xFD,0xCB,0x23,0xFF }, "*SET 7, (IY+$23), A");
    }

    void cleanupTestCase() {
    }

};

}

QTEST_MAIN(vicedebug::DisassemblerZ80Test)

#include "disassembler_z80_test.moc"
